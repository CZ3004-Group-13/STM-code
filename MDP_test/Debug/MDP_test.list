
MDP_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b248  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000100c  0800b438  0800b438  0001b438  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c444  0800c444  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c444  0800c444  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c444  0800c444  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c444  0800c444  0001c444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c448  0800c448  0001c448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e24  200001e4  0800c630  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005008  0800c630  00025008  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acc5  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003904  00000000  00000000  0003aed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  0003e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001420  00000000  00000000  0003fd40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004aeb  00000000  00000000  00041160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b25  00000000  00000000  00045c4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4736  00000000  00000000  0005c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d9c  00000000  00000000  00100efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001e4 	.word	0x200001e4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800b420 	.word	0x0800b420

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001e8 	.word	0x200001e8
 800022c:	0800b420 	.word	0x0800b420

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_frsub>:
 8000bcc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd0:	e002      	b.n	8000bd8 <__addsf3>
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_fsub>:
 8000bd4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd8 <__addsf3>:
 8000bd8:	0042      	lsls	r2, r0, #1
 8000bda:	bf1f      	itttt	ne
 8000bdc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be0:	ea92 0f03 	teqne	r2, r3
 8000be4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bec:	d06a      	beq.n	8000cc4 <__addsf3+0xec>
 8000bee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bf6:	bfc1      	itttt	gt
 8000bf8:	18d2      	addgt	r2, r2, r3
 8000bfa:	4041      	eorgt	r1, r0
 8000bfc:	4048      	eorgt	r0, r1
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	bfb8      	it	lt
 8000c02:	425b      	neglt	r3, r3
 8000c04:	2b19      	cmp	r3, #25
 8000c06:	bf88      	it	hi
 8000c08:	4770      	bxhi	lr
 8000c0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c26:	bf18      	it	ne
 8000c28:	4249      	negne	r1, r1
 8000c2a:	ea92 0f03 	teq	r2, r3
 8000c2e:	d03f      	beq.n	8000cb0 <__addsf3+0xd8>
 8000c30:	f1a2 0201 	sub.w	r2, r2, #1
 8000c34:	fa41 fc03 	asr.w	ip, r1, r3
 8000c38:	eb10 000c 	adds.w	r0, r0, ip
 8000c3c:	f1c3 0320 	rsb	r3, r3, #32
 8000c40:	fa01 f103 	lsl.w	r1, r1, r3
 8000c44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__addsf3+0x78>
 8000c4a:	4249      	negs	r1, r1
 8000c4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c54:	d313      	bcc.n	8000c7e <__addsf3+0xa6>
 8000c56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5a:	d306      	bcc.n	8000c6a <__addsf3+0x92>
 8000c5c:	0840      	lsrs	r0, r0, #1
 8000c5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c62:	f102 0201 	add.w	r2, r2, #1
 8000c66:	2afe      	cmp	r2, #254	; 0xfe
 8000c68:	d251      	bcs.n	8000d0e <__addsf3+0x136>
 8000c6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c72:	bf08      	it	eq
 8000c74:	f020 0001 	biceq.w	r0, r0, #1
 8000c78:	ea40 0003 	orr.w	r0, r0, r3
 8000c7c:	4770      	bx	lr
 8000c7e:	0049      	lsls	r1, r1, #1
 8000c80:	eb40 0000 	adc.w	r0, r0, r0
 8000c84:	3a01      	subs	r2, #1
 8000c86:	bf28      	it	cs
 8000c88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c8c:	d2ed      	bcs.n	8000c6a <__addsf3+0x92>
 8000c8e:	fab0 fc80 	clz	ip, r0
 8000c92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c96:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c9e:	bfaa      	itet	ge
 8000ca0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca4:	4252      	neglt	r2, r2
 8000ca6:	4318      	orrge	r0, r3
 8000ca8:	bfbc      	itt	lt
 8000caa:	40d0      	lsrlt	r0, r2
 8000cac:	4318      	orrlt	r0, r3
 8000cae:	4770      	bx	lr
 8000cb0:	f092 0f00 	teq	r2, #0
 8000cb4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb8:	bf06      	itte	eq
 8000cba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cbe:	3201      	addeq	r2, #1
 8000cc0:	3b01      	subne	r3, #1
 8000cc2:	e7b5      	b.n	8000c30 <__addsf3+0x58>
 8000cc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	bf18      	it	ne
 8000cce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd2:	d021      	beq.n	8000d18 <__addsf3+0x140>
 8000cd4:	ea92 0f03 	teq	r2, r3
 8000cd8:	d004      	beq.n	8000ce4 <__addsf3+0x10c>
 8000cda:	f092 0f00 	teq	r2, #0
 8000cde:	bf08      	it	eq
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	4770      	bx	lr
 8000ce4:	ea90 0f01 	teq	r0, r1
 8000ce8:	bf1c      	itt	ne
 8000cea:	2000      	movne	r0, #0
 8000cec:	4770      	bxne	lr
 8000cee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf2:	d104      	bne.n	8000cfe <__addsf3+0x126>
 8000cf4:	0040      	lsls	r0, r0, #1
 8000cf6:	bf28      	it	cs
 8000cf8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	4770      	bx	lr
 8000cfe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d02:	bf3c      	itt	cc
 8000d04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d08:	4770      	bxcc	lr
 8000d0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	4770      	bx	lr
 8000d18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d1c:	bf16      	itet	ne
 8000d1e:	4608      	movne	r0, r1
 8000d20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d24:	4601      	movne	r1, r0
 8000d26:	0242      	lsls	r2, r0, #9
 8000d28:	bf06      	itte	eq
 8000d2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d2e:	ea90 0f01 	teqeq	r0, r1
 8000d32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_ui2f>:
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e004      	b.n	8000d48 <__aeabi_i2f+0x8>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_i2f>:
 8000d40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d44:	bf48      	it	mi
 8000d46:	4240      	negmi	r0, r0
 8000d48:	ea5f 0c00 	movs.w	ip, r0
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d54:	4601      	mov	r1, r0
 8000d56:	f04f 0000 	mov.w	r0, #0
 8000d5a:	e01c      	b.n	8000d96 <__aeabi_l2f+0x2a>

08000d5c <__aeabi_ul2f>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e00a      	b.n	8000d80 <__aeabi_l2f+0x14>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_l2f>:
 8000d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d78:	d502      	bpl.n	8000d80 <__aeabi_l2f+0x14>
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d80:	ea5f 0c01 	movs.w	ip, r1
 8000d84:	bf02      	ittt	eq
 8000d86:	4684      	moveq	ip, r0
 8000d88:	4601      	moveq	r1, r0
 8000d8a:	2000      	moveq	r0, #0
 8000d8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d90:	bf08      	it	eq
 8000d92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9a:	fabc f28c 	clz	r2, ip
 8000d9e:	3a08      	subs	r2, #8
 8000da0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da4:	db10      	blt.n	8000dc8 <__aeabi_l2f+0x5c>
 8000da6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000daa:	4463      	add	r3, ip
 8000dac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f102 0220 	add.w	r2, r2, #32
 8000dcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd0:	f1c2 0220 	rsb	r2, r2, #32
 8000dd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ddc:	eb43 0002 	adc.w	r0, r3, r2
 8000de0:	bf08      	it	eq
 8000de2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fmul>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d06f      	beq.n	8000ee0 <__aeabi_fmul+0xf8>
 8000e00:	441a      	add	r2, r3
 8000e02:	ea80 0c01 	eor.w	ip, r0, r1
 8000e06:	0240      	lsls	r0, r0, #9
 8000e08:	bf18      	it	ne
 8000e0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e0e:	d01e      	beq.n	8000e4e <__aeabi_fmul+0x66>
 8000e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e28:	bf3e      	ittt	cc
 8000e2a:	0049      	lslcc	r1, r1, #1
 8000e2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e30:	005b      	lslcc	r3, r3, #1
 8000e32:	ea40 0001 	orr.w	r0, r0, r1
 8000e36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e3a:	2afd      	cmp	r2, #253	; 0xfd
 8000e3c:	d81d      	bhi.n	8000e7a <__aeabi_fmul+0x92>
 8000e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e46:	bf08      	it	eq
 8000e48:	f020 0001 	biceq.w	r0, r0, #1
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e56:	bf08      	it	eq
 8000e58:	0249      	lsleq	r1, r1, #9
 8000e5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e62:	3a7f      	subs	r2, #127	; 0x7f
 8000e64:	bfc2      	ittt	gt
 8000e66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e6e:	4770      	bxgt	lr
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	f04f 0300 	mov.w	r3, #0
 8000e78:	3a01      	subs	r2, #1
 8000e7a:	dc5d      	bgt.n	8000f38 <__aeabi_fmul+0x150>
 8000e7c:	f112 0f19 	cmn.w	r2, #25
 8000e80:	bfdc      	itt	le
 8000e82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e86:	4770      	bxle	lr
 8000e88:	f1c2 0200 	rsb	r2, r2, #0
 8000e8c:	0041      	lsls	r1, r0, #1
 8000e8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e92:	f1c2 0220 	rsb	r2, r2, #32
 8000e96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e9e:	f140 0000 	adc.w	r0, r0, #0
 8000ea2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ea6:	bf08      	it	eq
 8000ea8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eac:	4770      	bx	lr
 8000eae:	f092 0f00 	teq	r2, #0
 8000eb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eb6:	bf02      	ittt	eq
 8000eb8:	0040      	lsleq	r0, r0, #1
 8000eba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ebe:	3a01      	subeq	r2, #1
 8000ec0:	d0f9      	beq.n	8000eb6 <__aeabi_fmul+0xce>
 8000ec2:	ea40 000c 	orr.w	r0, r0, ip
 8000ec6:	f093 0f00 	teq	r3, #0
 8000eca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0049      	lsleq	r1, r1, #1
 8000ed2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ed6:	3b01      	subeq	r3, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fmul+0xe6>
 8000eda:	ea41 010c 	orr.w	r1, r1, ip
 8000ede:	e78f      	b.n	8000e00 <__aeabi_fmul+0x18>
 8000ee0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ee4:	ea92 0f0c 	teq	r2, ip
 8000ee8:	bf18      	it	ne
 8000eea:	ea93 0f0c 	teqne	r3, ip
 8000eee:	d00a      	beq.n	8000f06 <__aeabi_fmul+0x11e>
 8000ef0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ef4:	bf18      	it	ne
 8000ef6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	d1d8      	bne.n	8000eae <__aeabi_fmul+0xc6>
 8000efc:	ea80 0001 	eor.w	r0, r0, r1
 8000f00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f04:	4770      	bx	lr
 8000f06:	f090 0f00 	teq	r0, #0
 8000f0a:	bf17      	itett	ne
 8000f0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f10:	4608      	moveq	r0, r1
 8000f12:	f091 0f00 	teqne	r1, #0
 8000f16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f1a:	d014      	beq.n	8000f46 <__aeabi_fmul+0x15e>
 8000f1c:	ea92 0f0c 	teq	r2, ip
 8000f20:	d101      	bne.n	8000f26 <__aeabi_fmul+0x13e>
 8000f22:	0242      	lsls	r2, r0, #9
 8000f24:	d10f      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f26:	ea93 0f0c 	teq	r3, ip
 8000f2a:	d103      	bne.n	8000f34 <__aeabi_fmul+0x14c>
 8000f2c:	024b      	lsls	r3, r1, #9
 8000f2e:	bf18      	it	ne
 8000f30:	4608      	movne	r0, r1
 8000f32:	d108      	bne.n	8000f46 <__aeabi_fmul+0x15e>
 8000f34:	ea80 0001 	eor.w	r0, r0, r1
 8000f38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f44:	4770      	bx	lr
 8000f46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f4e:	4770      	bx	lr

08000f50 <__aeabi_fdiv>:
 8000f50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f58:	bf1e      	ittt	ne
 8000f5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f5e:	ea92 0f0c 	teqne	r2, ip
 8000f62:	ea93 0f0c 	teqne	r3, ip
 8000f66:	d069      	beq.n	800103c <__aeabi_fdiv+0xec>
 8000f68:	eba2 0203 	sub.w	r2, r2, r3
 8000f6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f70:	0249      	lsls	r1, r1, #9
 8000f72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f76:	d037      	beq.n	8000fe8 <__aeabi_fdiv+0x98>
 8000f78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	bf38      	it	cc
 8000f8c:	005b      	lslcc	r3, r3, #1
 8000f8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f96:	428b      	cmp	r3, r1
 8000f98:	bf24      	itt	cs
 8000f9a:	1a5b      	subcs	r3, r3, r1
 8000f9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fa0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fa4:	bf24      	itt	cs
 8000fa6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000faa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fb2:	bf24      	itt	cs
 8000fb4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	bf18      	it	ne
 8000fce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fd2:	d1e0      	bne.n	8000f96 <__aeabi_fdiv+0x46>
 8000fd4:	2afd      	cmp	r2, #253	; 0xfd
 8000fd6:	f63f af50 	bhi.w	8000e7a <__aeabi_fmul+0x92>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fe0:	bf08      	it	eq
 8000fe2:	f020 0001 	biceq.w	r0, r0, #1
 8000fe6:	4770      	bx	lr
 8000fe8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ff0:	327f      	adds	r2, #127	; 0x7f
 8000ff2:	bfc2      	ittt	gt
 8000ff4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ffc:	4770      	bxgt	lr
 8000ffe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	3a01      	subs	r2, #1
 8001008:	e737      	b.n	8000e7a <__aeabi_fmul+0x92>
 800100a:	f092 0f00 	teq	r2, #0
 800100e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001012:	bf02      	ittt	eq
 8001014:	0040      	lsleq	r0, r0, #1
 8001016:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800101a:	3a01      	subeq	r2, #1
 800101c:	d0f9      	beq.n	8001012 <__aeabi_fdiv+0xc2>
 800101e:	ea40 000c 	orr.w	r0, r0, ip
 8001022:	f093 0f00 	teq	r3, #0
 8001026:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800102a:	bf02      	ittt	eq
 800102c:	0049      	lsleq	r1, r1, #1
 800102e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001032:	3b01      	subeq	r3, #1
 8001034:	d0f9      	beq.n	800102a <__aeabi_fdiv+0xda>
 8001036:	ea41 010c 	orr.w	r1, r1, ip
 800103a:	e795      	b.n	8000f68 <__aeabi_fdiv+0x18>
 800103c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001040:	ea92 0f0c 	teq	r2, ip
 8001044:	d108      	bne.n	8001058 <__aeabi_fdiv+0x108>
 8001046:	0242      	lsls	r2, r0, #9
 8001048:	f47f af7d 	bne.w	8000f46 <__aeabi_fmul+0x15e>
 800104c:	ea93 0f0c 	teq	r3, ip
 8001050:	f47f af70 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 8001054:	4608      	mov	r0, r1
 8001056:	e776      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001058:	ea93 0f0c 	teq	r3, ip
 800105c:	d104      	bne.n	8001068 <__aeabi_fdiv+0x118>
 800105e:	024b      	lsls	r3, r1, #9
 8001060:	f43f af4c 	beq.w	8000efc <__aeabi_fmul+0x114>
 8001064:	4608      	mov	r0, r1
 8001066:	e76e      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001068:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800106c:	bf18      	it	ne
 800106e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001072:	d1ca      	bne.n	800100a <__aeabi_fdiv+0xba>
 8001074:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001078:	f47f af5c 	bne.w	8000f34 <__aeabi_fmul+0x14c>
 800107c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001080:	f47f af3c 	bne.w	8000efc <__aeabi_fmul+0x114>
 8001084:	e75f      	b.n	8000f46 <__aeabi_fmul+0x15e>
 8001086:	bf00      	nop

08001088 <__gesf2>:
 8001088:	f04f 3cff 	mov.w	ip, #4294967295
 800108c:	e006      	b.n	800109c <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__lesf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	e002      	b.n	800109c <__cmpsf2+0x4>
 8001096:	bf00      	nop

08001098 <__cmpsf2>:
 8001098:	f04f 0c01 	mov.w	ip, #1
 800109c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010ac:	bf18      	it	ne
 80010ae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010b2:	d011      	beq.n	80010d8 <__cmpsf2+0x40>
 80010b4:	b001      	add	sp, #4
 80010b6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010ba:	bf18      	it	ne
 80010bc:	ea90 0f01 	teqne	r0, r1
 80010c0:	bf58      	it	pl
 80010c2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010c6:	bf88      	it	hi
 80010c8:	17c8      	asrhi	r0, r1, #31
 80010ca:	bf38      	it	cc
 80010cc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010d0:	bf18      	it	ne
 80010d2:	f040 0001 	orrne.w	r0, r0, #1
 80010d6:	4770      	bx	lr
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__cmpsf2+0x4c>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d105      	bne.n	80010f0 <__cmpsf2+0x58>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d1e4      	bne.n	80010b4 <__cmpsf2+0x1c>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d0e1      	beq.n	80010b4 <__cmpsf2+0x1c>
 80010f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <__aeabi_cfrcmple>:
 80010f8:	4684      	mov	ip, r0
 80010fa:	4608      	mov	r0, r1
 80010fc:	4661      	mov	r1, ip
 80010fe:	e7ff      	b.n	8001100 <__aeabi_cfcmpeq>

08001100 <__aeabi_cfcmpeq>:
 8001100:	b50f      	push	{r0, r1, r2, r3, lr}
 8001102:	f7ff ffc9 	bl	8001098 <__cmpsf2>
 8001106:	2800      	cmp	r0, #0
 8001108:	bf48      	it	mi
 800110a:	f110 0f00 	cmnmi.w	r0, #0
 800110e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001110 <__aeabi_fcmpeq>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff fff4 	bl	8001100 <__aeabi_cfcmpeq>
 8001118:	bf0c      	ite	eq
 800111a:	2001      	moveq	r0, #1
 800111c:	2000      	movne	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmplt>:
 8001124:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001128:	f7ff ffea 	bl	8001100 <__aeabi_cfcmpeq>
 800112c:	bf34      	ite	cc
 800112e:	2001      	movcc	r0, #1
 8001130:	2000      	movcs	r0, #0
 8001132:	f85d fb08 	ldr.w	pc, [sp], #8
 8001136:	bf00      	nop

08001138 <__aeabi_fcmple>:
 8001138:	f84d ed08 	str.w	lr, [sp, #-8]!
 800113c:	f7ff ffe0 	bl	8001100 <__aeabi_cfcmpeq>
 8001140:	bf94      	ite	ls
 8001142:	2001      	movls	r0, #1
 8001144:	2000      	movhi	r0, #0
 8001146:	f85d fb08 	ldr.w	pc, [sp], #8
 800114a:	bf00      	nop

0800114c <__aeabi_fcmpge>:
 800114c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001150:	f7ff ffd2 	bl	80010f8 <__aeabi_cfrcmple>
 8001154:	bf94      	ite	ls
 8001156:	2001      	movls	r0, #1
 8001158:	2000      	movhi	r0, #0
 800115a:	f85d fb08 	ldr.w	pc, [sp], #8
 800115e:	bf00      	nop

08001160 <__aeabi_fcmpgt>:
 8001160:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001164:	f7ff ffc8 	bl	80010f8 <__aeabi_cfrcmple>
 8001168:	bf34      	ite	cc
 800116a:	2001      	movcc	r0, #1
 800116c:	2000      	movcs	r0, #0
 800116e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001172:	bf00      	nop

08001174 <__aeabi_d2lz>:
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	460c      	mov	r4, r1
 8001178:	4605      	mov	r5, r0
 800117a:	4621      	mov	r1, r4
 800117c:	4628      	mov	r0, r5
 800117e:	2200      	movs	r2, #0
 8001180:	2300      	movs	r3, #0
 8001182:	f7ff fc8b 	bl	8000a9c <__aeabi_dcmplt>
 8001186:	b928      	cbnz	r0, 8001194 <__aeabi_d2lz+0x20>
 8001188:	4628      	mov	r0, r5
 800118a:	4621      	mov	r1, r4
 800118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001190:	f000 b80a 	b.w	80011a8 <__aeabi_d2ulz>
 8001194:	4628      	mov	r0, r5
 8001196:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800119a:	f000 f805 	bl	80011a8 <__aeabi_d2ulz>
 800119e:	4240      	negs	r0, r0
 80011a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a4:	bd38      	pop	{r3, r4, r5, pc}
 80011a6:	bf00      	nop

080011a8 <__aeabi_d2ulz>:
 80011a8:	b5d0      	push	{r4, r6, r7, lr}
 80011aa:	2200      	movs	r2, #0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <__aeabi_d2ulz+0x34>)
 80011ae:	4606      	mov	r6, r0
 80011b0:	460f      	mov	r7, r1
 80011b2:	f7ff fa01 	bl	80005b8 <__aeabi_dmul>
 80011b6:	f7ff fc99 	bl	8000aec <__aeabi_d2uiz>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f7ff f982 	bl	80004c4 <__aeabi_ui2d>
 80011c0:	2200      	movs	r2, #0
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <__aeabi_d2ulz+0x38>)
 80011c4:	f7ff f9f8 	bl	80005b8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4630      	mov	r0, r6
 80011ce:	4639      	mov	r1, r7
 80011d0:	f7ff f83a 	bl	8000248 <__aeabi_dsub>
 80011d4:	f7ff fc8a 	bl	8000aec <__aeabi_d2uiz>
 80011d8:	4621      	mov	r1, r4
 80011da:	bdd0      	pop	{r4, r6, r7, pc}
 80011dc:	3df00000 	.word	0x3df00000
 80011e0:	41f00000 	.word	0x41f00000

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f001 fc02 	bl	80029f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f864 	bl	80012b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f000 fabc 	bl	800176c <MX_GPIO_Init>
  MX_TIM8_Init();
 80011f4:	f000 f9e6 	bl	80015c4 <MX_TIM8_Init>
  MX_TIM2_Init();
 80011f8:	f000 f93c 	bl	8001474 <MX_TIM2_Init>
  MX_TIM1_Init();
 80011fc:	f000 f89c 	bl	8001338 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001200:	f000 fa8a 	bl	8001718 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001204:	f000 f98a 	bl	800151c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001208:	f007 f824 	bl	8008254 <OLED_Init>

  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,9999);
 800120c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001210:	4918      	ldr	r1, [pc, #96]	; (8001274 <main+0x90>)
 8001212:	4819      	ldr	r0, [pc, #100]	; (8001278 <main+0x94>)
 8001214:	f003 fd4a 	bl	8004cac <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001218:	f004 f9a0 	bl	800555c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <main+0x98>)
 800121e:	2100      	movs	r1, #0
 8001220:	4817      	ldr	r0, [pc, #92]	; (8001280 <main+0x9c>)
 8001222:	f004 fa01 	bl	8005628 <osThreadNew>
 8001226:	4603      	mov	r3, r0
 8001228:	4a16      	ldr	r2, [pc, #88]	; (8001284 <main+0xa0>)
 800122a:	6013      	str	r3, [r2, #0]

  /* creation of show_task */
  show_taskHandle = osThreadNew(show, NULL, &show_task_attributes);
 800122c:	4a16      	ldr	r2, [pc, #88]	; (8001288 <main+0xa4>)
 800122e:	2100      	movs	r1, #0
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <main+0xa8>)
 8001232:	f004 f9f9 	bl	8005628 <osThreadNew>
 8001236:	4603      	mov	r3, r0
 8001238:	4a15      	ldr	r2, [pc, #84]	; (8001290 <main+0xac>)
 800123a:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(motor, NULL, &Motor_attributes);
 800123c:	4a15      	ldr	r2, [pc, #84]	; (8001294 <main+0xb0>)
 800123e:	2100      	movs	r1, #0
 8001240:	4815      	ldr	r0, [pc, #84]	; (8001298 <main+0xb4>)
 8001242:	f004 f9f1 	bl	8005628 <osThreadNew>
 8001246:	4603      	mov	r3, r0
 8001248:	4a14      	ldr	r2, [pc, #80]	; (800129c <main+0xb8>)
 800124a:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(Encoder, NULL, &EncoderTask_attributes);
 800124c:	4a14      	ldr	r2, [pc, #80]	; (80012a0 <main+0xbc>)
 800124e:	2100      	movs	r1, #0
 8001250:	4814      	ldr	r0, [pc, #80]	; (80012a4 <main+0xc0>)
 8001252:	f004 f9e9 	bl	8005628 <osThreadNew>
 8001256:	4603      	mov	r3, r0
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <main+0xc4>)
 800125a:	6013      	str	r3, [r2, #0]

  /* creation of Servo */
  ServoHandle = osThreadNew(servo, NULL, &Servo_attributes);
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <main+0xc8>)
 800125e:	2100      	movs	r1, #0
 8001260:	4813      	ldr	r0, [pc, #76]	; (80012b0 <main+0xcc>)
 8001262:	f004 f9e1 	bl	8005628 <osThreadNew>
 8001266:	4603      	mov	r3, r0
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <main+0xd0>)
 800126a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800126c:	f004 f9a8 	bl	80055c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001270:	e7fe      	b.n	8001270 <main+0x8c>
 8001272:	bf00      	nop
 8001274:	2000245c 	.word	0x2000245c
 8001278:	2000236c 	.word	0x2000236c
 800127c:	0800b4dc 	.word	0x0800b4dc
 8001280:	08001c81 	.word	0x08001c81
 8001284:	20002320 	.word	0x20002320
 8001288:	0800b500 	.word	0x0800b500
 800128c:	08001ca1 	.word	0x08001ca1
 8001290:	200023b0 	.word	0x200023b0
 8001294:	0800b524 	.word	0x0800b524
 8001298:	08001d05 	.word	0x08001d05
 800129c:	20002458 	.word	0x20002458
 80012a0:	0800b548 	.word	0x0800b548
 80012a4:	08002219 	.word	0x08002219
 80012a8:	200023b4 	.word	0x200023b4
 80012ac:	0800b56c 	.word	0x0800b56c
 80012b0:	08002355 	.word	0x08002355
 80012b4:	20002404 	.word	0x20002404

080012b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b090      	sub	sp, #64	; 0x40
 80012bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	2228      	movs	r2, #40	; 0x28
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f007 f88c 	bl	80083e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012de:	2301      	movs	r3, #1
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e2:	2310      	movs	r3, #16
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e6:	2302      	movs	r3, #2
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012ea:	2300      	movs	r3, #0
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 f82e 	bl	8003358 <HAL_RCC_OscConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8001302:	f001 f885 	bl	8002410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001306:	230f      	movs	r3, #15
 8001308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130a:	2302      	movs	r3, #2
 800130c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fa9a 	bl	8003858 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800132a:	f001 f871 	bl	8002410 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3740      	adds	r7, #64	; 0x40
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b096      	sub	sp, #88	; 0x58
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2220      	movs	r2, #32
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 f837 	bl	80083e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <MX_TIM1_Init+0x134>)
 8001378:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <MX_TIM1_Init+0x138>)
 800137a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800137c:	4b3b      	ldr	r3, [pc, #236]	; (800146c <MX_TIM1_Init+0x134>)
 800137e:	22a0      	movs	r2, #160	; 0xa0
 8001380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b3a      	ldr	r3, [pc, #232]	; (800146c <MX_TIM1_Init+0x134>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001388:	4b38      	ldr	r3, [pc, #224]	; (800146c <MX_TIM1_Init+0x134>)
 800138a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800138e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b36      	ldr	r3, [pc, #216]	; (800146c <MX_TIM1_Init+0x134>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001396:	4b35      	ldr	r3, [pc, #212]	; (800146c <MX_TIM1_Init+0x134>)
 8001398:	2200      	movs	r2, #0
 800139a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139c:	4b33      	ldr	r3, [pc, #204]	; (800146c <MX_TIM1_Init+0x134>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a2:	4832      	ldr	r0, [pc, #200]	; (800146c <MX_TIM1_Init+0x134>)
 80013a4:	f002 fbf2 	bl	8003b8c <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013ae:	f001 f82f 	bl	8002410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013bc:	4619      	mov	r1, r3
 80013be:	482b      	ldr	r0, [pc, #172]	; (800146c <MX_TIM1_Init+0x134>)
 80013c0:	f002 ff34 	bl	800422c <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013ca:	f001 f821 	bl	8002410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ce:	4827      	ldr	r0, [pc, #156]	; (800146c <MX_TIM1_Init+0x134>)
 80013d0:	f002 fc2b 	bl	8003c2a <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013da:	f001 f819 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013ea:	4619      	mov	r1, r3
 80013ec:	481f      	ldr	r0, [pc, #124]	; (800146c <MX_TIM1_Init+0x134>)
 80013ee:	f003 fac1 	bl	8004974 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013f8:	f001 f80a 	bl	8002410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fc:	2360      	movs	r3, #96	; 0x60
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	220c      	movs	r2, #12
 800141a:	4619      	mov	r1, r3
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <MX_TIM1_Init+0x134>)
 800141e:	f002 fe47 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001428:	f000 fff2 	bl	8002410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001444:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM1_Init+0x134>)
 8001450:	f003 fafc 	bl	8004a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800145a:	f000 ffd9 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM1_Init+0x134>)
 8001460:	f001 f8fe 	bl	8002660 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3758      	adds	r7, #88	; 0x58
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20002410 	.word	0x20002410
 8001470:	40012c00 	.word	0x40012c00

08001474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	; 0x30
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	2224      	movs	r2, #36	; 0x24
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f006 ffae 	bl	80083e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001490:	4b21      	ldr	r3, [pc, #132]	; (8001518 <MX_TIM2_Init+0xa4>)
 8001492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <MX_TIM2_Init+0xa4>)
 800149a:	2200      	movs	r2, #0
 800149c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b1e      	ldr	r3, [pc, #120]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014b8:	2303      	movs	r3, #3
 80014ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014c0:	2301      	movs	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014c8:	230a      	movs	r3, #10
 80014ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014d0:	2301      	movs	r3, #1
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <MX_TIM2_Init+0xa4>)
 80014e4:	f002 fcb4 	bl	8003e50 <HAL_TIM_Encoder_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014ee:	f000 ff8f 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4619      	mov	r1, r3
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <MX_TIM2_Init+0xa4>)
 8001500:	f003 fa38 	bl	8004974 <HAL_TIMEx_MasterConfigSynchronization>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800150a:	f000 ff81 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	; 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20004b6c 	.word	0x20004b6c

0800151c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2224      	movs	r2, #36	; 0x24
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f006 ff5a 	bl	80083e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001538:	4b20      	ldr	r3, [pc, #128]	; (80015bc <MX_TIM3_Init+0xa0>)
 800153a:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <MX_TIM3_Init+0xa4>)
 800153c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <MX_TIM3_Init+0xa0>)
 8001540:	2200      	movs	r2, #0
 8001542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <MX_TIM3_Init+0xa0>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <MX_TIM3_Init+0xa0>)
 800154c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001550:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_TIM3_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_TIM3_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800155e:	2303      	movs	r3, #3
 8001560:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001566:	2301      	movs	r3, #1
 8001568:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800156e:	230a      	movs	r3, #10
 8001570:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001576:	2301      	movs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_TIM3_Init+0xa0>)
 800158a:	f002 fc61 	bl	8003e50 <HAL_TIM_Encoder_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001594:	f000 ff3c 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_TIM3_Init+0xa0>)
 80015a6:	f003 f9e5 	bl	8004974 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015b0:	f000 ff2e 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200023b8 	.word	0x200023b8
 80015c0:	40000400 	.word	0x40000400

080015c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b096      	sub	sp, #88	; 0x58
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	611a      	str	r2, [r3, #16]
 80015f2:	615a      	str	r2, [r3, #20]
 80015f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2220      	movs	r2, #32
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 fef1 	bl	80083e4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <MX_TIM8_Init+0x14c>)
 8001604:	4a43      	ldr	r2, [pc, #268]	; (8001714 <MX_TIM8_Init+0x150>)
 8001606:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001608:	4b41      	ldr	r3, [pc, #260]	; (8001710 <MX_TIM8_Init+0x14c>)
 800160a:	2200      	movs	r2, #0
 800160c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160e:	4b40      	ldr	r3, [pc, #256]	; (8001710 <MX_TIM8_Init+0x14c>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <MX_TIM8_Init+0x14c>)
 8001616:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800161a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <MX_TIM8_Init+0x14c>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <MX_TIM8_Init+0x14c>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <MX_TIM8_Init+0x14c>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800162e:	4838      	ldr	r0, [pc, #224]	; (8001710 <MX_TIM8_Init+0x14c>)
 8001630:	f002 faac 	bl	8003b8c <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800163a:	f000 fee9 	bl	8002410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001642:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001644:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001648:	4619      	mov	r1, r3
 800164a:	4831      	ldr	r0, [pc, #196]	; (8001710 <MX_TIM8_Init+0x14c>)
 800164c:	f002 fdee 	bl	800422c <HAL_TIM_ConfigClockSource>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001656:	f000 fedb 	bl	8002410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800165a:	482d      	ldr	r0, [pc, #180]	; (8001710 <MX_TIM8_Init+0x14c>)
 800165c:	f002 fae5 	bl	8003c2a <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001666:	f000 fed3 	bl	8002410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001672:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001676:	4619      	mov	r1, r3
 8001678:	4825      	ldr	r0, [pc, #148]	; (8001710 <MX_TIM8_Init+0x14c>)
 800167a:	f003 f97b 	bl	8004974 <HAL_TIMEx_MasterConfigSynchronization>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001684:	f000 fec4 	bl	8002410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001688:	2360      	movs	r3, #96	; 0x60
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	2200      	movs	r2, #0
 80016aa:	4619      	mov	r1, r3
 80016ac:	4818      	ldr	r0, [pc, #96]	; (8001710 <MX_TIM8_Init+0x14c>)
 80016ae:	f002 fcff 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016b8:	f000 feaa 	bl	8002410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	2204      	movs	r2, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_TIM8_Init+0x14c>)
 80016c6:	f002 fcf3 	bl	80040b0 <HAL_TIM_PWM_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80016d0:	f000 fe9e 	bl	8002410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4806      	ldr	r0, [pc, #24]	; (8001710 <MX_TIM8_Init+0x14c>)
 80016f8:	f003 f9a8 	bl	8004a4c <HAL_TIMEx_ConfigBreakDeadTime>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001702:	f000 fe85 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	3758      	adds	r7, #88	; 0x58
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20002324 	.word	0x20002324
 8001714:	40013400 	.word	0x40013400

08001718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_USART3_UART_Init+0x50>)
 8001720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_USART3_UART_Init+0x4c>)
 8001750:	f003 f9cd 	bl	8004aee <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800175a:	f000 fe59 	bl	8002410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2000236c 	.word	0x2000236c
 8001768:	40004800 	.word	0x40004800

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001780:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <MX_GPIO_Init+0xcc>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a2c      	ldr	r2, [pc, #176]	; (8001838 <MX_GPIO_Init+0xcc>)
 8001786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <MX_GPIO_Init+0xcc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <MX_GPIO_Init+0xcc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a26      	ldr	r2, [pc, #152]	; (8001838 <MX_GPIO_Init+0xcc>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a1a      	ldr	r2, [pc, #104]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_GPIO_Init+0xcc>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RES_Pin|OLED_DC_Pin
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <MX_GPIO_Init+0xd0>)
 80017e8:	f001 fd6c 	bl	80032c4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	213c      	movs	r1, #60	; 0x3c
 80017f0:	4813      	ldr	r0, [pc, #76]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017f2:	f001 fd67 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RES_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RES_Pin|OLED_DC_Pin
 80017f6:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80017fa:	613b      	str	r3, [r7, #16]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2302      	movs	r3, #2
 8001806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480b      	ldr	r0, [pc, #44]	; (800183c <MX_GPIO_Init+0xd0>)
 8001810:	f001 fbc4 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001814:	233c      	movs	r3, #60	; 0x3c
 8001816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001820:	2303      	movs	r3, #3
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_GPIO_Init+0xd4>)
 800182c:	f001 fbb6 	bl	8002f9c <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	40011800 	.word	0x40011800
 8001840:	40010800 	.word	0x40010800

08001844 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	//prevent unused argument(s) compilation warning
	UNUSED(huart);

	//put what to transmit into buffer
	HAL_UART_Transmit(&huart3,(uint8_t *) aRxBuffer,10,0xFFFF);
 800184c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001850:	220a      	movs	r2, #10
 8001852:	4907      	ldr	r1, [pc, #28]	; (8001870 <HAL_UART_RxCpltCallback+0x2c>)
 8001854:	4807      	ldr	r0, [pc, #28]	; (8001874 <HAL_UART_RxCpltCallback+0x30>)
 8001856:	f003 f997 	bl	8004b88 <HAL_UART_Transmit>
	memset(aRxBuffer, 0, sizeof(aRxBuffer)); // Reset array
 800185a:	f242 720f 	movw	r2, #9999	; 0x270f
 800185e:	2100      	movs	r1, #0
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <HAL_UART_RxCpltCallback+0x2c>)
 8001862:	f006 fdbf 	bl	80083e4 <memset>

}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000245c 	.word	0x2000245c
 8001874:	2000236c 	.word	0x2000236c

08001878 <substring>:

/* USER CODE END 4 */
char* substring(char *destination, const char *source, int beg, int n){
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
	//extract n characters from source string starting from beg index
	//copy into destination string

	while(n>0){
 8001886:	e00e      	b.n	80018a6 <substring+0x2e>
		*destination = *(source+beg);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	4413      	add	r3, r2
 800188e:	781a      	ldrb	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	701a      	strb	r2, [r3, #0]
		destination++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
		source++;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3301      	adds	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
		n--;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	603b      	str	r3, [r7, #0]
	while(n>0){
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	dced      	bgt.n	8001888 <substring+0x10>
	}
	//null termaination destination string
	*destination = '\0';
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
	return destination;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
	...

080018c0 <driveDistance>:

void driveDistance(float distance, uint16_t A, uint16_t B){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b090      	sub	sp, #64	; 0x40
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	803b      	strh	r3, [r7, #0]
	int offset = 5;
 80018d0:	2305      	movs	r3, #5
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t pwmValA = A;
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t pwmValB = B;
 80018d8:	883b      	ldrh	r3, [r7, #0]
 80018da:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint32_t tick;


	long leftcount = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
	long rightcount = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
	long prevleftcount = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
	long prevrightcount = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	long leftdiff, rightdiff;

//	float correction = -2.0;
//	distance = distance + correction;

	float countsPerRev = 1290; //cntA value per wheel revolution
 80018ec:	4b5a      	ldr	r3, [pc, #360]	; (8001a58 <driveDistance+0x198>)
 80018ee:	623b      	str	r3, [r7, #32]
	float wheelDiam = 6.43;
 80018f0:	4b5a      	ldr	r3, [pc, #360]	; (8001a5c <driveDistance+0x19c>)
 80018f2:	61fb      	str	r3, [r7, #28]
	float wheelCirc = PI * wheelDiam;
 80018f4:	69f8      	ldr	r0, [r7, #28]
 80018f6:	f7fe fe07 	bl	8000508 <__aeabi_f2d>
 80018fa:	a355      	add	r3, pc, #340	; (adr r3, 8001a50 <driveDistance+0x190>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fe5a 	bl	80005b8 <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f90e 	bl	8000b2c <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]

	float numRev = distance/wheelCirc;
 8001914:	69b9      	ldr	r1, [r7, #24]
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fb1a 	bl	8000f50 <__aeabi_fdiv>
 800191c:	4603      	mov	r3, r0
 800191e:	617b      	str	r3, [r7, #20]
	float targetcount = numRev * countsPerRev;
 8001920:	6a39      	ldr	r1, [r7, #32]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff fa60 	bl	8000de8 <__aeabi_fmul>
 8001928:	4603      	mov	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

	//reset counter values
	__HAL_TIM_SET_COUNTER(&htim2,0);
 800192c:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <driveDistance+0x1a0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2200      	movs	r2, #0
 8001932:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001934:	4b4b      	ldr	r3, [pc, #300]	; (8001a64 <driveDistance+0x1a4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	; 0x24
	osDelay(100);
 800193c:	2064      	movs	r0, #100	; 0x64
 800193e:	f003 ff1d 	bl	800577c <osDelay>

	 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET); //AIN2 ON
 8001942:	2201      	movs	r2, #1
 8001944:	2104      	movs	r1, #4
 8001946:	4848      	ldr	r0, [pc, #288]	; (8001a68 <driveDistance+0x1a8>)
 8001948:	f001 fcbc 	bl	80032c4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET); //AIN1 OFF
 800194c:	2200      	movs	r2, #0
 800194e:	2108      	movs	r1, #8
 8001950:	4845      	ldr	r0, [pc, #276]	; (8001a68 <driveDistance+0x1a8>)
 8001952:	f001 fcb7 	bl	80032c4 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET); //AIN1 ON
 8001956:	2201      	movs	r2, #1
 8001958:	2120      	movs	r1, #32
 800195a:	4843      	ldr	r0, [pc, #268]	; (8001a68 <driveDistance+0x1a8>)
 800195c:	f001 fcb2 	bl	80032c4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET); //AIN2 OFF
 8001960:	2200      	movs	r2, #0
 8001962:	2110      	movs	r1, #16
 8001964:	4840      	ldr	r0, [pc, #256]	; (8001a68 <driveDistance+0x1a8>)
 8001966:	f001 fcad 	bl	80032c4 <HAL_GPIO_WritePin>

	 // Modify the comparison value for the duty cycle
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 800196a:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <driveDistance+0x1ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001970:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001972:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <driveDistance+0x1ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001978:	639a      	str	r2, [r3, #56]	; 0x38

	 tick = HAL_GetTick(); //Provides a tick value in millisecond
 800197a:	f001 f891 	bl	8002aa0 <HAL_GetTick>
 800197e:	63b8      	str	r0, [r7, #56]	; 0x38

	 while(leftcount<targetcount){
 8001980:	e048      	b.n	8001a14 <driveDistance+0x154>
		 if(HAL_GetTick()-tick > 100L){
 8001982:	f001 f88d 	bl	8002aa0 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b64      	cmp	r3, #100	; 0x64
 800198e:	d941      	bls.n	8001a14 <driveDistance+0x154>
			 leftcount = __HAL_TIM_GET_COUNTER(&htim2);
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <driveDistance+0x1a0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
			 rightcount = __HAL_TIM_GET_COUNTER(&htim3);
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <driveDistance+0x1a4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	627b      	str	r3, [r7, #36]	; 0x24

			 leftdiff = abs(leftcount - prevleftcount);
 80019a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bfb8      	it	lt
 80019aa:	425b      	neglt	r3, r3
 80019ac:	60fb      	str	r3, [r7, #12]
			 rightdiff = abs(rightcount - prevrightcount);
 80019ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bfb8      	it	lt
 80019b8:	425b      	neglt	r3, r3
 80019ba:	60bb      	str	r3, [r7, #8]

			 prevleftcount = leftcount;
 80019bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
			 prevrightcount = rightcount;
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c

			 if(leftdiff>rightdiff){
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dd0a      	ble.n	80019e2 <driveDistance+0x122>
				 pwmValA = pwmValA - offset;
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
				 pwmValB = pwmValB + offset;
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	b29a      	uxth	r2, r3
 80019da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019dc:	4413      	add	r3, r2
 80019de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80019e0:	e00d      	b.n	80019fe <driveDistance+0x13e>
			 }
			 else if(leftdiff<rightdiff){
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	da09      	bge.n	80019fe <driveDistance+0x13e>
				 pwmValA = pwmValA + offset;
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019f0:	4413      	add	r3, r2
 80019f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
				 pwmValB = pwmValB - offset;
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
			 }
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <driveDistance+0x1ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <driveDistance+0x1ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a0c:	639a      	str	r2, [r3, #56]	; 0x38
			 tick = HAL_GetTick();
 8001a0e:	f001 f847 	bl	8002aa0 <HAL_GetTick>
 8001a12:	63b8      	str	r0, [r7, #56]	; 0x38
	 while(leftcount<targetcount){
 8001a14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a16:	f7ff f993 	bl	8000d40 <__aeabi_i2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	6938      	ldr	r0, [r7, #16]
 8001a20:	f7ff fb9e 	bl	8001160 <__aeabi_fcmpgt>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ab      	bne.n	8001982 <driveDistance+0xc2>
		 }
	 }
	 pwmValA = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	 pwmValB = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	87bb      	strh	r3, [r7, #60]	; 0x3c
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <driveDistance+0x1ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001a38:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <driveDistance+0x1ac>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a42:	bf00      	nop
 8001a44:	3740      	adds	r7, #64	; 0x40
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	c083126f 	.word	0xc083126f
 8001a54:	400921ca 	.word	0x400921ca
 8001a58:	44a14000 	.word	0x44a14000
 8001a5c:	40cdc28f 	.word	0x40cdc28f
 8001a60:	20004b6c 	.word	0x20004b6c
 8001a64:	200023b8 	.word	0x200023b8
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	20002324 	.word	0x20002324

08001a70 <turnAngle>:

void turnAngle(float degree, int direction){ //direction 0 for left, 1 for right
 8001a70:	b5b0      	push	{r4, r5, r7, lr}
 8001a72:	b090      	sub	sp, #64	; 0x40
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	uint32_t tick;
	 uint16_t pwmValA;
	 uint16_t pwmValB;

	long leftcount = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	63bb      	str	r3, [r7, #56]	; 0x38
	long rightcount = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
	long righttemp = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30

	float countsPerRev = 1290; //cntA value per wheel revolution
 8001a86:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <turnAngle+0x1f0>)
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
	float wheelDiam = 6.43;
 8001a8a:	4b76      	ldr	r3, [pc, #472]	; (8001c64 <turnAngle+0x1f4>)
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
	float wheelCirc = PI * wheelDiam;
 8001a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a90:	f7fe fd3a 	bl	8000508 <__aeabi_f2d>
 8001a94:	a36e      	add	r3, pc, #440	; (adr r3, 8001c50 <turnAngle+0x1e0>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fd8d 	bl	80005b8 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7ff f841 	bl	8000b2c <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
	float turningRad = 12.75;
 8001aae:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <turnAngle+0x1f8>)
 8001ab0:	623b      	str	r3, [r7, #32]

	float correction = 1.5;
 8001ab2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001ab6:	61fb      	str	r3, [r7, #28]

	float distance = (2 * PI * turningRad * (degree/360.0)) + correction;
 8001ab8:	6a38      	ldr	r0, [r7, #32]
 8001aba:	f7fe fd25 	bl	8000508 <__aeabi_f2d>
 8001abe:	a366      	add	r3, pc, #408	; (adr r3, 8001c58 <turnAngle+0x1e8>)
 8001ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac4:	f7fe fd78 	bl	80005b8 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7fe fd19 	bl	8000508 <__aeabi_f2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b64      	ldr	r3, [pc, #400]	; (8001c6c <turnAngle+0x1fc>)
 8001adc:	f7fe fe96 	bl	800080c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	f7fe fd66 	bl	80005b8 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	461d      	mov	r5, r3
 8001af4:	69f8      	ldr	r0, [r7, #28]
 8001af6:	f7fe fd07 	bl	8000508 <__aeabi_f2d>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4620      	mov	r0, r4
 8001b00:	4629      	mov	r1, r5
 8001b02:	f7fe fba3 	bl	800024c <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f80d 	bl	8000b2c <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
	float numRev = distance/wheelCirc;
 8001b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b18:	69b8      	ldr	r0, [r7, #24]
 8001b1a:	f7ff fa19 	bl	8000f50 <__aeabi_fdiv>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	617b      	str	r3, [r7, #20]
	float targetcount = numRev * countsPerRev;
 8001b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b24:	6978      	ldr	r0, [r7, #20]
 8001b26:	f7ff f95f 	bl	8000de8 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]

	//reset counter values
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8001b2e:	4b50      	ldr	r3, [pc, #320]	; (8001c70 <turnAngle+0x200>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COUNTER(&htim3,0);
 8001b36:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <turnAngle+0x204>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
	osDelay(100);
 8001b3e:	2064      	movs	r0, #100	; 0x64
 8001b40:	f003 fe1c 	bl	800577c <osDelay>

	 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET); //AIN2 ON
 8001b44:	2201      	movs	r2, #1
 8001b46:	2104      	movs	r1, #4
 8001b48:	484b      	ldr	r0, [pc, #300]	; (8001c78 <turnAngle+0x208>)
 8001b4a:	f001 fbbb 	bl	80032c4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET); //AIN1 OFF
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2108      	movs	r1, #8
 8001b52:	4849      	ldr	r0, [pc, #292]	; (8001c78 <turnAngle+0x208>)
 8001b54:	f001 fbb6 	bl	80032c4 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET); //AIN1 ON
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2120      	movs	r1, #32
 8001b5c:	4846      	ldr	r0, [pc, #280]	; (8001c78 <turnAngle+0x208>)
 8001b5e:	f001 fbb1 	bl	80032c4 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET); //AIN2 OFF
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	4844      	ldr	r0, [pc, #272]	; (8001c78 <turnAngle+0x208>)
 8001b68:	f001 fbac 	bl	80032c4 <HAL_GPIO_WritePin>

	 tick = HAL_GetTick(); //Provides a tick value in millisecond
 8001b6c:	f000 ff98 	bl	8002aa0 <HAL_GetTick>
 8001b70:	63f8      	str	r0, [r7, #60]	; 0x3c

	 if(direction == 0){ //left turn
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d128      	bne.n	8001bca <turnAngle+0x15a>
		 pwmValA = 500;
 8001b78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001b7c:	81fb      	strh	r3, [r7, #14]
		 pwmValB = 1500;
 8001b7e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001b82:	81bb      	strh	r3, [r7, #12]

		 // Modify the comparison value for the duty cycle
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <turnAngle+0x20c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	89fa      	ldrh	r2, [r7, #14]
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <turnAngle+0x20c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	89ba      	ldrh	r2, [r7, #12]
 8001b92:	639a      	str	r2, [r3, #56]	; 0x38
		 while(leftcount<targetcount){ //count inner wheel distance travelled
 8001b94:	e00d      	b.n	8001bb2 <turnAngle+0x142>
			 if(HAL_GetTick()-tick > 100L){
 8001b96:	f000 ff83 	bl	8002aa0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d906      	bls.n	8001bb2 <turnAngle+0x142>
				 leftcount = __HAL_TIM_GET_COUNTER(&htim2);
 8001ba4:	4b32      	ldr	r3, [pc, #200]	; (8001c70 <turnAngle+0x200>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
				 tick = HAL_GetTick();
 8001bac:	f000 ff78 	bl	8002aa0 <HAL_GetTick>
 8001bb0:	63f8      	str	r0, [r7, #60]	; 0x3c
		 while(leftcount<targetcount){ //count inner wheel distance travelled
 8001bb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bb4:	f7ff f8c4 	bl	8000d40 <__aeabi_i2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6938      	ldr	r0, [r7, #16]
 8001bbe:	f7ff facf 	bl	8001160 <__aeabi_fcmpgt>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e6      	bne.n	8001b96 <turnAngle+0x126>
 8001bc8:	e02f      	b.n	8001c2a <turnAngle+0x1ba>
			 }
		 }
	 }
	 else if(direction == 1){ //right turn
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d12c      	bne.n	8001c2a <turnAngle+0x1ba>
		 pwmValA = 1500;
 8001bd0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001bd4:	81fb      	strh	r3, [r7, #14]
		 pwmValB = 500;
 8001bd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bda:	81bb      	strh	r3, [r7, #12]

		 // Modify the comparison value for the duty cycle
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 8001bdc:	4b27      	ldr	r3, [pc, #156]	; (8001c7c <turnAngle+0x20c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	89fa      	ldrh	r2, [r7, #14]
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <turnAngle+0x20c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	89ba      	ldrh	r2, [r7, #12]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
		 while(rightcount<targetcount){
 8001bec:	e012      	b.n	8001c14 <turnAngle+0x1a4>
			 if(HAL_GetTick()-tick > 100L){
 8001bee:	f000 ff57 	bl	8002aa0 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d90b      	bls.n	8001c14 <turnAngle+0x1a4>
				 righttemp = __HAL_TIM_GET_COUNTER(&htim3);
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <turnAngle+0x204>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
				 rightcount = 65535 - righttemp;
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001c0a:	33ff      	adds	r3, #255	; 0xff
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
				 tick = HAL_GetTick();
 8001c0e:	f000 ff47 	bl	8002aa0 <HAL_GetTick>
 8001c12:	63f8      	str	r0, [r7, #60]	; 0x3c
		 while(rightcount<targetcount){
 8001c14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c16:	f7ff f893 	bl	8000d40 <__aeabi_i2f>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6938      	ldr	r0, [r7, #16]
 8001c20:	f7ff fa9e 	bl	8001160 <__aeabi_fcmpgt>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e1      	bne.n	8001bee <turnAngle+0x17e>
				 }
			 }
	 }
	 pwmValA = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	81fb      	strh	r3, [r7, #14]
	 pwmValB = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	81bb      	strh	r3, [r7, #12]
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 8001c32:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <turnAngle+0x20c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	89fa      	ldrh	r2, [r7, #14]
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <turnAngle+0x20c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	89ba      	ldrh	r2, [r7, #12]
 8001c40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c42:	bf00      	nop
 8001c44:	3740      	adds	r7, #64	; 0x40
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	c083126f 	.word	0xc083126f
 8001c54:	400921ca 	.word	0x400921ca
 8001c58:	c083126f 	.word	0xc083126f
 8001c5c:	401921ca 	.word	0x401921ca
 8001c60:	44a14000 	.word	0x44a14000
 8001c64:	40cdc28f 	.word	0x40cdc28f
 8001c68:	414c0000 	.word	0x414c0000
 8001c6c:	40768000 	.word	0x40768000
 8001c70:	20004b6c 	.word	0x20004b6c
 8001c74:	200023b8 	.word	0x200023b8
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	20002324 	.word	0x20002324

08001c80 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	  {
//		  HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
//		  if(ch<'Z')
//			  ch++;
//		  else ch = 'A';
		  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8c:	4803      	ldr	r0, [pc, #12]	; (8001c9c <StartDefaultTask+0x1c>)
 8001c8e:	f001 fb31 	bl	80032f4 <HAL_GPIO_TogglePin>
	      osDelay(5000);
 8001c92:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c96:	f003 fd71 	bl	800577c <osDelay>
		  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001c9a:	e7f5      	b.n	8001c88 <StartDefaultTask+0x8>
 8001c9c:	40011800 	.word	0x40011800

08001ca0 <show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show */
void show(void *argument)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show */
	uint8_t hello[20] = "hello\0";
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <show+0x58>)
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cb2:	6018      	str	r0, [r3, #0]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	8019      	strh	r1, [r3, #0]
 8001cb8:	3302      	adds	r3, #2
 8001cba:	0c0a      	lsrs	r2, r1, #16
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	f107 0313 	add.w	r3, r7, #19
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	731a      	strb	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	sprintf(hello,"%s\0",aRxBuffer);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <show+0x5c>)
 8001cd2:	490b      	ldr	r1, [pc, #44]	; (8001d00 <show+0x60>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f006 fb8d 	bl	80083f4 <siprintf>
	OLED_ShowString(10,10,hello); //write hello in ram of oled
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	461a      	mov	r2, r3
 8001ce0:	210a      	movs	r1, #10
 8001ce2:	200a      	movs	r0, #10
 8001ce4:	f006 fa84 	bl	80081f0 <OLED_ShowString>
	OLED_Refresh_Gram(); //refresh ram to show string
 8001ce8:	f006 f910 	bl	8007f0c <OLED_Refresh_Gram>
    osDelay(1000); //refresh every 1s
 8001cec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf0:	f003 fd44 	bl	800577c <osDelay>
	sprintf(hello,"%s\0",aRxBuffer);
 8001cf4:	e7ea      	b.n	8001ccc <show+0x2c>
 8001cf6:	bf00      	nop
 8001cf8:	0800b470 	.word	0x0800b470
 8001cfc:	2000245c 	.word	0x2000245c
 8001d00:	0800b46c 	.word	0x0800b46c

08001d04 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
  /* Infinite loop */
	  uint16_t pwmVal = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	847b      	strh	r3, [r7, #34]	; 0x22
	  uint16_t pwmValA = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	843b      	strh	r3, [r7, #32]
	  uint16_t pwmValB = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	83fb      	strh	r3, [r7, #30]
	  choice = aRxBuffer[i];
 8001d18:	4bb0      	ldr	r3, [pc, #704]	; (8001fdc <motor+0x2d8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4ab0      	ldr	r2, [pc, #704]	; (8001fe0 <motor+0x2dc>)
 8001d1e:	5cd2      	ldrb	r2, [r2, r3]
 8001d20:	4bb0      	ldr	r3, [pc, #704]	; (8001fe4 <motor+0x2e0>)
 8001d22:	701a      	strb	r2, [r3, #0]
	  uint8_t ch = 'A';
 8001d24:	2341      	movs	r3, #65	; 0x41
 8001d26:	75fb      	strb	r3, [r7, #23]
	  float dist;

	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1); //start motorA
 8001d28:	2100      	movs	r1, #0
 8001d2a:	48af      	ldr	r0, [pc, #700]	; (8001fe8 <motor+0x2e4>)
 8001d2c:	f001 ffd6 	bl	8003cdc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2); //start motorB
 8001d30:	2104      	movs	r1, #4
 8001d32:	48ad      	ldr	r0, [pc, #692]	; (8001fe8 <motor+0x2e4>)
 8001d34:	f001 ffd2 	bl	8003cdc <HAL_TIM_PWM_Start>
//		  if(sep_index>40){
//			  memset(aRxBuffer, 0, sizeof(aRxBuffer)); // Reset array
//			  sep_index = 0;
//			  i = 0;
//		  }
		  i=0;
 8001d38:	4ba8      	ldr	r3, [pc, #672]	; (8001fdc <motor+0x2d8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
		  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,10);
 8001d3e:	220a      	movs	r2, #10
 8001d40:	49a7      	ldr	r1, [pc, #668]	; (8001fe0 <motor+0x2dc>)
 8001d42:	48aa      	ldr	r0, [pc, #680]	; (8001fec <motor+0x2e8>)
 8001d44:	f002 ffb2 	bl	8004cac <HAL_UART_Receive_IT>

		  for (int ii=0; ii<10; ii++){
 8001d48:	2300      	movs	r3, #0
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	e010      	b.n	8001d70 <motor+0x6c>
			  if (aRxBuffer[i+ii] == '|') {
 8001d4e:	4ba3      	ldr	r3, [pc, #652]	; (8001fdc <motor+0x2d8>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	4413      	add	r3, r2
 8001d56:	4aa2      	ldr	r2, [pc, #648]	; (8001fe0 <motor+0x2dc>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	2b7c      	cmp	r3, #124	; 0x7c
 8001d5c:	d105      	bne.n	8001d6a <motor+0x66>
				  sep_index = i+ii;
 8001d5e:	4b9f      	ldr	r3, [pc, #636]	; (8001fdc <motor+0x2d8>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	4413      	add	r3, r2
 8001d66:	4aa2      	ldr	r2, [pc, #648]	; (8001ff0 <motor+0x2ec>)
 8001d68:	6013      	str	r3, [r2, #0]
		  for (int ii=0; ii<10; ii++){
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	ddeb      	ble.n	8001d4e <motor+0x4a>
			  }
		  }
		  if (sep_index <= i) {
 8001d76:	4b9e      	ldr	r3, [pc, #632]	; (8001ff0 <motor+0x2ec>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <motor+0x2d8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	f340 8239 	ble.w	80021f6 <motor+0x4f2>
			  continue;
		  }

		  choice = aRxBuffer[i];
 8001d84:	4b95      	ldr	r3, [pc, #596]	; (8001fdc <motor+0x2d8>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a95      	ldr	r2, [pc, #596]	; (8001fe0 <motor+0x2dc>)
 8001d8a:	5cd2      	ldrb	r2, [r2, r3]
 8001d8c:	4b95      	ldr	r3, [pc, #596]	; (8001fe4 <motor+0x2e0>)
 8001d8e:	701a      	strb	r2, [r3, #0]

		  char temp[10];
		  substring(temp,aRxBuffer,i+1,sep_index-i-1);
 8001d90:	4b92      	ldr	r3, [pc, #584]	; (8001fdc <motor+0x2d8>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	1c59      	adds	r1, r3, #1
 8001d96:	4b96      	ldr	r3, [pc, #600]	; (8001ff0 <motor+0x2ec>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <motor+0x2d8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	3b01      	subs	r3, #1
 8001da2:	f107 000c 	add.w	r0, r7, #12
 8001da6:	460a      	mov	r2, r1
 8001da8:	498d      	ldr	r1, [pc, #564]	; (8001fe0 <motor+0x2dc>)
 8001daa:	f7ff fd65 	bl	8001878 <substring>

		  dist = atof(temp);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4618      	mov	r0, r3
 8001db4:	f006 fada 	bl	800836c <atof>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f7fe feb4 	bl	8000b2c <__aeabi_d2f>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	61bb      	str	r3, [r7, #24]
		  //dist = 10;

		  switch(choice)
 8001dc8:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <motor+0x2e0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	3b46      	subs	r3, #70	; 0x46
 8001dce:	2b2e      	cmp	r3, #46	; 0x2e
 8001dd0:	f200 8213 	bhi.w	80021fa <motor+0x4f6>
 8001dd4:	a201      	add	r2, pc, #4	; (adr r2, 8001ddc <motor+0xd8>)
 8001dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dda:	bf00      	nop
 8001ddc:	08001eef 	.word	0x08001eef
 8001de0:	080021fb 	.word	0x080021fb
 8001de4:	080021fb 	.word	0x080021fb
 8001de8:	080021fb 	.word	0x080021fb
 8001dec:	080021fb 	.word	0x080021fb
 8001df0:	080021fb 	.word	0x080021fb
 8001df4:	080021fb 	.word	0x080021fb
 8001df8:	080021fb 	.word	0x080021fb
 8001dfc:	080021fb 	.word	0x080021fb
 8001e00:	080021fb 	.word	0x080021fb
 8001e04:	080021fb 	.word	0x080021fb
 8001e08:	080021fb 	.word	0x080021fb
 8001e0c:	080021fb 	.word	0x080021fb
 8001e10:	080021fb 	.word	0x080021fb
 8001e14:	080021fb 	.word	0x080021fb
 8001e18:	080021fb 	.word	0x080021fb
 8001e1c:	080021fb 	.word	0x080021fb
 8001e20:	080021fb 	.word	0x080021fb
 8001e24:	080021fb 	.word	0x080021fb
 8001e28:	080021fb 	.word	0x080021fb
 8001e2c:	080021fb 	.word	0x080021fb
 8001e30:	080021fb 	.word	0x080021fb
 8001e34:	080021fb 	.word	0x080021fb
 8001e38:	080021fb 	.word	0x080021fb
 8001e3c:	080021fb 	.word	0x080021fb
 8001e40:	080021fb 	.word	0x080021fb
 8001e44:	080021fb 	.word	0x080021fb
 8001e48:	08001faf 	.word	0x08001faf
 8001e4c:	08001f39 	.word	0x08001f39
 8001e50:	080021fb 	.word	0x080021fb
 8001e54:	080021fb 	.word	0x080021fb
 8001e58:	080021fb 	.word	0x080021fb
 8001e5c:	08001e99 	.word	0x08001e99
 8001e60:	08001ffd 	.word	0x08001ffd
 8001e64:	080021fb 	.word	0x080021fb
 8001e68:	080021fb 	.word	0x080021fb
 8001e6c:	080021fb 	.word	0x080021fb
 8001e70:	080021fb 	.word	0x080021fb
 8001e74:	080021fb 	.word	0x080021fb
 8001e78:	080021fb 	.word	0x080021fb
 8001e7c:	080021fb 	.word	0x080021fb
 8001e80:	080021fb 	.word	0x080021fb
 8001e84:	080021fb 	.word	0x080021fb
 8001e88:	080021fb 	.word	0x080021fb
 8001e8c:	080021fb 	.word	0x080021fb
 8001e90:	08001f8f 	.word	0x08001f8f
 8001e94:	08001fc9 	.word	0x08001fc9
		  {
		  	  case 'f': //forward slow
				  pwmValA=1500;
 8001e98:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001e9c:	843b      	strh	r3, [r7, #32]
				  pwmValB=500;
 8001e9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ea2:	83fb      	strh	r3, [r7, #30]
				     //AIN2_Pin|AIN1_Pin;
					 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET); //AIN2 ON
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4852      	ldr	r0, [pc, #328]	; (8001ff4 <motor+0x2f0>)
 8001eaa:	f001 fa0b 	bl	80032c4 <HAL_GPIO_WritePin>
					 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET); //AIN1 OFF
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	4850      	ldr	r0, [pc, #320]	; (8001ff4 <motor+0x2f0>)
 8001eb4:	f001 fa06 	bl	80032c4 <HAL_GPIO_WritePin>

					 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET); //AIN1 ON
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2120      	movs	r1, #32
 8001ebc:	484d      	ldr	r0, [pc, #308]	; (8001ff4 <motor+0x2f0>)
 8001ebe:	f001 fa01 	bl	80032c4 <HAL_GPIO_WritePin>
					 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET); //AIN2 OFF
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	484b      	ldr	r0, [pc, #300]	; (8001ff4 <motor+0x2f0>)
 8001ec8:	f001 f9fc 	bl	80032c4 <HAL_GPIO_WritePin>

					 // Modify the comparison value for the duty cycle
					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 8001ecc:	4b46      	ldr	r3, [pc, #280]	; (8001fe8 <motor+0x2e4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	8c3a      	ldrh	r2, [r7, #32]
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001ed4:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <motor+0x2e4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	8bfa      	ldrh	r2, [r7, #30]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38

					 osDelay(10); //comment out on forward assessment
 8001edc:	200a      	movs	r0, #10
 8001ede:	f003 fc4d 	bl	800577c <osDelay>

//				  pwmVal = 0;
//					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
//					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
//				  i++;
				  i = sep_index + 1;
 8001ee2:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <motor+0x2ec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	4a3c      	ldr	r2, [pc, #240]	; (8001fdc <motor+0x2d8>)
 8001eea:	6013      	str	r3, [r2, #0]
				  //choice = aRxBuffer[i];

				  //choice = 2;
				  break;
 8001eec:	e186      	b.n	80021fc <motor+0x4f8>

		  	  case 'F': //forward medium
				  pwmValA=880;
 8001eee:	f44f 735c 	mov.w	r3, #880	; 0x370
 8001ef2:	843b      	strh	r3, [r7, #32]
				  pwmValB=700;
 8001ef4:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8001ef8:	83fb      	strh	r3, [r7, #30]
				     //AIN2_Pin|AIN1_Pin;
					 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET); //AIN2 ON
 8001efa:	2201      	movs	r2, #1
 8001efc:	2104      	movs	r1, #4
 8001efe:	483d      	ldr	r0, [pc, #244]	; (8001ff4 <motor+0x2f0>)
 8001f00:	f001 f9e0 	bl	80032c4 <HAL_GPIO_WritePin>
					 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET); //AIN1 OFF
 8001f04:	2200      	movs	r2, #0
 8001f06:	2108      	movs	r1, #8
 8001f08:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <motor+0x2f0>)
 8001f0a:	f001 f9db 	bl	80032c4 <HAL_GPIO_WritePin>

					 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET); //AIN1 ON
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2120      	movs	r1, #32
 8001f12:	4838      	ldr	r0, [pc, #224]	; (8001ff4 <motor+0x2f0>)
 8001f14:	f001 f9d6 	bl	80032c4 <HAL_GPIO_WritePin>
					 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET); //AIN2 OFF
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	4835      	ldr	r0, [pc, #212]	; (8001ff4 <motor+0x2f0>)
 8001f1e:	f001 f9d1 	bl	80032c4 <HAL_GPIO_WritePin>

					 // Modify the comparison value for the duty cycle
					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmValA);
 8001f22:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <motor+0x2e4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	8c3a      	ldrh	r2, [r7, #32]
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <motor+0x2e4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	8bfa      	ldrh	r2, [r7, #30]
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38

					 osDelay(10); //comment out on forward assessment
 8001f32:	200a      	movs	r0, #10
 8001f34:	f003 fc22 	bl	800577c <osDelay>

		  	  case 'b': //backwards
		  		  pwmVal=800;
 8001f38:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001f3c:	847b      	strh	r3, [r7, #34]	; 0x22
						 HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET); //AIN2 OFF
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2104      	movs	r1, #4
 8001f42:	482c      	ldr	r0, [pc, #176]	; (8001ff4 <motor+0x2f0>)
 8001f44:	f001 f9be 	bl	80032c4 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET); //AIN1 ON
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4829      	ldr	r0, [pc, #164]	; (8001ff4 <motor+0x2f0>)
 8001f4e:	f001 f9b9 	bl	80032c4 <HAL_GPIO_WritePin>

						 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET); //AIN1 OFF
 8001f52:	2200      	movs	r2, #0
 8001f54:	2120      	movs	r1, #32
 8001f56:	4827      	ldr	r0, [pc, #156]	; (8001ff4 <motor+0x2f0>)
 8001f58:	f001 f9b4 	bl	80032c4 <HAL_GPIO_WritePin>
						 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET); //AIN2 ON
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <motor+0x2f0>)
 8001f62:	f001 f9af 	bl	80032c4 <HAL_GPIO_WritePin>
						 pwmVal++;
 8001f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f68:	3301      	adds	r3, #1
 8001f6a:	847b      	strh	r3, [r7, #34]	; 0x22
						 // Modify the comparison value for the duty cycle
						 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <motor+0x2e4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34
						 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8001f74:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <motor+0x2e4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f7a:	639a      	str	r2, [r3, #56]	; 0x38

						 osDelay(10);
 8001f7c:	200a      	movs	r0, #10
 8001f7e:	f003 fbfd 	bl	800577c <osDelay>
//		  		  pwmVal = 0;
//					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
//					 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);

//		  		  i++;
		  		  i = sep_index + 1;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <motor+0x2ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <motor+0x2d8>)
 8001f8a:	6013      	str	r3, [r2, #0]
				  //choice = aRxBuffer[i];

					 break;
 8001f8c:	e136      	b.n	80021fc <motor+0x4f8>

		  	  case 's':
		  		  	pwmVal = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	847b      	strh	r3, [r7, #34]	; 0x22
//		  			HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET); //AIN1 OFF
//
//					 HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET); //AIN1 ON
//					 HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET); //AIN2 OFF

		  			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmVal);
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <motor+0x2e4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001f98:	635a      	str	r2, [r3, #52]	; 0x34
		  			__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmVal);
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <motor+0x2e4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
		  			//osDelay(10);

//					 i++;
					 i = sep_index + 1;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <motor+0x2ec>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a0c      	ldr	r2, [pc, #48]	; (8001fdc <motor+0x2d8>)
 8001faa:	6013      	str	r3, [r2, #0]
					 //choice = aRxBuffer[i];
					 break;
 8001fac:	e126      	b.n	80021fc <motor+0x4f8>
		  	  case 'a': //test
		  		  //
//		  		  turnAngle(180,1);
//		  		  i++;
		  		  //dist = atof(temp);
		  		  driveDistance(dist,800,800);
 8001fae:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fb2:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001fb6:	69b8      	ldr	r0, [r7, #24]
 8001fb8:	f7ff fc82 	bl	80018c0 <driveDistance>
		  		  i = sep_index + 1;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <motor+0x2ec>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a06      	ldr	r2, [pc, #24]	; (8001fdc <motor+0x2d8>)
 8001fc4:	6013      	str	r3, [r2, #0]
		  		  break;
 8001fc6:	e119      	b.n	80021fc <motor+0x4f8>

		  	  case 't': //test
		  		  //
		  		  turnAngle(90,1);
 8001fc8:	2101      	movs	r1, #1
 8001fca:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <motor+0x2f4>)
 8001fcc:	f7ff fd50 	bl	8001a70 <turnAngle>
//		  		  i++;
		  		  i = sep_index + 1;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <motor+0x2ec>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a01      	ldr	r2, [pc, #4]	; (8001fdc <motor+0x2d8>)
 8001fd8:	6013      	str	r3, [r2, #0]
//		  		  driveDistance(dist,800,800);
//		  		  i+=3;
		  		  break;
 8001fda:	e10f      	b.n	80021fc <motor+0x4f8>
 8001fdc:	20000200 	.word	0x20000200
 8001fe0:	2000245c 	.word	0x2000245c
 8001fe4:	2000240c 	.word	0x2000240c
 8001fe8:	20002324 	.word	0x20002324
 8001fec:	2000236c 	.word	0x2000236c
 8001ff0:	20000204 	.word	0x20000204
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	42b40000 	.word	0x42b40000

		  	case 'g':  //aQCcWCbBC
				pwmValA = 800;
 8001ffc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002000:	843b      	strh	r3, [r7, #32]
				pwmValB = 825;
 8002002:	f240 3339 	movw	r3, #825	; 0x339
 8002006:	83fb      	strh	r3, [r7, #30]
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	2104      	movs	r1, #4
 800200c:	487c      	ldr	r0, [pc, #496]	; (8002200 <motor+0x4fc>)
 800200e:	f001 f959 	bl	80032c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	2108      	movs	r1, #8
 8002016:	487a      	ldr	r0, [pc, #488]	; (8002200 <motor+0x4fc>)
 8002018:	f001 f954 	bl	80032c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	2120      	movs	r1, #32
 8002020:	4877      	ldr	r0, [pc, #476]	; (8002200 <motor+0x4fc>)
 8002022:	f001 f94f 	bl	80032c4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002026:	2201      	movs	r2, #1
 8002028:	2110      	movs	r1, #16
 800202a:	4875      	ldr	r0, [pc, #468]	; (8002200 <motor+0x4fc>)
 800202c:	f001 f94a 	bl	80032c4 <HAL_GPIO_WritePin>
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 8002030:	4b74      	ldr	r3, [pc, #464]	; (8002204 <motor+0x500>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	8bfa      	ldrh	r2, [r7, #30]
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002038:	4b72      	ldr	r3, [pc, #456]	; (8002204 <motor+0x500>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	8c3a      	ldrh	r2, [r7, #32]
 800203e:	635a      	str	r2, [r3, #52]	; 0x34
		  		osDelay(3000);
 8002040:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002044:	f003 fb9a 	bl	800577c <osDelay>

	  	        pwmValA = pwmValB = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	83fb      	strh	r3, [r7, #30]
 800204c:	8bfb      	ldrh	r3, [r7, #30]
 800204e:	843b      	strh	r3, [r7, #32]
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002050:	4b6c      	ldr	r3, [pc, #432]	; (8002204 <motor+0x500>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	8c3a      	ldrh	r2, [r7, #32]
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 8002058:	4b6a      	ldr	r3, [pc, #424]	; (8002204 <motor+0x500>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	8bfa      	ldrh	r2, [r7, #30]
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
	  	        osDelay(1000);
 8002060:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002064:	f003 fb8a 	bl	800577c <osDelay>

		  		htim1.Instance->CCR4 = 94;
 8002068:	4b67      	ldr	r3, [pc, #412]	; (8002208 <motor+0x504>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	225e      	movs	r2, #94	; 0x5e
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
	  	        osDelay(1000);
 8002070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002074:	f003 fb82 	bl	800577c <osDelay>

	  	        pwmValA = 800;
 8002078:	f44f 7348 	mov.w	r3, #800	; 0x320
 800207c:	843b      	strh	r3, [r7, #32]
	  	        pwmValB = 825;
 800207e:	f240 3339 	movw	r3, #825	; 0x339
 8002082:	83fb      	strh	r3, [r7, #30]
	  	        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2104      	movs	r1, #4
 8002088:	485d      	ldr	r0, [pc, #372]	; (8002200 <motor+0x4fc>)
 800208a:	f001 f91b 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	2108      	movs	r1, #8
 8002092:	485b      	ldr	r0, [pc, #364]	; (8002200 <motor+0x4fc>)
 8002094:	f001 f916 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002098:	2201      	movs	r2, #1
 800209a:	2120      	movs	r1, #32
 800209c:	4858      	ldr	r0, [pc, #352]	; (8002200 <motor+0x4fc>)
 800209e:	f001 f911 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2110      	movs	r1, #16
 80020a6:	4856      	ldr	r0, [pc, #344]	; (8002200 <motor+0x4fc>)
 80020a8:	f001 f90c 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 80020ac:	4b55      	ldr	r3, [pc, #340]	; (8002204 <motor+0x500>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	8bfa      	ldrh	r2, [r7, #30]
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <motor+0x500>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	8c3a      	ldrh	r2, [r7, #32]
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
	  	        osDelay(7800);
 80020bc:	f641 6078 	movw	r0, #7800	; 0x1e78
 80020c0:	f003 fb5c 	bl	800577c <osDelay>

	  	        pwmValA = pwmValB = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	83fb      	strh	r3, [r7, #30]
 80020c8:	8bfb      	ldrh	r3, [r7, #30]
 80020ca:	843b      	strh	r3, [r7, #32]
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <motor+0x500>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	8c3a      	ldrh	r2, [r7, #32]
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 80020d4:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <motor+0x500>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	8bfa      	ldrh	r2, [r7, #30]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
	  	        osDelay(1000);
 80020dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e0:	f003 fb4c 	bl	800577c <osDelay>

	  	        htim1.Instance->CCR4 = 51;
 80020e4:	4b48      	ldr	r3, [pc, #288]	; (8002208 <motor+0x504>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2233      	movs	r2, #51	; 0x33
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
	  	        osDelay(1000);
 80020ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020f0:	f003 fb44 	bl	800577c <osDelay>

	  	        pwmValA = 770; //800
 80020f4:	f240 3302 	movw	r3, #770	; 0x302
 80020f8:	843b      	strh	r3, [r7, #32]
	  	        pwmValB = 875; //825
 80020fa:	f240 336b 	movw	r3, #875	; 0x36b
 80020fe:	83fb      	strh	r3, [r7, #30]
	  	        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002100:	2201      	movs	r2, #1
 8002102:	2104      	movs	r1, #4
 8002104:	483e      	ldr	r0, [pc, #248]	; (8002200 <motor+0x4fc>)
 8002106:	f001 f8dd 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800210a:	2200      	movs	r2, #0
 800210c:	2108      	movs	r1, #8
 800210e:	483c      	ldr	r0, [pc, #240]	; (8002200 <motor+0x4fc>)
 8002110:	f001 f8d8 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002114:	2201      	movs	r2, #1
 8002116:	2120      	movs	r1, #32
 8002118:	4839      	ldr	r0, [pc, #228]	; (8002200 <motor+0x4fc>)
 800211a:	f001 f8d3 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2110      	movs	r1, #16
 8002122:	4837      	ldr	r0, [pc, #220]	; (8002200 <motor+0x4fc>)
 8002124:	f001 f8ce 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <motor+0x500>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	8bfa      	ldrh	r2, [r7, #30]
 800212e:	639a      	str	r2, [r3, #56]	; 0x38
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002130:	4b34      	ldr	r3, [pc, #208]	; (8002204 <motor+0x500>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	8c3a      	ldrh	r2, [r7, #32]
 8002136:	635a      	str	r2, [r3, #52]	; 0x34
	  	        osDelay(11500);
 8002138:	f642 40ec 	movw	r0, #11500	; 0x2cec
 800213c:	f003 fb1e 	bl	800577c <osDelay>

	  	        pwmValA = pwmValB = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	83fb      	strh	r3, [r7, #30]
 8002144:	8bfb      	ldrh	r3, [r7, #30]
 8002146:	843b      	strh	r3, [r7, #32]
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8002148:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <motor+0x500>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	8c3a      	ldrh	r2, [r7, #32]
 800214e:	635a      	str	r2, [r3, #52]	; 0x34
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <motor+0x500>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	8bfa      	ldrh	r2, [r7, #30]
 8002156:	639a      	str	r2, [r3, #56]	; 0x38
	  	        osDelay(500);
 8002158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800215c:	f003 fb0e 	bl	800577c <osDelay>

	  	        htim1.Instance->CCR4 = 81;
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <motor+0x504>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2251      	movs	r2, #81	; 0x51
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
	  	        osDelay(250);
 8002168:	20fa      	movs	r0, #250	; 0xfa
 800216a:	f003 fb07 	bl	800577c <osDelay>
	  	        htim1.Instance->CCR4 = 73;
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <motor+0x504>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2249      	movs	r2, #73	; 0x49
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

	  	        pwmValA = 800;
 8002176:	f44f 7348 	mov.w	r3, #800	; 0x320
 800217a:	843b      	strh	r3, [r7, #32]
	  	        pwmValB = 825; //825
 800217c:	f240 3339 	movw	r3, #825	; 0x339
 8002180:	83fb      	strh	r3, [r7, #30]
	  	        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	2104      	movs	r1, #4
 8002186:	481e      	ldr	r0, [pc, #120]	; (8002200 <motor+0x4fc>)
 8002188:	f001 f89c 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800218c:	2200      	movs	r2, #0
 800218e:	2108      	movs	r1, #8
 8002190:	481b      	ldr	r0, [pc, #108]	; (8002200 <motor+0x4fc>)
 8002192:	f001 f897 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2120      	movs	r1, #32
 800219a:	4819      	ldr	r0, [pc, #100]	; (8002200 <motor+0x4fc>)
 800219c:	f001 f892 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2110      	movs	r1, #16
 80021a4:	4816      	ldr	r0, [pc, #88]	; (8002200 <motor+0x4fc>)
 80021a6:	f001 f88d 	bl	80032c4 <HAL_GPIO_WritePin>
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 80021aa:	4b16      	ldr	r3, [pc, #88]	; (8002204 <motor+0x500>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	8bfa      	ldrh	r2, [r7, #30]
 80021b0:	639a      	str	r2, [r3, #56]	; 0x38
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <motor+0x500>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	8c3a      	ldrh	r2, [r7, #32]
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
	  	        osDelay(1000);
 80021ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021be:	f003 fadd 	bl	800577c <osDelay>

	  	        pwmValA = pwmValB = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	83fb      	strh	r3, [r7, #30]
 80021c6:	8bfb      	ldrh	r3, [r7, #30]
 80021c8:	843b      	strh	r3, [r7, #32]
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <motor+0x500>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	8c3a      	ldrh	r2, [r7, #32]
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
	  	        __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValB);
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <motor+0x500>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	8bfa      	ldrh	r2, [r7, #30]
 80021d8:	639a      	str	r2, [r3, #56]	; 0x38

//	  	        i++;
	  	        i = sep_index + 1;
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <motor+0x508>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <motor+0x50c>)
 80021e2:	6013      	str	r3, [r2, #0]
	  	        HAL_UART_Transmit(&huart3,(uint8_t *)&ch,1,0xFFFF);
 80021e4:	f107 0117 	add.w	r1, r7, #23
 80021e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ec:	2201      	movs	r2, #1
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <motor+0x510>)
 80021f0:	f002 fcca 	bl	8004b88 <HAL_UART_Transmit>
	  	        break;
 80021f4:	e002      	b.n	80021fc <motor+0x4f8>
			  continue;
 80021f6:	bf00      	nop
 80021f8:	e59e      	b.n	8001d38 <motor+0x34>

		  	  default:
		  		  //i++;
				 // choice = aRxBuffer[i];
		  		  break;
 80021fa:	bf00      	nop
	  {
 80021fc:	e59c      	b.n	8001d38 <motor+0x34>
 80021fe:	bf00      	nop
 8002200:	40010800 	.word	0x40010800
 8002204:	20002324 	.word	0x20002324
 8002208:	20002410 	.word	0x20002410
 800220c:	20000204 	.word	0x20000204
 8002210:	20000200 	.word	0x20000200
 8002214:	2000236c 	.word	0x2000236c

08002218 <Encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Encoder */
void Encoder(void *argument)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	; 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //motorA
 8002220:	213c      	movs	r1, #60	; 0x3c
 8002222:	4844      	ldr	r0, [pc, #272]	; (8002334 <Encoder+0x11c>)
 8002224:	f001 feb6 	bl	8003f94 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL); //motorB
 8002228:	213c      	movs	r1, #60	; 0x3c
 800222a:	4843      	ldr	r0, [pc, #268]	; (8002338 <Encoder+0x120>)
 800222c:	f001 feb2 	bl	8003f94 <HAL_TIM_Encoder_Start>

	  cntA = __HAL_TIM_GET_COUNTER(&htim2);
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <Encoder+0x11c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	461a      	mov	r2, r3
 8002238:	4b40      	ldr	r3, [pc, #256]	; (800233c <Encoder+0x124>)
 800223a:	601a      	str	r2, [r3, #0]
	  cntB = __HAL_TIM_GET_COUNTER(&htim3);
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <Encoder+0x120>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	461a      	mov	r2, r3
 8002244:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <Encoder+0x128>)
 8002246:	601a      	str	r2, [r3, #0]
	  uint32_t tick;
//
//	  cnt1A = __HAL_TIM_GET_COUNTER(&htim2); //Get the TIM Counter Register value on runtime.
//	  cnt1B = __HAL_TIM_GET_COUNTER(&htim3); //Get the TIM Counter Register value on runtime.
//
	  tick = HAL_GetTick(); //Provides a tick value in millisecond
 8002248:	f000 fc2a 	bl	8002aa0 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	; 0x24

	  for(;;)
	  {
//		//trailing l makes the type of the constant
//		//a long int instead of a regular int
		if(HAL_GetTick()-tick > 250L){ //delay 250 ticks
 800224e:	f000 fc27 	bl	8002aa0 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2bfa      	cmp	r3, #250	; 0xfa
 800225a:	d9f8      	bls.n	800224e <Encoder+0x36>
			cntA = __HAL_TIM_GET_COUNTER(&htim2);
 800225c:	4b35      	ldr	r3, [pc, #212]	; (8002334 <Encoder+0x11c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	461a      	mov	r2, r3
 8002264:	4b35      	ldr	r3, [pc, #212]	; (800233c <Encoder+0x124>)
 8002266:	601a      	str	r2, [r3, #0]
			cntB = __HAL_TIM_GET_COUNTER(&htim3);
 8002268:	4b33      	ldr	r3, [pc, #204]	; (8002338 <Encoder+0x120>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	461a      	mov	r2, r3
 8002270:	4b33      	ldr	r3, [pc, #204]	; (8002340 <Encoder+0x128>)
 8002272:	601a      	str	r2, [r3, #0]

			if(cntB != 0){
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <Encoder+0x128>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <Encoder+0x72>
				cntB = 65535 - cntB;
 800227c:	4b30      	ldr	r3, [pc, #192]	; (8002340 <Encoder+0x128>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002284:	33ff      	adds	r3, #255	; 0xff
 8002286:	4a2e      	ldr	r2, [pc, #184]	; (8002340 <Encoder+0x128>)
 8002288:	6013      	str	r3, [r2, #0]
//					 osDelay(10);
//				 }
//			 }

			//display total pulses of A and B
			sprintf(hello,"cntA:%5d\0",cntA);
 800228a:	4b2c      	ldr	r3, [pc, #176]	; (800233c <Encoder+0x124>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f107 030c 	add.w	r3, r7, #12
 8002292:	492c      	ldr	r1, [pc, #176]	; (8002344 <Encoder+0x12c>)
 8002294:	4618      	mov	r0, r3
 8002296:	f006 f8ad 	bl	80083f4 <siprintf>
			OLED_ShowString(10,20,hello);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	461a      	mov	r2, r3
 80022a0:	2114      	movs	r1, #20
 80022a2:	200a      	movs	r0, #10
 80022a4:	f005 ffa4 	bl	80081f0 <OLED_ShowString>

			sprintf(hello,"cntB:%5d\0",cntB);
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <Encoder+0x128>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4925      	ldr	r1, [pc, #148]	; (8002348 <Encoder+0x130>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f006 f89e 	bl	80083f4 <siprintf>
			OLED_ShowString(10,30,hello);
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	461a      	mov	r2, r3
 80022be:	211e      	movs	r1, #30
 80022c0:	200a      	movs	r0, #10
 80022c2:	f005 ff95 	bl	80081f0 <OLED_ShowString>

			dirA = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80022c6:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <Encoder+0x11c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	bf0c      	ite	eq
 80022d4:	2301      	moveq	r3, #1
 80022d6:	2300      	movne	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	847b      	strh	r3, [r7, #34]	; 0x22
			dirB = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <Encoder+0x120>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	843b      	strh	r3, [r7, #32]

			sprintf(hello,"DirA:%5d\0",dirA);
 80022f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	4914      	ldr	r1, [pc, #80]	; (800234c <Encoder+0x134>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f006 f87a 	bl	80083f4 <siprintf>
			OLED_ShowString(10,40,hello);
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	461a      	mov	r2, r3
 8002306:	2128      	movs	r1, #40	; 0x28
 8002308:	200a      	movs	r0, #10
 800230a:	f005 ff71 	bl	80081f0 <OLED_ShowString>

			sprintf(hello,"DirB:%5d\0",dirB);
 800230e:	8c3a      	ldrh	r2, [r7, #32]
 8002310:	f107 030c 	add.w	r3, r7, #12
 8002314:	490e      	ldr	r1, [pc, #56]	; (8002350 <Encoder+0x138>)
 8002316:	4618      	mov	r0, r3
 8002318:	f006 f86c 	bl	80083f4 <siprintf>
			OLED_ShowString(10,50,hello);
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	461a      	mov	r2, r3
 8002322:	2132      	movs	r1, #50	; 0x32
 8002324:	200a      	movs	r0, #10
 8002326:	f005 ff63 	bl	80081f0 <OLED_ShowString>

//			cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
//			cnt1B = __HAL_TIM_GET_COUNTER(&htim3);

			tick = HAL_GetTick();
 800232a:	f000 fbb9 	bl	8002aa0 <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	; 0x24
		if(HAL_GetTick()-tick > 250L){ //delay 250 ticks
 8002330:	e78d      	b.n	800224e <Encoder+0x36>
 8002332:	bf00      	nop
 8002334:	20004b6c 	.word	0x20004b6c
 8002338:	200023b8 	.word	0x200023b8
 800233c:	20002400 	.word	0x20002400
 8002340:	2000231c 	.word	0x2000231c
 8002344:	0800b484 	.word	0x0800b484
 8002348:	0800b490 	.word	0x0800b490
 800234c:	0800b49c 	.word	0x0800b49c
 8002350:	0800b4a8 	.word	0x0800b4a8

08002354 <servo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servo */
void servo(void *argument)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servo */
  /* Infinite loop */
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4); //start servor motor
 800235c:	210c      	movs	r1, #12
 800235e:	4827      	ldr	r0, [pc, #156]	; (80023fc <servo+0xa8>)
 8002360:	f001 fcbc 	bl	8003cdc <HAL_TIM_PWM_Start>
	  choice = aRxBuffer[i];
 8002364:	4b26      	ldr	r3, [pc, #152]	; (8002400 <servo+0xac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a26      	ldr	r2, [pc, #152]	; (8002404 <servo+0xb0>)
 800236a:	5cd2      	ldrb	r2, [r2, r3]
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <servo+0xb4>)
 800236e:	701a      	strb	r2, [r3, #0]
	for(;;)
  {
		  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,10);
 8002370:	220a      	movs	r2, #10
 8002372:	4924      	ldr	r1, [pc, #144]	; (8002404 <servo+0xb0>)
 8002374:	4825      	ldr	r0, [pc, #148]	; (800240c <servo+0xb8>)
 8002376:	f002 fc99 	bl	8004cac <HAL_UART_Receive_IT>
		  choice = aRxBuffer[i];
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <servo+0xac>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <servo+0xb0>)
 8002380:	5cd2      	ldrb	r2, [r2, r3]
 8002382:	4b21      	ldr	r3, [pc, #132]	; (8002408 <servo+0xb4>)
 8002384:	701a      	strb	r2, [r3, #0]
	  switch(choice)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <servo+0xb4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b72      	cmp	r3, #114	; 0x72
 800238c:	d006      	beq.n	800239c <servo+0x48>
 800238e:	2b72      	cmp	r3, #114	; 0x72
 8002390:	dcee      	bgt.n	8002370 <servo+0x1c>
 8002392:	2b63      	cmp	r3, #99	; 0x63
 8002394:	d01c      	beq.n	80023d0 <servo+0x7c>
 8002396:	2b6c      	cmp	r3, #108	; 0x6c
 8002398:	d00d      	beq.n	80023b6 <servo+0x62>
 800239a:	e02e      	b.n	80023fa <servo+0xa6>
	  {
	  	  case'r':
				htim1.Instance->CCR4 = 98; //extreme right
 800239c:	4b17      	ldr	r3, [pc, #92]	; (80023fc <servo+0xa8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2262      	movs	r2, #98	; 0x62
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80023a4:	200a      	movs	r0, #10
 80023a6:	f003 f9e9 	bl	800577c <osDelay>
  				i++;
 80023aa:	4b15      	ldr	r3, [pc, #84]	; (8002400 <servo+0xac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	4a13      	ldr	r2, [pc, #76]	; (8002400 <servo+0xac>)
 80023b2:	6013      	str	r3, [r2, #0]
				//choice = aRxBuffer[i];
				break;
 80023b4:	e021      	b.n	80023fa <servo+0xa6>

	  	  case 'l':
				htim1.Instance->CCR4 = 54;   //extreme left
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <servo+0xa8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2236      	movs	r2, #54	; 0x36
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(10);
 80023be:	200a      	movs	r0, #10
 80023c0:	f003 f9dc 	bl	800577c <osDelay>
				i++;
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <servo+0xac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	3301      	adds	r3, #1
 80023ca:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <servo+0xac>)
 80023cc:	6013      	str	r3, [r2, #0]
				//choice = aRxBuffer[i];
				break;
 80023ce:	e014      	b.n	80023fa <servo+0xa6>
	  	  case 'c':
	  			htim1.Instance->CCR4 = 81; //right
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <servo+0xa8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2251      	movs	r2, #81	; 0x51
 80023d6:	641a      	str	r2, [r3, #64]	; 0x40
	  			osDelay(500);
 80023d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023dc:	f003 f9ce 	bl	800577c <osDelay>
	  			htim1.Instance->CCR4 = 73; //center
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <servo+0xa8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2249      	movs	r2, #73	; 0x49
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
	  			osDelay(10);
 80023e8:	200a      	movs	r0, #10
 80023ea:	f003 f9c7 	bl	800577c <osDelay>
	  			i++;
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <servo+0xac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	4a02      	ldr	r2, [pc, #8]	; (8002400 <servo+0xac>)
 80023f6:	6013      	str	r3, [r2, #0]
				//choice = aRxBuffer[i];
				break;
 80023f8:	bf00      	nop
		  HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,10);
 80023fa:	e7b9      	b.n	8002370 <servo+0x1c>
 80023fc:	20002410 	.word	0x20002410
 8002400:	20000200 	.word	0x20000200
 8002404:	2000245c 	.word	0x2000245c
 8002408:	2000240c 	.word	0x2000240c
 800240c:	2000236c 	.word	0x2000236c

08002410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002414:	b672      	cpsid	i
}
 8002416:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002418:	e7fe      	b.n	8002418 <Error_Handler+0x8>
	...

0800241c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_MspInit+0x68>)
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HAL_MspInit+0x68>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6193      	str	r3, [r2, #24]
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_MspInit+0x68>)
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_MspInit+0x68>)
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_MspInit+0x68>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	61d3      	str	r3, [r2, #28]
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <HAL_MspInit+0x68>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	210f      	movs	r1, #15
 8002456:	f06f 0001 	mvn.w	r0, #1
 800245a:	f000 fc26 	bl	8002caa <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_MspInit+0x6c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4a04      	ldr	r2, [pc, #16]	; (8002488 <HAL_MspInit+0x6c>)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40010000 	.word	0x40010000

0800248c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_TIM_Base_MspInit+0x94>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10c      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ac:	4b1d      	ldr	r3, [pc, #116]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024b6:	6193      	str	r3, [r2, #24]
 80024b8:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024c4:	e028      	b.n	8002518 <HAL_TIM_Base_MspInit+0x8c>
  else if(htim_base->Instance==TIM8)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <HAL_TIM_Base_MspInit+0x9c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d123      	bne.n	8002518 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4a13      	ldr	r2, [pc, #76]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024da:	6193      	str	r3, [r2, #24]
 80024dc:	4b11      	ldr	r3, [pc, #68]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e8:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_TIM_Base_MspInit+0x98>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f003 0310 	and.w	r3, r3, #16
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002500:	23c0      	movs	r3, #192	; 0xc0
 8002502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002508:	2302      	movs	r3, #2
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250c:	f107 0318 	add.w	r3, r7, #24
 8002510:	4619      	mov	r1, r3
 8002512:	4806      	ldr	r0, [pc, #24]	; (800252c <HAL_TIM_Base_MspInit+0xa0>)
 8002514:	f000 fd42 	bl	8002f9c <HAL_GPIO_Init>
}
 8002518:	bf00      	nop
 800251a:	3728      	adds	r7, #40	; 0x28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40021000 	.word	0x40021000
 8002528:	40013400 	.word	0x40013400
 800252c:	40011000 	.word	0x40011000

08002530 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254e:	d14f      	bne.n	80025f0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	4a3d      	ldr	r2, [pc, #244]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	61d3      	str	r3, [r2, #28]
 800255c:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	4b38      	ldr	r3, [pc, #224]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	4a37      	ldr	r2, [pc, #220]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 800256e:	f043 0304 	orr.w	r3, r3, #4
 8002572:	6193      	str	r3, [r2, #24]
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002580:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	4a31      	ldr	r2, [pc, #196]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6193      	str	r3, [r2, #24]
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4828      	ldr	r0, [pc, #160]	; (8002650 <HAL_TIM_Encoder_MspInit+0x120>)
 80025ae:	f000 fcf5 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025b2:	2308      	movs	r3, #8
 80025b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4823      	ldr	r0, [pc, #140]	; (8002654 <HAL_TIM_Encoder_MspInit+0x124>)
 80025c6:	f000 fce9 	bl	8002f9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_TIM_Encoder_MspInit+0x128>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_TIM_Encoder_MspInit+0x128>)
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ee:	e028      	b.n	8002642 <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_TIM_Encoder_MspInit+0x12c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d123      	bne.n	8002642 <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025fa:	4b14      	ldr	r3, [pc, #80]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	4a13      	ldr	r2, [pc, #76]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	61d3      	str	r3, [r2, #28]
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	6193      	str	r3, [r2, #24]
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800262a:	23c0      	movs	r3, #192	; 0xc0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 031c 	add.w	r3, r7, #28
 800263a:	4619      	mov	r1, r3
 800263c:	4804      	ldr	r0, [pc, #16]	; (8002650 <HAL_TIM_Encoder_MspInit+0x120>)
 800263e:	f000 fcad 	bl	8002f9c <HAL_GPIO_Init>
}
 8002642:	bf00      	nop
 8002644:	3730      	adds	r7, #48	; 0x30
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	40010800 	.word	0x40010800
 8002654:	40010c00 	.word	0x40010c00
 8002658:	40010000 	.word	0x40010000
 800265c:	40000400 	.word	0x40000400

08002660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_TIM_MspPostInit+0x80>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d12a      	bne.n	80026d6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002680:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_TIM_MspPostInit+0x84>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a17      	ldr	r2, [pc, #92]	; (80026e4 <HAL_TIM_MspPostInit+0x84>)
 8002686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_TIM_MspPostInit+0x84>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800269c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2302      	movs	r3, #2
 80026a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4619      	mov	r1, r3
 80026ac:	480e      	ldr	r0, [pc, #56]	; (80026e8 <HAL_TIM_MspPostInit+0x88>)
 80026ae:	f000 fc75 	bl	8002f9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80026b2:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <HAL_TIM_MspPostInit+0x8c>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <HAL_TIM_MspPostInit+0x8c>)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026d6:	bf00      	nop
 80026d8:	3720      	adds	r7, #32
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40012c00 	.word	0x40012c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40011800 	.word	0x40011800
 80026ec:	40010000 	.word	0x40010000

080026f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	609a      	str	r2, [r3, #8]
 8002704:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <HAL_UART_MspInit+0xc0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d14b      	bne.n	80027a8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_UART_MspInit+0xc4>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	4a27      	ldr	r2, [pc, #156]	; (80027b4 <HAL_UART_MspInit+0xc4>)
 8002716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271a:	61d3      	str	r3, [r2, #28]
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_UART_MspInit+0xc4>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002728:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <HAL_UART_MspInit+0xc4>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a21      	ldr	r2, [pc, #132]	; (80027b4 <HAL_UART_MspInit+0xc4>)
 800272e:	f043 0310 	orr.w	r3, r3, #16
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <HAL_UART_MspInit+0xc4>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4818      	ldr	r0, [pc, #96]	; (80027b8 <HAL_UART_MspInit+0xc8>)
 8002756:	f000 fc21 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800275a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800275e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	4812      	ldr	r0, [pc, #72]	; (80027b8 <HAL_UART_MspInit+0xc8>)
 8002770:	f000 fc14 	bl	8002f9c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002774:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_UART_MspInit+0xcc>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_UART_MspInit+0xcc>)
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	6053      	str	r3, [r2, #4]

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	2105      	movs	r1, #5
 800279c:	2027      	movs	r0, #39	; 0x27
 800279e:	f000 fa84 	bl	8002caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027a2:	2027      	movs	r0, #39	; 0x27
 80027a4:	f000 fa9d 	bl	8002ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027a8:	bf00      	nop
 80027aa:	3728      	adds	r7, #40	; 0x28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40004800 	.word	0x40004800
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40010000 	.word	0x40010000

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler+0x4>

080027c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler+0x4>

080027d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <UsageFault_Handler+0x4>

080027de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ee:	f000 f945 	bl	8002a7c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80027f2:	f004 fbcf 	bl	8006f94 <xTaskGetSchedulerState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d001      	beq.n	8002800 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80027fc:	f005 f92c 	bl	8007a58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	bd80      	pop	{r7, pc}

08002804 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <USART3_IRQHandler+0x10>)
 800280a:	f002 fa7f 	bl	8004d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	2000236c 	.word	0x2000236c

08002818 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	return 1;
 800281c:	2301      	movs	r3, #1
}
 800281e:	4618      	mov	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <_kill>:

int _kill(int pid, int sig)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002830:	f005 fda0 	bl	8008374 <__errno>
 8002834:	4603      	mov	r3, r0
 8002836:	2216      	movs	r2, #22
 8002838:	601a      	str	r2, [r3, #0]
	return -1;
 800283a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <_exit>:

void _exit (int status)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800284e:	f04f 31ff 	mov.w	r1, #4294967295
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffe7 	bl	8002826 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002858:	e7fe      	b.n	8002858 <_exit+0x12>

0800285a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e00a      	b.n	8002882 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800286c:	f3af 8000 	nop.w
 8002870:	4601      	mov	r1, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1c5a      	adds	r2, r3, #1
 8002876:	60ba      	str	r2, [r7, #8]
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	3301      	adds	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	dbf0      	blt.n	800286c <_read+0x12>
	}

return len;
 800288a:	687b      	ldr	r3, [r7, #4]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e009      	b.n	80028ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	60ba      	str	r2, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dbf1      	blt.n	80028a6 <_write+0x12>
	}
	return len;
 80028c2:	687b      	ldr	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_close>:

int _close(int file)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
	return -1;
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028f2:	605a      	str	r2, [r3, #4]
	return 0;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <_isatty>:

int _isatty(int file)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
	return 1;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
	return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f005 fd0a 	bl	8008374 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20010000 	.word	0x20010000
 800298c:	00000400 	.word	0x00000400
 8002990:	20000208 	.word	0x20000208
 8002994:	20005008 	.word	0x20005008

08002998 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029a6:	490d      	ldr	r1, [pc, #52]	; (80029dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029ca:	f7ff ffe5 	bl	8002998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ce:	f005 fcd7 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029d2:	f7fe fc07 	bl	80011e4 <main>
  bx lr
 80029d6:	4770      	bx	lr
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80029e0:	0800c44c 	.word	0x0800c44c
  ldr r2, =_sbss
 80029e4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80029e8:	20005008 	.word	0x20005008

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_Init+0x28>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <HAL_Init+0x28>)
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a00:	2003      	movs	r0, #3
 8002a02:	f000 f947 	bl	8002c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a06:	200f      	movs	r0, #15
 8002a08:	f000 f808 	bl	8002a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a0c:	f7ff fd06 	bl	800241c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40022000 	.word	0x40022000

08002a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_InitTick+0x54>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x58>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f95f 	bl	8002cfe <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f000 f927 	bl	8002caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x5c>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000008 	.word	0x20000008
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_IncTick+0x1c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_IncTick+0x20>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <HAL_IncTick+0x20>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	20000008 	.word	0x20000008
 8002a9c:	20004bb4 	.word	0x20004bb4

08002aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_GetTick+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20004bb4 	.word	0x20004bb4

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffe0 	bl	8002aa0 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000008 	.word	0x20000008

08002afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <__NVIC_SetPriorityGrouping+0x44>)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	60d3      	str	r3, [r2, #12]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <__NVIC_GetPriorityGrouping+0x18>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	f003 0307 	and.w	r3, r3, #7
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	db0b      	blt.n	8002b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b72:	79fb      	ldrb	r3, [r7, #7]
 8002b74:	f003 021f 	and.w	r2, r3, #31
 8002b78:	4906      	ldr	r1, [pc, #24]	; (8002b94 <__NVIC_EnableIRQ+0x34>)
 8002b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	2001      	movs	r0, #1
 8002b82:	fa00 f202 	lsl.w	r2, r0, r2
 8002b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100

08002b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	6039      	str	r1, [r7, #0]
 8002ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	db0a      	blt.n	8002bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	490c      	ldr	r1, [pc, #48]	; (8002be4 <__NVIC_SetPriority+0x4c>)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	440b      	add	r3, r1
 8002bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc0:	e00a      	b.n	8002bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4908      	ldr	r1, [pc, #32]	; (8002be8 <__NVIC_SetPriority+0x50>)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3b04      	subs	r3, #4
 8002bd0:	0112      	lsls	r2, r2, #4
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	761a      	strb	r2, [r3, #24]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000e100 	.word	0xe000e100
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f1c3 0307 	rsb	r3, r3, #7
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	bf28      	it	cs
 8002c0a:	2304      	movcs	r3, #4
 8002c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d902      	bls.n	8002c1c <NVIC_EncodePriority+0x30>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3b03      	subs	r3, #3
 8002c1a:	e000      	b.n	8002c1e <NVIC_EncodePriority+0x32>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	401a      	ands	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c34:	f04f 31ff 	mov.w	r1, #4294967295
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3e:	43d9      	mvns	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c44:	4313      	orrs	r3, r2
         );
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c60:	d301      	bcc.n	8002c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c62:	2301      	movs	r3, #1
 8002c64:	e00f      	b.n	8002c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <SysTick_Config+0x40>)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c6e:	210f      	movs	r1, #15
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	f7ff ff90 	bl	8002b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <SysTick_Config+0x40>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c7e:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <SysTick_Config+0x40>)
 8002c80:	2207      	movs	r2, #7
 8002c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000e010 	.word	0xe000e010

08002c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff ff2d 	bl	8002afc <__NVIC_SetPriorityGrouping>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cbc:	f7ff ff42 	bl	8002b44 <__NVIC_GetPriorityGrouping>
 8002cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	6978      	ldr	r0, [r7, #20]
 8002cc8:	f7ff ff90 	bl	8002bec <NVIC_EncodePriority>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff5f 	bl	8002b98 <__NVIC_SetPriority>
}
 8002cda:	bf00      	nop
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff35 	bl	8002b60 <__NVIC_EnableIRQ>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ffa2 	bl	8002c50 <SysTick_Config>
 8002d0c:	4603      	mov	r3, r0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e020      	b.n	8002d80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d66:	2101      	movs	r1, #1
 8002d68:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d005      	beq.n	8002dae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2204      	movs	r2, #4
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e0d6      	b.n	8002f5c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020e 	bic.w	r2, r2, #14
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b64      	ldr	r3, [pc, #400]	; (8002f68 <HAL_DMA_Abort_IT+0x1dc>)
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d958      	bls.n	8002e8c <HAL_DMA_Abort_IT+0x100>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a63      	ldr	r2, [pc, #396]	; (8002f6c <HAL_DMA_Abort_IT+0x1e0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d04f      	beq.n	8002e84 <HAL_DMA_Abort_IT+0xf8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a61      	ldr	r2, [pc, #388]	; (8002f70 <HAL_DMA_Abort_IT+0x1e4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d048      	beq.n	8002e80 <HAL_DMA_Abort_IT+0xf4>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a60      	ldr	r2, [pc, #384]	; (8002f74 <HAL_DMA_Abort_IT+0x1e8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d040      	beq.n	8002e7a <HAL_DMA_Abort_IT+0xee>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5e      	ldr	r2, [pc, #376]	; (8002f78 <HAL_DMA_Abort_IT+0x1ec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d038      	beq.n	8002e74 <HAL_DMA_Abort_IT+0xe8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5d      	ldr	r2, [pc, #372]	; (8002f7c <HAL_DMA_Abort_IT+0x1f0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d030      	beq.n	8002e6e <HAL_DMA_Abort_IT+0xe2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <HAL_DMA_Abort_IT+0x1f4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d028      	beq.n	8002e68 <HAL_DMA_Abort_IT+0xdc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a53      	ldr	r2, [pc, #332]	; (8002f68 <HAL_DMA_Abort_IT+0x1dc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d020      	beq.n	8002e62 <HAL_DMA_Abort_IT+0xd6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a57      	ldr	r2, [pc, #348]	; (8002f84 <HAL_DMA_Abort_IT+0x1f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d019      	beq.n	8002e5e <HAL_DMA_Abort_IT+0xd2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a56      	ldr	r2, [pc, #344]	; (8002f88 <HAL_DMA_Abort_IT+0x1fc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d012      	beq.n	8002e5a <HAL_DMA_Abort_IT+0xce>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a54      	ldr	r2, [pc, #336]	; (8002f8c <HAL_DMA_Abort_IT+0x200>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d00a      	beq.n	8002e54 <HAL_DMA_Abort_IT+0xc8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a53      	ldr	r2, [pc, #332]	; (8002f90 <HAL_DMA_Abort_IT+0x204>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_DMA_Abort_IT+0xc2>
 8002e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e4c:	e01b      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e52:	e018      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e58:	e015      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e5a:	2310      	movs	r3, #16
 8002e5c:	e013      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e011      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e66:	e00e      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e6c:	e00b      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e72:	e008      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e78:	e005      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7e:	e002      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e80:	2310      	movs	r3, #16
 8002e82:	e000      	b.n	8002e86 <HAL_DMA_Abort_IT+0xfa>
 8002e84:	2301      	movs	r3, #1
 8002e86:	4a43      	ldr	r2, [pc, #268]	; (8002f94 <HAL_DMA_Abort_IT+0x208>)
 8002e88:	6053      	str	r3, [r2, #4]
 8002e8a:	e057      	b.n	8002f3c <HAL_DMA_Abort_IT+0x1b0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a36      	ldr	r2, [pc, #216]	; (8002f6c <HAL_DMA_Abort_IT+0x1e0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d04f      	beq.n	8002f36 <HAL_DMA_Abort_IT+0x1aa>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a35      	ldr	r2, [pc, #212]	; (8002f70 <HAL_DMA_Abort_IT+0x1e4>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d048      	beq.n	8002f32 <HAL_DMA_Abort_IT+0x1a6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a33      	ldr	r2, [pc, #204]	; (8002f74 <HAL_DMA_Abort_IT+0x1e8>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d040      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x1a0>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <HAL_DMA_Abort_IT+0x1ec>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d038      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x19a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a30      	ldr	r2, [pc, #192]	; (8002f7c <HAL_DMA_Abort_IT+0x1f0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d030      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x194>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a2f      	ldr	r2, [pc, #188]	; (8002f80 <HAL_DMA_Abort_IT+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d028      	beq.n	8002f1a <HAL_DMA_Abort_IT+0x18e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a26      	ldr	r2, [pc, #152]	; (8002f68 <HAL_DMA_Abort_IT+0x1dc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d020      	beq.n	8002f14 <HAL_DMA_Abort_IT+0x188>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a2b      	ldr	r2, [pc, #172]	; (8002f84 <HAL_DMA_Abort_IT+0x1f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d019      	beq.n	8002f10 <HAL_DMA_Abort_IT+0x184>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_DMA_Abort_IT+0x1fc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d012      	beq.n	8002f0c <HAL_DMA_Abort_IT+0x180>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a28      	ldr	r2, [pc, #160]	; (8002f8c <HAL_DMA_Abort_IT+0x200>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00a      	beq.n	8002f06 <HAL_DMA_Abort_IT+0x17a>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a26      	ldr	r2, [pc, #152]	; (8002f90 <HAL_DMA_Abort_IT+0x204>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d102      	bne.n	8002f00 <HAL_DMA_Abort_IT+0x174>
 8002efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efe:	e01b      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f04:	e018      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f0a:	e015      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	e013      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e011      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f18:	e00e      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f1e:	e00b      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f24:	e008      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f2a:	e005      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f30:	e002      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f32:	2310      	movs	r3, #16
 8002f34:	e000      	b.n	8002f38 <HAL_DMA_Abort_IT+0x1ac>
 8002f36:	2301      	movs	r3, #1
 8002f38:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <HAL_DMA_Abort_IT+0x20c>)
 8002f3a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
    } 
  }
  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40020080 	.word	0x40020080
 8002f6c:	40020008 	.word	0x40020008
 8002f70:	4002001c 	.word	0x4002001c
 8002f74:	40020030 	.word	0x40020030
 8002f78:	40020044 	.word	0x40020044
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	4002006c 	.word	0x4002006c
 8002f84:	40020408 	.word	0x40020408
 8002f88:	4002041c 	.word	0x4002041c
 8002f8c:	40020430 	.word	0x40020430
 8002f90:	40020444 	.word	0x40020444
 8002f94:	40020400 	.word	0x40020400
 8002f98:	40020000 	.word	0x40020000

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b08b      	sub	sp, #44	; 0x2c
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002faa:	2300      	movs	r3, #0
 8002fac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fae:	e179      	b.n	80032a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	f040 8168 	bne.w	800329e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4aa0      	ldr	r2, [pc, #640]	; (8003254 <HAL_GPIO_Init+0x2b8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d05e      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002fd8:	4a9e      	ldr	r2, [pc, #632]	; (8003254 <HAL_GPIO_Init+0x2b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d875      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002fde:	4a9e      	ldr	r2, [pc, #632]	; (8003258 <HAL_GPIO_Init+0x2bc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d058      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002fe4:	4a9c      	ldr	r2, [pc, #624]	; (8003258 <HAL_GPIO_Init+0x2bc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d86f      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002fea:	4a9c      	ldr	r2, [pc, #624]	; (800325c <HAL_GPIO_Init+0x2c0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d052      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002ff0:	4a9a      	ldr	r2, [pc, #616]	; (800325c <HAL_GPIO_Init+0x2c0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d869      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8002ff6:	4a9a      	ldr	r2, [pc, #616]	; (8003260 <HAL_GPIO_Init+0x2c4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d04c      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8002ffc:	4a98      	ldr	r2, [pc, #608]	; (8003260 <HAL_GPIO_Init+0x2c4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d863      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8003002:	4a98      	ldr	r2, [pc, #608]	; (8003264 <HAL_GPIO_Init+0x2c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d046      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
 8003008:	4a96      	ldr	r2, [pc, #600]	; (8003264 <HAL_GPIO_Init+0x2c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d85d      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 800300e:	2b12      	cmp	r3, #18
 8003010:	d82a      	bhi.n	8003068 <HAL_GPIO_Init+0xcc>
 8003012:	2b12      	cmp	r3, #18
 8003014:	d859      	bhi.n	80030ca <HAL_GPIO_Init+0x12e>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <HAL_GPIO_Init+0x80>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003097 	.word	0x08003097
 8003020:	08003071 	.word	0x08003071
 8003024:	08003083 	.word	0x08003083
 8003028:	080030c5 	.word	0x080030c5
 800302c:	080030cb 	.word	0x080030cb
 8003030:	080030cb 	.word	0x080030cb
 8003034:	080030cb 	.word	0x080030cb
 8003038:	080030cb 	.word	0x080030cb
 800303c:	080030cb 	.word	0x080030cb
 8003040:	080030cb 	.word	0x080030cb
 8003044:	080030cb 	.word	0x080030cb
 8003048:	080030cb 	.word	0x080030cb
 800304c:	080030cb 	.word	0x080030cb
 8003050:	080030cb 	.word	0x080030cb
 8003054:	080030cb 	.word	0x080030cb
 8003058:	080030cb 	.word	0x080030cb
 800305c:	080030cb 	.word	0x080030cb
 8003060:	08003079 	.word	0x08003079
 8003064:	0800308d 	.word	0x0800308d
 8003068:	4a7f      	ldr	r2, [pc, #508]	; (8003268 <HAL_GPIO_Init+0x2cc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d013      	beq.n	8003096 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800306e:	e02c      	b.n	80030ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	623b      	str	r3, [r7, #32]
          break;
 8003076:	e029      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	3304      	adds	r3, #4
 800307e:	623b      	str	r3, [r7, #32]
          break;
 8003080:	e024      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	3308      	adds	r3, #8
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e01f      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	330c      	adds	r3, #12
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e01a      	b.n	80030cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800309e:	2304      	movs	r3, #4
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e013      	b.n	80030cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ac:	2308      	movs	r3, #8
 80030ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	611a      	str	r2, [r3, #16]
          break;
 80030b6:	e009      	b.n	80030cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030b8:	2308      	movs	r3, #8
 80030ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	615a      	str	r2, [r3, #20]
          break;
 80030c2:	e003      	b.n	80030cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
          break;
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x130>
          break;
 80030ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2bff      	cmp	r3, #255	; 0xff
 80030d0:	d801      	bhi.n	80030d6 <HAL_GPIO_Init+0x13a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_Init+0x13e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2bff      	cmp	r3, #255	; 0xff
 80030e0:	d802      	bhi.n	80030e8 <HAL_GPIO_Init+0x14c>
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	e002      	b.n	80030ee <HAL_GPIO_Init+0x152>
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	3b08      	subs	r3, #8
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	210f      	movs	r1, #15
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	6a39      	ldr	r1, [r7, #32]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 80c1 	beq.w	800329e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800311c:	4b53      	ldr	r3, [pc, #332]	; (800326c <HAL_GPIO_Init+0x2d0>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_GPIO_Init+0x2d0>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6193      	str	r3, [r2, #24]
 8003128:	4b50      	ldr	r3, [pc, #320]	; (800326c <HAL_GPIO_Init+0x2d0>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003134:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <HAL_GPIO_Init+0x2d4>)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	f003 0303 	and.w	r3, r3, #3
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a46      	ldr	r2, [pc, #280]	; (8003274 <HAL_GPIO_Init+0x2d8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d01f      	beq.n	80031a0 <HAL_GPIO_Init+0x204>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a45      	ldr	r2, [pc, #276]	; (8003278 <HAL_GPIO_Init+0x2dc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d019      	beq.n	800319c <HAL_GPIO_Init+0x200>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a44      	ldr	r2, [pc, #272]	; (800327c <HAL_GPIO_Init+0x2e0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_GPIO_Init+0x1fc>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_GPIO_Init+0x2e4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d00d      	beq.n	8003194 <HAL_GPIO_Init+0x1f8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_GPIO_Init+0x2e8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d007      	beq.n	8003190 <HAL_GPIO_Init+0x1f4>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a41      	ldr	r2, [pc, #260]	; (8003288 <HAL_GPIO_Init+0x2ec>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d101      	bne.n	800318c <HAL_GPIO_Init+0x1f0>
 8003188:	2305      	movs	r3, #5
 800318a:	e00a      	b.n	80031a2 <HAL_GPIO_Init+0x206>
 800318c:	2306      	movs	r3, #6
 800318e:	e008      	b.n	80031a2 <HAL_GPIO_Init+0x206>
 8003190:	2304      	movs	r3, #4
 8003192:	e006      	b.n	80031a2 <HAL_GPIO_Init+0x206>
 8003194:	2303      	movs	r3, #3
 8003196:	e004      	b.n	80031a2 <HAL_GPIO_Init+0x206>
 8003198:	2302      	movs	r3, #2
 800319a:	e002      	b.n	80031a2 <HAL_GPIO_Init+0x206>
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_GPIO_Init+0x206>
 80031a0:	2300      	movs	r3, #0
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	f002 0203 	and.w	r2, r2, #3
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	4093      	lsls	r3, r2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031b2:	492f      	ldr	r1, [pc, #188]	; (8003270 <HAL_GPIO_Init+0x2d4>)
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d006      	beq.n	80031da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031cc:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_GPIO_Init+0x2f0>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	492e      	ldr	r1, [pc, #184]	; (800328c <HAL_GPIO_Init+0x2f0>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	600b      	str	r3, [r1, #0]
 80031d8:	e006      	b.n	80031e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_GPIO_Init+0x2f0>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	492a      	ldr	r1, [pc, #168]	; (800328c <HAL_GPIO_Init+0x2f0>)
 80031e4:	4013      	ands	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_GPIO_Init+0x2f0>)
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4924      	ldr	r1, [pc, #144]	; (800328c <HAL_GPIO_Init+0x2f0>)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	e006      	b.n	8003210 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_GPIO_Init+0x2f0>)
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	43db      	mvns	r3, r3
 800320a:	4920      	ldr	r1, [pc, #128]	; (800328c <HAL_GPIO_Init+0x2f0>)
 800320c:	4013      	ands	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_GPIO_Init+0x2f0>)
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	491a      	ldr	r1, [pc, #104]	; (800328c <HAL_GPIO_Init+0x2f0>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_GPIO_Init+0x2f0>)
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	43db      	mvns	r3, r3
 8003232:	4916      	ldr	r1, [pc, #88]	; (800328c <HAL_GPIO_Init+0x2f0>)
 8003234:	4013      	ands	r3, r2
 8003236:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d025      	beq.n	8003290 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_GPIO_Init+0x2f0>)
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	4910      	ldr	r1, [pc, #64]	; (800328c <HAL_GPIO_Init+0x2f0>)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	4313      	orrs	r3, r2
 800324e:	60cb      	str	r3, [r1, #12]
 8003250:	e025      	b.n	800329e <HAL_GPIO_Init+0x302>
 8003252:	bf00      	nop
 8003254:	10320000 	.word	0x10320000
 8003258:	10310000 	.word	0x10310000
 800325c:	10220000 	.word	0x10220000
 8003260:	10210000 	.word	0x10210000
 8003264:	10120000 	.word	0x10120000
 8003268:	10110000 	.word	0x10110000
 800326c:	40021000 	.word	0x40021000
 8003270:	40010000 	.word	0x40010000
 8003274:	40010800 	.word	0x40010800
 8003278:	40010c00 	.word	0x40010c00
 800327c:	40011000 	.word	0x40011000
 8003280:	40011400 	.word	0x40011400
 8003284:	40011800 	.word	0x40011800
 8003288:	40011c00 	.word	0x40011c00
 800328c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_GPIO_Init+0x324>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	43db      	mvns	r3, r3
 8003298:	4909      	ldr	r1, [pc, #36]	; (80032c0 <HAL_GPIO_Init+0x324>)
 800329a:	4013      	ands	r3, r2
 800329c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	3301      	adds	r3, #1
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f47f ae7e 	bne.w	8002fb0 <HAL_GPIO_Init+0x14>
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	372c      	adds	r7, #44	; 0x2c
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr
 80032c0:	40010400 	.word	0x40010400

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032e0:	e003      	b.n	80032ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	041a      	lsls	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	611a      	str	r2, [r3, #16]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43d9      	mvns	r1, r3
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	400b      	ands	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
	...

08003328 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <HAL_PWR_EnableBkUpAccess+0x14>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	420e0020 	.word	0x420e0020

08003340 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_PWR_DisableBkUpAccess+0x14>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	420e0020 	.word	0x420e0020

08003358 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e26c      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8087 	beq.w	8003486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003378:	4b92      	ldr	r3, [pc, #584]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	d00c      	beq.n	800339e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003384:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d112      	bne.n	80033b6 <HAL_RCC_OscConfig+0x5e>
 8003390:	4b8c      	ldr	r3, [pc, #560]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339c:	d10b      	bne.n	80033b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339e:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06c      	beq.n	8003484 <HAL_RCC_OscConfig+0x12c>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d168      	bne.n	8003484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e246      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x76>
 80033c0:	4b80      	ldr	r3, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a7f      	ldr	r2, [pc, #508]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e02e      	b.n	800342c <HAL_RCC_OscConfig+0xd4>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x98>
 80033d6:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a77      	ldr	r2, [pc, #476]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xd4>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0xbc>
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a71      	ldr	r2, [pc, #452]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6e      	ldr	r2, [pc, #440]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xd4>
 8003414:	4b6b      	ldr	r3, [pc, #428]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6a      	ldr	r2, [pc, #424]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff fb34 	bl	8002aa0 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7ff fb30 	bl	8002aa0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1fa      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xe4>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7ff fb20 	bl	8002aa0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003464:	f7ff fb1c 	bl	8002aa0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1e6      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x10c>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d063      	beq.n	800355a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349e:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d11c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x18c>
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_RCC_OscConfig+0x176>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e1ba      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4939      	ldr	r1, [pc, #228]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	e03a      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ec:	4b36      	ldr	r3, [pc, #216]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f2:	f7ff fad5 	bl	8002aa0 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fa:	f7ff fad1 	bl	8002aa0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e19b      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4927      	ldr	r1, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e015      	b.n	800355a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_RCC_OscConfig+0x270>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7ff fab4 	bl	8002aa0 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353c:	f7ff fab0 	bl	8002aa0 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e17a      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d03a      	beq.n	80035dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d019      	beq.n	80035a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003574:	f7ff fa94 	bl	8002aa0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357c:	f7ff fa90 	bl	8002aa0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e15a      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <HAL_RCC_OscConfig+0x26c>)
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800359a:	2001      	movs	r0, #1
 800359c:	f000 fad8 	bl	8003b50 <RCC_Delay>
 80035a0:	e01c      	b.n	80035dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a2:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <HAL_RCC_OscConfig+0x274>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a8:	f7ff fa7a 	bl	8002aa0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ae:	e00f      	b.n	80035d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b0:	f7ff fa76 	bl	8002aa0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d908      	bls.n	80035d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e140      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	42420000 	.word	0x42420000
 80035cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d0:	4b9e      	ldr	r3, [pc, #632]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e9      	bne.n	80035b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 80a6 	beq.w	8003736 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ee:	4b97      	ldr	r3, [pc, #604]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10d      	bne.n	8003616 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4b94      	ldr	r3, [pc, #592]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	4a93      	ldr	r2, [pc, #588]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	61d3      	str	r3, [r2, #28]
 8003606:	4b91      	ldr	r3, [pc, #580]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003616:	4b8e      	ldr	r3, [pc, #568]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003622:	4b8b      	ldr	r3, [pc, #556]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a8a      	ldr	r2, [pc, #552]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7ff fa37 	bl	8002aa0 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7ff fa33 	bl	8002aa0 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	; 0x64
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e0fd      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003648:	4b81      	ldr	r3, [pc, #516]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x312>
 800365c:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	4a7a      	ldr	r2, [pc, #488]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6213      	str	r3, [r2, #32]
 8003668:	e02d      	b.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x334>
 8003672:	4b76      	ldr	r3, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4a75      	ldr	r2, [pc, #468]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6213      	str	r3, [r2, #32]
 800367e:	4b73      	ldr	r3, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4a72      	ldr	r2, [pc, #456]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6213      	str	r3, [r2, #32]
 800368a:	e01c      	b.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d10c      	bne.n	80036ae <HAL_RCC_OscConfig+0x356>
 8003694:	4b6d      	ldr	r3, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4a6c      	ldr	r2, [pc, #432]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	6213      	str	r3, [r2, #32]
 80036a0:	4b6a      	ldr	r3, [pc, #424]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4a69      	ldr	r2, [pc, #420]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6213      	str	r3, [r2, #32]
 80036ac:	e00b      	b.n	80036c6 <HAL_RCC_OscConfig+0x36e>
 80036ae:	4b67      	ldr	r3, [pc, #412]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a66      	ldr	r2, [pc, #408]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6213      	str	r3, [r2, #32]
 80036ba:	4b64      	ldr	r3, [pc, #400]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	4a63      	ldr	r2, [pc, #396]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d015      	beq.n	80036fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ce:	f7ff f9e7 	bl	8002aa0 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	e00a      	b.n	80036ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7ff f9e3 	bl	8002aa0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e0ab      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ec:	4b57      	ldr	r3, [pc, #348]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0ee      	beq.n	80036d6 <HAL_RCC_OscConfig+0x37e>
 80036f8:	e014      	b.n	8003724 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fa:	f7ff f9d1 	bl	8002aa0 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	e00a      	b.n	8003718 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003702:	f7ff f9cd 	bl	8002aa0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003710:	4293      	cmp	r3, r2
 8003712:	d901      	bls.n	8003718 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e095      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ee      	bne.n	8003702 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d105      	bne.n	8003736 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800372a:	4b48      	ldr	r3, [pc, #288]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4a47      	ldr	r2, [pc, #284]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003734:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8081 	beq.w	8003842 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003740:	4b42      	ldr	r3, [pc, #264]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 030c 	and.w	r3, r3, #12
 8003748:	2b08      	cmp	r3, #8
 800374a:	d061      	beq.n	8003810 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d146      	bne.n	80037e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_OscConfig+0x4fc>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7ff f9a1 	bl	8002aa0 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7ff f99d 	bl	8002aa0 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e067      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003788:	d108      	bne.n	800379c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800378a:	4b30      	ldr	r3, [pc, #192]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	492d      	ldr	r1, [pc, #180]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800379c:	4b2b      	ldr	r3, [pc, #172]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a19      	ldr	r1, [r3, #32]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	430b      	orrs	r3, r1
 80037ae:	4927      	ldr	r1, [pc, #156]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x4fc>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7ff f971 	bl	8002aa0 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c2:	f7ff f96d 	bl	8002aa0 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e037      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x46a>
 80037e0:	e02f      	b.n	8003842 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_RCC_OscConfig+0x4fc>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7ff f95a 	bl	8002aa0 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7ff f956 	bl	8002aa0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e020      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003802:	4b12      	ldr	r3, [pc, #72]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x498>
 800380e:	e018      	b.n	8003842 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e013      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800381c:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RCC_OscConfig+0x4f4>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	429a      	cmp	r2, r3
 800382e:	d106      	bne.n	800383e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	40007000 	.word	0x40007000
 8003854:	42420060 	.word	0x42420060

08003858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d0      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b6a      	ldr	r3, [pc, #424]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b67      	ldr	r3, [pc, #412]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4965      	ldr	r1, [pc, #404]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a58      	ldr	r2, [pc, #352]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a52      	ldr	r2, [pc, #328]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d040      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b41      	ldr	r3, [pc, #260]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e073      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06b      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b39      	ldr	r3, [pc, #228]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4936      	ldr	r1, [pc, #216]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7ff f8aa 	bl	8002aa0 <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7ff f8a6 	bl	8002aa0 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	; 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e053      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b27      	ldr	r3, [pc, #156]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d210      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	4922      	ldr	r1, [pc, #136]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	; (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCC_ClockConfig+0x1d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff f808 	bl	8002a1c <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	0800b590 	.word	0x0800b590
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000004 	.word	0x20000004

08003a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b490      	push	{r4, r7}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a32:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a34:	1d3c      	adds	r4, r7, #4
 8003a36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a3c:	f240 2301 	movw	r3, #513	; 0x201
 8003a40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a56:	4b22      	ldr	r3, [pc, #136]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x40>
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x46>
 8003a6a:	e02d      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a6e:	623b      	str	r3, [r7, #32]
      break;
 8003a70:	e02d      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	0c9b      	lsrs	r3, r3, #18
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7e:	4413      	add	r3, r2
 8003a80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c5b      	lsrs	r3, r3, #17
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aa4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aaa:	fb02 f203 	mul.w	r2, r2, r3
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab6:	e004      	b.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	623b      	str	r3, [r7, #32]
      break;
 8003ac6:	e002      	b.n	8003ace <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aca:	623b      	str	r3, [r7, #32]
      break;
 8003acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ace:	6a3b      	ldr	r3, [r7, #32]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc90      	pop	{r4, r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	0800b4b4 	.word	0x0800b4b4
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000000 	.word	0x20000000

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4903      	ldr	r1, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	0800b5a0 	.word	0x0800b5a0

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b30:	4602      	mov	r2, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4903      	ldr	r1, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	0800b5a0 	.word	0x0800b5a0

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	20000000 	.word	0x20000000
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fe fc6a 	bl	800248c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fbf2 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e041      	b.n	8003cc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f839 	bl	8003cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fba3 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x24>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e022      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x3e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e015      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e008      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e072      	b.n	8003e34 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x82>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x92>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xa2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fdcc 	bl	800492c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a28      	ldr	r2, [pc, #160]	; (8003e3c <HAL_TIM_PWM_Start+0x160>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d004      	beq.n	8003da8 <HAL_TIM_PWM_Start+0xcc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <HAL_TIM_PWM_Start+0x164>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_TIM_PWM_Start+0xd0>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_TIM_PWM_Start+0xd2>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_TIM_PWM_Start+0x160>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x122>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1b      	ldr	r2, [pc, #108]	; (8003e40 <HAL_TIM_PWM_Start+0x164>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x122>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dde:	d00e      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x122>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <HAL_TIM_PWM_Start+0x168>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x122>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIM_PWM_Start+0x16c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x122>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_TIM_PWM_Start+0x170>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d111      	bne.n	8003e22 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b06      	cmp	r3, #6
 8003e0e:	d010      	beq.n	8003e32 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e20:	e007      	b.n	8003e32 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f042 0201 	orr.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40013400 	.word	0x40013400
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00

08003e50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e093      	b.n	8003f8c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d106      	bne.n	8003e7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fe fb59 	bl	8002530 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6812      	ldr	r2, [r2, #0]
 8003e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e94:	f023 0307 	bic.w	r3, r3, #7
 8003e98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f000 fa85 	bl	80043b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ed2:	f023 0303 	bic.w	r3, r3, #3
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ef0:	f023 030c 	bic.w	r3, r3, #12
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	021b      	lsls	r3, r3, #8
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	011a      	lsls	r2, r3, #4
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	031b      	lsls	r3, r3, #12
 8003f20:	4313      	orrs	r3, r2
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d110      	bne.n	8003fe6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d102      	bne.n	8003fd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fca:	7b7b      	ldrb	r3, [r7, #13]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d001      	beq.n	8003fd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e069      	b.n	80040a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe4:	e031      	b.n	800404a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d110      	bne.n	800400e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fec:	7bbb      	ldrb	r3, [r7, #14]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d102      	bne.n	8003ff8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ff2:	7b3b      	ldrb	r3, [r7, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d001      	beq.n	8003ffc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e055      	b.n	80040a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400c:	e01d      	b.n	800404a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004014:	7bbb      	ldrb	r3, [r7, #14]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d105      	bne.n	8004026 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800401a:	7b7b      	ldrb	r3, [r7, #13]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d102      	bne.n	8004026 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004020:	7b3b      	ldrb	r3, [r7, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d001      	beq.n	800402a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e03e      	b.n	80040a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_TIM_Encoder_Start+0xc4>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b04      	cmp	r3, #4
 8004054:	d008      	beq.n	8004068 <HAL_TIM_Encoder_Start+0xd4>
 8004056:	e00f      	b.n	8004078 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2201      	movs	r2, #1
 800405e:	2100      	movs	r1, #0
 8004060:	4618      	mov	r0, r3
 8004062:	f000 fc63 	bl	800492c <TIM_CCxChannelCmd>
      break;
 8004066:	e016      	b.n	8004096 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2201      	movs	r2, #1
 800406e:	2104      	movs	r1, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f000 fc5b 	bl	800492c <TIM_CCxChannelCmd>
      break;
 8004076:	e00e      	b.n	8004096 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2201      	movs	r2, #1
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fc53 	bl	800492c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2201      	movs	r2, #1
 800408c:	2104      	movs	r1, #4
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fc4c 	bl	800492c <TIM_CCxChannelCmd>
      break;
 8004094:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0ac      	b.n	8004224 <HAL_TIM_PWM_ConfigChannel+0x174>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	f200 809f 	bhi.w	8004218 <HAL_TIM_PWM_ConfigChannel+0x168>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004219 	.word	0x08004219
 80040e8:	08004219 	.word	0x08004219
 80040ec:	08004219 	.word	0x08004219
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004219 	.word	0x08004219
 80040f8:	08004219 	.word	0x08004219
 80040fc:	08004219 	.word	0x08004219
 8004100:	08004197 	.word	0x08004197
 8004104:	08004219 	.word	0x08004219
 8004108:	08004219 	.word	0x08004219
 800410c:	08004219 	.word	0x08004219
 8004110:	080041d7 	.word	0x080041d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f9c4 	bl	80044a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
      break;
 8004152:	e062      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fa14 	bl	8004588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]
      break;
 8004194:	e041      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa67 	bl	8004670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0204 	bic.w	r2, r2, #4
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
      break;
 80041d4:	e021      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fabb 	bl	8004758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
      break;
 8004216:	e000      	b.n	800421a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIM_ConfigClockSource+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e0b3      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x180>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800426a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d03e      	beq.n	80042fc <HAL_TIM_ConfigClockSource+0xd0>
 800427e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004282:	f200 8087 	bhi.w	8004394 <HAL_TIM_ConfigClockSource+0x168>
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	f000 8085 	beq.w	8004398 <HAL_TIM_ConfigClockSource+0x16c>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004292:	d87f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 8004294:	2b70      	cmp	r3, #112	; 0x70
 8004296:	d01a      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0xa2>
 8004298:	2b70      	cmp	r3, #112	; 0x70
 800429a:	d87b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 800429c:	2b60      	cmp	r3, #96	; 0x60
 800429e:	d050      	beq.n	8004342 <HAL_TIM_ConfigClockSource+0x116>
 80042a0:	2b60      	cmp	r3, #96	; 0x60
 80042a2:	d877      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042a4:	2b50      	cmp	r3, #80	; 0x50
 80042a6:	d03c      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0xf6>
 80042a8:	2b50      	cmp	r3, #80	; 0x50
 80042aa:	d873      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	d058      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0x136>
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d86f      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042b4:	2b30      	cmp	r3, #48	; 0x30
 80042b6:	d064      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
 80042b8:	2b30      	cmp	r3, #48	; 0x30
 80042ba:	d86b      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d060      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d867      	bhi.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d05c      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d05a      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80042cc:	e062      	b.n	8004394 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6899      	ldr	r1, [r3, #8]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f000 fb06 	bl	80048ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	609a      	str	r2, [r3, #8]
      break;
 80042fa:	e04e      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f000 faef 	bl	80048ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800431e:	609a      	str	r2, [r3, #8]
      break;
 8004320:	e03b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6818      	ldr	r0, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	6859      	ldr	r1, [r3, #4]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	461a      	mov	r2, r3
 8004330:	f000 fa66 	bl	8004800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2150      	movs	r1, #80	; 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fabd 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004340:	e02b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	461a      	mov	r2, r3
 8004350:	f000 fa84 	bl	800485c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2160      	movs	r1, #96	; 0x60
 800435a:	4618      	mov	r0, r3
 800435c:	f000 faad 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004360:	e01b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	461a      	mov	r2, r3
 8004370:	f000 fa46 	bl	8004800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2140      	movs	r1, #64	; 0x40
 800437a:	4618      	mov	r0, r3
 800437c:	f000 fa9d 	bl	80048ba <TIM_ITRx_SetConfig>
      break;
 8004380:	e00b      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f000 fa94 	bl	80048ba <TIM_ITRx_SetConfig>
        break;
 8004392:	e002      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a33      	ldr	r2, [pc, #204]	; (8004494 <TIM_Base_SetConfig+0xe0>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a32      	ldr	r2, [pc, #200]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d00f      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d00b      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a2f      	ldr	r2, [pc, #188]	; (800449c <TIM_Base_SetConfig+0xe8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a2e      	ldr	r2, [pc, #184]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a2d      	ldr	r2, [pc, #180]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a22      	ldr	r2, [pc, #136]	; (8004494 <TIM_Base_SetConfig+0xe0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <TIM_Base_SetConfig+0x82>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a21      	ldr	r2, [pc, #132]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00f      	beq.n	8004436 <TIM_Base_SetConfig+0x82>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d00b      	beq.n	8004436 <TIM_Base_SetConfig+0x82>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1e      	ldr	r2, [pc, #120]	; (800449c <TIM_Base_SetConfig+0xe8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_Base_SetConfig+0x82>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <TIM_Base_SetConfig+0xec>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_Base_SetConfig+0x82>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <TIM_Base_SetConfig+0xf0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d108      	bne.n	8004448 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a09      	ldr	r2, [pc, #36]	; (8004494 <TIM_Base_SetConfig+0xe0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_Base_SetConfig+0xc8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <TIM_Base_SetConfig+0xe4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	40012c00 	.word	0x40012c00
 8004498:	40013400 	.word	0x40013400
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00

080044a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0302 	bic.w	r3, r3, #2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a20      	ldr	r2, [pc, #128]	; (8004580 <TIM_OC1_SetConfig+0xd8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d003      	beq.n	800450c <TIM_OC1_SetConfig+0x64>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <TIM_OC1_SetConfig+0xdc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d10c      	bne.n	8004526 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 0308 	bic.w	r3, r3, #8
 8004512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a15      	ldr	r2, [pc, #84]	; (8004580 <TIM_OC1_SetConfig+0xd8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_OC1_SetConfig+0x8e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a14      	ldr	r2, [pc, #80]	; (8004584 <TIM_OC1_SetConfig+0xdc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d111      	bne.n	800455a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800453c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	621a      	str	r2, [r3, #32]
}
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40013400 	.word	0x40013400

08004588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	f023 0210 	bic.w	r2, r3, #16
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0320 	bic.w	r3, r3, #32
 80045d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a21      	ldr	r2, [pc, #132]	; (8004668 <TIM_OC2_SetConfig+0xe0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC2_SetConfig+0x68>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a20      	ldr	r2, [pc, #128]	; (800466c <TIM_OC2_SetConfig+0xe4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d10d      	bne.n	800460c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	4313      	orrs	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a16      	ldr	r2, [pc, #88]	; (8004668 <TIM_OC2_SetConfig+0xe0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d003      	beq.n	800461c <TIM_OC2_SetConfig+0x94>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <TIM_OC2_SetConfig+0xe4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d113      	bne.n	8004644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800462a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	621a      	str	r2, [r3, #32]
}
 800465e:	bf00      	nop
 8004660:	371c      	adds	r7, #28
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40013400 	.word	0x40013400

08004670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a21      	ldr	r2, [pc, #132]	; (8004750 <TIM_OC3_SetConfig+0xe0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_OC3_SetConfig+0x66>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a20      	ldr	r2, [pc, #128]	; (8004754 <TIM_OC3_SetConfig+0xe4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d10d      	bne.n	80046f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	021b      	lsls	r3, r3, #8
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <TIM_OC3_SetConfig+0xe0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC3_SetConfig+0x92>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <TIM_OC3_SetConfig+0xe4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d113      	bne.n	800472a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40013400 	.word	0x40013400

08004758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	031b      	lsls	r3, r3, #12
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <TIM_OC4_SetConfig+0xa0>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d003      	beq.n	80047c0 <TIM_OC4_SetConfig+0x68>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <TIM_OC4_SetConfig+0xa4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d109      	bne.n	80047d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	019b      	lsls	r3, r3, #6
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40013400 	.word	0x40013400

08004800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	f023 0201 	bic.w	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800482a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	011b      	lsls	r3, r3, #4
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f023 030a 	bic.w	r3, r3, #10
 800483c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4313      	orrs	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	621a      	str	r2, [r3, #32]
}
 8004852:	bf00      	nop
 8004854:	371c      	adds	r7, #28
 8004856:	46bd      	mov	sp, r7
 8004858:	bc80      	pop	{r7}
 800485a:	4770      	bx	lr

0800485c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f023 0210 	bic.w	r2, r3, #16
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004886:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	031b      	lsls	r3, r3, #12
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004898:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	621a      	str	r2, [r3, #32]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bc80      	pop	{r7}
 80048b8:	4770      	bx	lr

080048ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b085      	sub	sp, #20
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f043 0307 	orr.w	r3, r3, #7
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	609a      	str	r2, [r3, #8]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr

080048ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b087      	sub	sp, #28
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004908:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	021a      	lsls	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	431a      	orrs	r2, r3
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4313      	orrs	r3, r2
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	609a      	str	r2, [r3, #8]
}
 8004922:	bf00      	nop
 8004924:	371c      	adds	r7, #28
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2201      	movs	r2, #1
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1a      	ldr	r2, [r3, #32]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1a      	ldr	r2, [r3, #32]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	431a      	orrs	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]
}
 800496a:	bf00      	nop
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	bc80      	pop	{r7}
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004984:	2b01      	cmp	r3, #1
 8004986:	d101      	bne.n	800498c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004988:	2302      	movs	r3, #2
 800498a:	e050      	b.n	8004a2e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d018      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a19      	ldr	r2, [pc, #100]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d013      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e2:	d00e      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d009      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10c      	bne.n	8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800
 8004a48:	40000c00 	.word	0x40000c00

08004a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e03d      	b.n	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b082      	sub	sp, #8
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e03f      	b.n	8004b80 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7fd fdeb 	bl	80026f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2224      	movs	r2, #36	; 0x24
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fc84 	bl	8005440 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08a      	sub	sp, #40	; 0x28
 8004b8c:	af02      	add	r7, sp, #8
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b20      	cmp	r3, #32
 8004ba6:	d17c      	bne.n	8004ca2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Transmit+0x2c>
 8004bae:	88fb      	ldrh	r3, [r7, #6]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e075      	b.n	8004ca4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_UART_Transmit+0x3e>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e06e      	b.n	8004ca4 <HAL_UART_Transmit+0x11c>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2221      	movs	r2, #33	; 0x21
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bdc:	f7fd ff60 	bl	8002aa0 <HAL_GetTick>
 8004be0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	88fa      	ldrh	r2, [r7, #6]
 8004be6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	88fa      	ldrh	r2, [r7, #6]
 8004bec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bf6:	d108      	bne.n	8004c0a <HAL_UART_Transmit+0x82>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	e003      	b.n	8004c12 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c1a:	e02a      	b.n	8004c72 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	9300      	str	r3, [sp, #0]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2200      	movs	r2, #0
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f000 fa37 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e036      	b.n	8004ca4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c4a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	3302      	adds	r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	e007      	b.n	8004c64 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1cf      	bne.n	8004c1c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2200      	movs	r2, #0
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa07 	bl	800509a <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e006      	b.n	8004ca4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e000      	b.n	8004ca4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ca2:	2302      	movs	r3, #2
  }
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d11d      	bne.n	8004d02 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_UART_Receive_IT+0x26>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e016      	b.n	8004d04 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Receive_IT+0x38>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e00f      	b.n	8004d04 <HAL_UART_Receive_IT+0x58>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fa18 	bl	800512e <UART_Start_Receive_IT>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	e000      	b.n	8004d04 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	f003 030f 	and.w	r3, r3, #15
 8004d3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10d      	bne.n	8004d5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_UART_IRQHandler+0x52>
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fac9 	bl	80052ee <UART_Receive_IT>
      return;
 8004d5c:	e17b      	b.n	8005056 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80b1 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x1bc>
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_UART_IRQHandler+0x70>
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80a6 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_UART_IRQHandler+0x90>
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f043 0201 	orr.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_UART_IRQHandler+0xb0>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0202 	orr.w	r2, r3, #2
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <HAL_UART_IRQHandler+0xd0>
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f043 0204 	orr.w	r2, r3, #4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00f      	beq.n	8004e06 <HAL_UART_IRQHandler+0xfa>
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_UART_IRQHandler+0xee>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d005      	beq.n	8004e06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f043 0208 	orr.w	r2, r3, #8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 811e 	beq.w	800504c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_UART_IRQHandler+0x11e>
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fa62 	bl	80052ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf14      	ite	ne
 8004e38:	2301      	movne	r3, #1
 8004e3a:	2300      	moveq	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_UART_IRQHandler+0x146>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d031      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f9a4 	bl	80051a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d023      	beq.n	8004eae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695a      	ldr	r2, [r3, #20]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d013      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	4a76      	ldr	r2, [pc, #472]	; (800505c <HAL_UART_IRQHandler+0x350>)
 8004e84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd ff7e 	bl	8002d8c <HAL_DMA_Abort_IT>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	e00e      	b.n	8004ec4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f8e3 	bl	8005072 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00a      	b.n	8004ec4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8df 	bl	8005072 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e006      	b.n	8004ec4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8db 	bl	8005072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ec2:	e0c3      	b.n	800504c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	bf00      	nop
    return;
 8004ec6:	e0c1      	b.n	800504c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 80a1 	bne.w	8005014 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 809b 	beq.w	8005014 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8095 	beq.w	8005014 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d04e      	beq.n	8004fac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004f18:	8a3b      	ldrh	r3, [r7, #16]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 8098 	beq.w	8005050 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f24:	8a3a      	ldrh	r2, [r7, #16]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	f080 8092 	bcs.w	8005050 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8a3a      	ldrh	r2, [r7, #16]
 8004f30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b20      	cmp	r3, #32
 8004f3a:	d02b      	beq.n	8004f94 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0210 	bic.w	r2, r2, #16
 8004f88:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f7fd fec1 	bl	8002d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f86d 	bl	8005084 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004faa:	e051      	b.n	8005050 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d047      	beq.n	8005054 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004fc4:	8a7b      	ldrh	r3, [r7, #18]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d044      	beq.n	8005054 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fd8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0201 	bic.w	r2, r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0210 	bic.w	r2, r2, #16
 8005006:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005008:	8a7b      	ldrh	r3, [r7, #18]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f839 	bl	8005084 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005012:	e01f      	b.n	8005054 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d008      	beq.n	8005030 <HAL_UART_IRQHandler+0x324>
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8f9 	bl	8005220 <UART_Transmit_IT>
    return;
 800502e:	e012      	b.n	8005056 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_UART_IRQHandler+0x34a>
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d008      	beq.n	8005056 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f93a 	bl	80052be <UART_EndTransmit_IT>
    return;
 800504a:	e004      	b.n	8005056 <HAL_UART_IRQHandler+0x34a>
    return;
 800504c:	bf00      	nop
 800504e:	e002      	b.n	8005056 <HAL_UART_IRQHandler+0x34a>
      return;
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <HAL_UART_IRQHandler+0x34a>
      return;
 8005054:	bf00      	nop
  }
}
 8005056:	3728      	adds	r7, #40	; 0x28
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	080051f9 	.word	0x080051f9

08005060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr

08005072 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005072:	b480      	push	{r7}
 8005074:	b083      	sub	sp, #12
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	4613      	mov	r3, r2
 80050a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050aa:	e02c      	b.n	8005106 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d028      	beq.n	8005106 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <UART_WaitOnFlagUntilTimeout+0x30>
 80050ba:	f7fd fcf1 	bl	8002aa0 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d21d      	bcs.n	8005106 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695a      	ldr	r2, [r3, #20]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0201 	bic.w	r2, r2, #1
 80050e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e00f      	b.n	8005126 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	4013      	ands	r3, r2
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	429a      	cmp	r2, r3
 8005114:	bf0c      	ite	eq
 8005116:	2301      	moveq	r3, #1
 8005118:	2300      	movne	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	429a      	cmp	r2, r3
 8005122:	d0c3      	beq.n	80050ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	60f8      	str	r0, [r7, #12]
 8005136:	60b9      	str	r1, [r7, #8]
 8005138:	4613      	mov	r3, r2
 800513a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	88fa      	ldrh	r2, [r7, #6]
 8005146:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2222      	movs	r2, #34	; 0x22
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005172:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0220 	orr.w	r2, r2, #32
 8005192:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0210 	bic.w	r2, r2, #16
 80051de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f7ff ff2d 	bl	8005072 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005218:	bf00      	nop
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b21      	cmp	r3, #33	; 0x21
 8005232:	d13e      	bne.n	80052b2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523c:	d114      	bne.n	8005268 <UART_Transmit_IT+0x48>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d110      	bne.n	8005268 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	881b      	ldrh	r3, [r3, #0]
 8005250:	461a      	mov	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	1c9a      	adds	r2, r3, #2
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	621a      	str	r2, [r3, #32]
 8005266:	e008      	b.n	800527a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	1c59      	adds	r1, r3, #1
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6211      	str	r1, [r2, #32]
 8005272:	781a      	ldrb	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800527e:	b29b      	uxth	r3, r3
 8005280:	3b01      	subs	r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4619      	mov	r1, r3
 8005288:	84d1      	strh	r1, [r2, #38]	; 0x26
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10f      	bne.n	80052ae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e000      	b.n	80052b4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bc80      	pop	{r7}
 80052bc:	4770      	bx	lr

080052be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff febe 	bl	8005060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b086      	sub	sp, #24
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b22      	cmp	r3, #34	; 0x22
 8005300:	f040 8099 	bne.w	8005436 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530c:	d117      	bne.n	800533e <UART_Receive_IT+0x50>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d113      	bne.n	800533e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b29b      	uxth	r3, r3
 8005328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532c:	b29a      	uxth	r2, r3
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
 800533c:	e026      	b.n	800538c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005350:	d007      	beq.n	8005362 <UART_Receive_IT+0x74>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <UART_Receive_IT+0x82>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	b2da      	uxtb	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	701a      	strb	r2, [r3, #0]
 800536e:	e008      	b.n	8005382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537c:	b2da      	uxtb	r2, r3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29b      	uxth	r3, r3
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4619      	mov	r1, r3
 800539a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800539c:	2b00      	cmp	r3, #0
 800539e:	d148      	bne.n	8005432 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0220 	bic.w	r2, r2, #32
 80053ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695a      	ldr	r2, [r3, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0201 	bic.w	r2, r2, #1
 80053ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d123      	bne.n	8005428 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0210 	bic.w	r2, r2, #16
 80053f4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d10a      	bne.n	800541a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fe2f 	bl	8005084 <HAL_UARTEx_RxEventCallback>
 8005426:	e002      	b.n	800542e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7fc fa0b 	bl	8001844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e002      	b.n	8005438 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800547a:	f023 030c 	bic.w	r3, r3, #12
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	430b      	orrs	r3, r1
 8005486:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <UART_SetConfig+0x114>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d103      	bne.n	80054b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fe fb3e 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	e002      	b.n	80054b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fe fb26 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 80054b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009a      	lsls	r2, r3, #2
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <UART_SetConfig+0x118>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	0119      	lsls	r1, r3, #4
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009a      	lsls	r2, r3, #2
 80054e0:	441a      	add	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ec:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <UART_SetConfig+0x118>)
 80054ee:	fba3 0302 	umull	r0, r3, r3, r2
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2064      	movs	r0, #100	; 0x64
 80054f6:	fb00 f303 	mul.w	r3, r0, r3
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	011b      	lsls	r3, r3, #4
 80054fe:	3332      	adds	r3, #50	; 0x32
 8005500:	4a15      	ldr	r2, [pc, #84]	; (8005558 <UART_SetConfig+0x118>)
 8005502:	fba2 2303 	umull	r2, r3, r2, r3
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	4419      	add	r1, r3
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009a      	lsls	r2, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	fbb2 f2f3 	udiv	r2, r2, r3
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <UART_SetConfig+0x118>)
 8005526:	fba3 0302 	umull	r0, r3, r3, r2
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	2064      	movs	r0, #100	; 0x64
 800552e:	fb00 f303 	mul.w	r3, r0, r3
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	3332      	adds	r3, #50	; 0x32
 8005538:	4a07      	ldr	r2, [pc, #28]	; (8005558 <UART_SetConfig+0x118>)
 800553a:	fba2 2303 	umull	r2, r3, r2, r3
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	f003 020f 	and.w	r2, r3, #15
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	440a      	add	r2, r1
 800554a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40013800 	.word	0x40013800
 8005558:	51eb851f 	.word	0x51eb851f

0800555c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	60bb      	str	r3, [r7, #8]
  return(result);
 8005568:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10f      	bne.n	800558e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556e:	f3ef 8310 	mrs	r3, PRIMASK
 8005572:	607b      	str	r3, [r7, #4]
  return(result);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <osKernelInitialize+0x32>
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <osKernelInitialize+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d109      	bne.n	8005596 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005582:	f3ef 8311 	mrs	r3, BASEPRI
 8005586:	603b      	str	r3, [r7, #0]
  return(result);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800558e:	f06f 0305 	mvn.w	r3, #5
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e00c      	b.n	80055b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005596:	4b09      	ldr	r3, [pc, #36]	; (80055bc <osKernelInitialize+0x60>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800559e:	4b07      	ldr	r3, [pc, #28]	; (80055bc <osKernelInitialize+0x60>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e002      	b.n	80055b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80055aa:	f04f 33ff 	mov.w	r3, #4294967295
 80055ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	2000020c 	.word	0x2000020c

080055c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c6:	f3ef 8305 	mrs	r3, IPSR
 80055ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80055cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d2:	f3ef 8310 	mrs	r3, PRIMASK
 80055d6:	607b      	str	r3, [r7, #4]
  return(result);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <osKernelStart+0x32>
 80055de:	4b11      	ldr	r3, [pc, #68]	; (8005624 <osKernelStart+0x64>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d109      	bne.n	80055fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055e6:	f3ef 8311 	mrs	r3, BASEPRI
 80055ea:	603b      	str	r3, [r7, #0]
  return(result);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80055f2:	f06f 0305 	mvn.w	r3, #5
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e00e      	b.n	8005618 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80055fa:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <osKernelStart+0x64>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <osKernelStart+0x64>)
 8005604:	2202      	movs	r2, #2
 8005606:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005608:	f001 f878 	bl	80066fc <vTaskStartScheduler>
      stat = osOK;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e002      	b.n	8005618 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005612:	f04f 33ff 	mov.w	r3, #4294967295
 8005616:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	2000020c 	.word	0x2000020c

08005628 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b092      	sub	sp, #72	; 0x48
 800562c:	af04      	add	r7, sp, #16
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005638:	f3ef 8305 	mrs	r3, IPSR
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005640:	2b00      	cmp	r3, #0
 8005642:	f040 8094 	bne.w	800576e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005646:	f3ef 8310 	mrs	r3, PRIMASK
 800564a:	623b      	str	r3, [r7, #32]
  return(result);
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808d 	bne.w	800576e <osThreadNew+0x146>
 8005654:	4b48      	ldr	r3, [pc, #288]	; (8005778 <osThreadNew+0x150>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d106      	bne.n	800566a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800565c:	f3ef 8311 	mrs	r3, BASEPRI
 8005660:	61fb      	str	r3, [r7, #28]
  return(result);
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f040 8082 	bne.w	800576e <osThreadNew+0x146>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d07e      	beq.n	800576e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005670:	2380      	movs	r3, #128	; 0x80
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005674:	2318      	movs	r3, #24
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005678:	2300      	movs	r3, #0
 800567a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800567c:	f107 031b 	add.w	r3, r7, #27
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d045      	beq.n	800571a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <osThreadNew+0x74>
        name = attr->name;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <osThreadNew+0x9a>
 80056b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b2:	2b38      	cmp	r3, #56	; 0x38
 80056b4:	d805      	bhi.n	80056c2 <osThreadNew+0x9a>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <osThreadNew+0x9e>
        return (NULL);
 80056c2:	2300      	movs	r3, #0
 80056c4:	e054      	b.n	8005770 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <osThreadNew+0xd4>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b5b      	cmp	r3, #91	; 0x5b
 80056e4:	d90a      	bls.n	80056fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d006      	beq.n	80056fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <osThreadNew+0xd4>
        mem = 1;
 80056f6:	2301      	movs	r3, #1
 80056f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056fa:	e010      	b.n	800571e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10c      	bne.n	800571e <osThreadNew+0xf6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d108      	bne.n	800571e <osThreadNew+0xf6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <osThreadNew+0xf6>
          mem = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
 8005718:	e001      	b.n	800571e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800571a:	2300      	movs	r3, #0
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	2b01      	cmp	r3, #1
 8005722:	d110      	bne.n	8005746 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800572c:	9202      	str	r2, [sp, #8]
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 fe12 	bl	8006364 <xTaskCreateStatic>
 8005740:	4603      	mov	r3, r0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e013      	b.n	800576e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	d110      	bne.n	800576e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	b29a      	uxth	r2, r3
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fe5c 	bl	800641c <xTaskCreate>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d001      	beq.n	800576e <osThreadNew+0x146>
          hTask = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800576e:	697b      	ldr	r3, [r7, #20]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3738      	adds	r7, #56	; 0x38
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	2000020c 	.word	0x2000020c

0800577c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005784:	f3ef 8305 	mrs	r3, IPSR
 8005788:	613b      	str	r3, [r7, #16]
  return(result);
 800578a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10f      	bne.n	80057b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005790:	f3ef 8310 	mrs	r3, PRIMASK
 8005794:	60fb      	str	r3, [r7, #12]
  return(result);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d109      	bne.n	80057b0 <osDelay+0x34>
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <osDelay+0x58>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d109      	bne.n	80057b8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057a4:	f3ef 8311 	mrs	r3, BASEPRI
 80057a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <osDelay+0x3c>
    stat = osErrorISR;
 80057b0:	f06f 0305 	mvn.w	r3, #5
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e007      	b.n	80057c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 ff66 	bl	8006694 <vTaskDelay>
    }
  }

  return (stat);
 80057c8:	697b      	ldr	r3, [r7, #20]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	2000020c 	.word	0x2000020c

080057d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a06      	ldr	r2, [pc, #24]	; (8005800 <vApplicationGetIdleTaskMemory+0x28>)
 80057e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a05      	ldr	r2, [pc, #20]	; (8005804 <vApplicationGetIdleTaskMemory+0x2c>)
 80057ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2280      	movs	r2, #128	; 0x80
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	20000210 	.word	0x20000210
 8005804:	2000026c 	.word	0x2000026c

08005808 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <vApplicationGetTimerTaskMemory+0x2c>)
 8005818:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a06      	ldr	r2, [pc, #24]	; (8005838 <vApplicationGetTimerTaskMemory+0x30>)
 800581e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005826:	601a      	str	r2, [r3, #0]
}
 8005828:	bf00      	nop
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000046c 	.word	0x2000046c
 8005838:	200004c8 	.word	0x200004c8

0800583c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f103 0208 	add.w	r2, r3, #8
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f04f 32ff 	mov.w	r2, #4294967295
 8005854:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f103 0208 	add.w	r2, r3, #8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f103 0208 	add.w	r2, r3, #8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005892:	b480      	push	{r7}
 8005894:	b085      	sub	sp, #20
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ee:	d103      	bne.n	80058f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e00c      	b.n	8005912 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3308      	adds	r3, #8
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	e002      	b.n	8005906 <vListInsert+0x2e>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	429a      	cmp	r2, r3
 8005910:	d2f6      	bcs.n	8005900 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	1c5a      	adds	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
}
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6892      	ldr	r2, [r2, #8]
 800595e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6852      	ldr	r2, [r2, #4]
 8005968:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	429a      	cmp	r2, r3
 8005972:	d103      	bne.n	800597c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1e5a      	subs	r2, r3, #1
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3714      	adds	r7, #20
 8005994:	46bd      	mov	sp, r7
 8005996:	bc80      	pop	{r7}
 8005998:	4770      	bx	lr
	...

0800599c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80059c6:	f001 ffc9 	bl	800795c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	441a      	add	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	3b01      	subs	r3, #1
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80059fc:	fb01 f303 	mul.w	r3, r1, r3
 8005a00:	441a      	add	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	22ff      	movs	r2, #255	; 0xff
 8005a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	22ff      	movs	r2, #255	; 0xff
 8005a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d114      	bne.n	8005a46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01a      	beq.n	8005a5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3310      	adds	r3, #16
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f8f1 	bl	8006c10 <xTaskRemoveFromEventList>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d012      	beq.n	8005a5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <xQueueGenericReset+0xcc>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	e009      	b.n	8005a5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3310      	adds	r3, #16
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fef6 	bl	800583c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3324      	adds	r3, #36	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fef1 	bl	800583c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a5a:	f001 ffaf 	bl	80079bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005a5e:	2301      	movs	r3, #1
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a92:	bf00      	nop
 8005a94:	e7fe      	b.n	8005a94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <xQueueGenericCreateStatic+0x52>
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <xQueueGenericCreateStatic+0x56>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <xQueueGenericCreateStatic+0x58>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	623b      	str	r3, [r7, #32]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <xQueueGenericCreateStatic+0x7e>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <xQueueGenericCreateStatic+0x82>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <xQueueGenericCreateStatic+0x84>
 8005aee:	2300      	movs	r3, #0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	61fb      	str	r3, [r7, #28]
}
 8005b06:	bf00      	nop
 8005b08:	e7fe      	b.n	8005b08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b0a:	2350      	movs	r3, #80	; 0x50
 8005b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2b50      	cmp	r3, #80	; 0x50
 8005b12:	d00a      	beq.n	8005b2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	61bb      	str	r3, [r7, #24]
}
 8005b26:	bf00      	nop
 8005b28:	e7fe      	b.n	8005b28 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f805 	bl	8005b5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b084      	sub	sp, #16
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d103      	bne.n	8005b76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	e002      	b.n	8005b7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b88:	2101      	movs	r1, #1
 8005b8a:	69b8      	ldr	r0, [r7, #24]
 8005b8c:	f7ff ff06 	bl	800599c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	; 0x38
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericSend+0x32>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <xQueueGenericSend+0x40>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <xQueueGenericSend+0x44>
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <xQueueGenericSend+0x46>
 8005be4:	2300      	movs	r3, #0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <xQueueGenericSend+0x60>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d103      	bne.n	8005c0e <xQueueGenericSend+0x6e>
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <xQueueGenericSend+0x72>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <xQueueGenericSend+0x74>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10a      	bne.n	8005c2e <xQueueGenericSend+0x8e>
	__asm volatile
 8005c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	623b      	str	r3, [r7, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c2e:	f001 f9b1 	bl	8006f94 <xTaskGetSchedulerState>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <xQueueGenericSend+0x9e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <xQueueGenericSend+0xa2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <xQueueGenericSend+0xa4>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericSend+0xbe>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61fb      	str	r3, [r7, #28]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c5e:	f001 fe7d 	bl	800795c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d302      	bcc.n	8005c74 <xQueueGenericSend+0xd4>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d129      	bne.n	8005cc8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c7a:	f000 fa07 	bl	800608c <prvCopyDataToQueue>
 8005c7e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d010      	beq.n	8005caa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	3324      	adds	r3, #36	; 0x24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 ffbf 	bl	8006c10 <xTaskRemoveFromEventList>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c98:	4b3f      	ldr	r3, [pc, #252]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	e00a      	b.n	8005cc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005cb0:	4b39      	ldr	r3, [pc, #228]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cc0:	f001 fe7c 	bl	80079bc <vPortExitCritical>
				return pdPASS;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e063      	b.n	8005d90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cce:	f001 fe75 	bl	80079bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e05c      	b.n	8005d90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cdc:	f107 0314 	add.w	r3, r7, #20
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fff9 	bl	8006cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cea:	f001 fe67 	bl	80079bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cee:	f000 fd6b 	bl	80067c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf2:	f001 fe33 	bl	800795c <vPortEnterCritical>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d02:	d103      	bne.n	8005d0c <xQueueGenericSend+0x16c>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d18:	d103      	bne.n	8005d22 <xQueueGenericSend+0x182>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d22:	f001 fe4b 	bl	80079bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	f107 0314 	add.w	r3, r7, #20
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 ffe8 	bl	8006d04 <xTaskCheckForTimeOut>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d124      	bne.n	8005d84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d3c:	f000 fa9e 	bl	800627c <prvIsQueueFull>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d018      	beq.n	8005d78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	3310      	adds	r3, #16
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ff0e 	bl	8006b70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d56:	f000 fa29 	bl	80061ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d5a:	f000 fd43 	bl	80067e4 <xTaskResumeAll>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f af7c 	bne.w	8005c5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005d66:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <xQueueGenericSend+0x1f8>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	e772      	b.n	8005c5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d7a:	f000 fa17 	bl	80061ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d7e:	f000 fd31 	bl	80067e4 <xTaskResumeAll>
 8005d82:	e76c      	b.n	8005c5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d86:	f000 fa11 	bl	80061ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d8a:	f000 fd2b 	bl	80067e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d8e:	2300      	movs	r3, #0
		}
	}
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3738      	adds	r7, #56	; 0x38
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10a      	bne.n	8005dca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dc6:	bf00      	nop
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d103      	bne.n	8005dd8 <xQueueGenericSendFromISR+0x3c>
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <xQueueGenericSendFromISR+0x40>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e000      	b.n	8005dde <xQueueGenericSendFromISR+0x42>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	623b      	str	r3, [r7, #32]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d103      	bne.n	8005e06 <xQueueGenericSendFromISR+0x6a>
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <xQueueGenericSendFromISR+0x6e>
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <xQueueGenericSendFromISR+0x70>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10a      	bne.n	8005e26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	61fb      	str	r3, [r7, #28]
}
 8005e22:	bf00      	nop
 8005e24:	e7fe      	b.n	8005e24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e26:	f001 fe5b 	bl	8007ae0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61ba      	str	r2, [r7, #24]
 8005e40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <xQueueGenericSendFromISR+0xbc>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d12c      	bne.n	8005eb2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e68:	f000 f910 	bl	800608c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e74:	d112      	bne.n	8005e9c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	3324      	adds	r3, #36	; 0x24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fec4 	bl	8006c10 <xTaskRemoveFromEventList>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e007      	b.n	8005eac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	b25a      	sxtb	r2, r3
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005eac:	2301      	movs	r3, #1
 8005eae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005eb0:	e001      	b.n	8005eb6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ec0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3738      	adds	r7, #56	; 0x38
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08c      	sub	sp, #48	; 0x30
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <xQueueReceive+0x30>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	623b      	str	r3, [r7, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d103      	bne.n	8005f0a <xQueueReceive+0x3e>
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <xQueueReceive+0x42>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueReceive+0x44>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueReceive+0x5e>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61fb      	str	r3, [r7, #28]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f2a:	f001 f833 	bl	8006f94 <xTaskGetSchedulerState>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <xQueueReceive+0x6e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <xQueueReceive+0x72>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueReceive+0x74>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueReceive+0x8e>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61bb      	str	r3, [r7, #24]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f5a:	f001 fcff 	bl	800795c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01f      	beq.n	8005faa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f6e:	f000 f8f7 	bl	8006160 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	1e5a      	subs	r2, r3, #1
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00f      	beq.n	8005fa2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	3310      	adds	r3, #16
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fe42 	bl	8006c10 <xTaskRemoveFromEventList>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d007      	beq.n	8005fa2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f92:	4b3d      	ldr	r3, [pc, #244]	; (8006088 <xQueueReceive+0x1bc>)
 8005f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fa2:	f001 fd0b 	bl	80079bc <vPortExitCritical>
				return pdPASS;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e069      	b.n	800607e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fb0:	f001 fd04 	bl	80079bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e062      	b.n	800607e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fbe:	f107 0310 	add.w	r3, r7, #16
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fe88 	bl	8006cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fcc:	f001 fcf6 	bl	80079bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fd0:	f000 fbfa 	bl	80067c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fd4:	f001 fcc2 	bl	800795c <vPortEnterCritical>
 8005fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fde:	b25b      	sxtb	r3, r3
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe4:	d103      	bne.n	8005fee <xQueueReceive+0x122>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ff4:	b25b      	sxtb	r3, r3
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d103      	bne.n	8006004 <xQueueReceive+0x138>
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006004:	f001 fcda 	bl	80079bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006008:	1d3a      	adds	r2, r7, #4
 800600a:	f107 0310 	add.w	r3, r7, #16
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fe77 	bl	8006d04 <xTaskCheckForTimeOut>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d123      	bne.n	8006064 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800601c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800601e:	f000 f917 	bl	8006250 <prvIsQueueEmpty>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d017      	beq.n	8006058 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	3324      	adds	r3, #36	; 0x24
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fd9d 	bl	8006b70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006038:	f000 f8b8 	bl	80061ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800603c:	f000 fbd2 	bl	80067e4 <xTaskResumeAll>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d189      	bne.n	8005f5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006046:	4b10      	ldr	r3, [pc, #64]	; (8006088 <xQueueReceive+0x1bc>)
 8006048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	e780      	b.n	8005f5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800605a:	f000 f8a7 	bl	80061ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800605e:	f000 fbc1 	bl	80067e4 <xTaskResumeAll>
 8006062:	e77a      	b.n	8005f5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006066:	f000 f8a1 	bl	80061ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800606a:	f000 fbbb 	bl	80067e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800606e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006070:	f000 f8ee 	bl	8006250 <prvIsQueueEmpty>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	f43f af6f 	beq.w	8005f5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800607c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800607e:	4618      	mov	r0, r3
 8006080:	3730      	adds	r7, #48	; 0x30
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006098:	2300      	movs	r3, #0
 800609a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10d      	bne.n	80060c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d14d      	bne.n	800614e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4618      	mov	r0, r3
 80060b8:	f000 ff8a 	bl	8006fd0 <xTaskPriorityDisinherit>
 80060bc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	e043      	b.n	800614e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d119      	bne.n	8006100 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6898      	ldr	r0, [r3, #8]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	461a      	mov	r2, r3
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	f002 f976 	bl	80083c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d32b      	bcc.n	800614e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	609a      	str	r2, [r3, #8]
 80060fe:	e026      	b.n	800614e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68d8      	ldr	r0, [r3, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	461a      	mov	r2, r3
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	f002 f95c 	bl	80083c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006118:	425b      	negs	r3, r3
 800611a:	441a      	add	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d207      	bcs.n	800613c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006134:	425b      	negs	r3, r3
 8006136:	441a      	add	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b02      	cmp	r3, #2
 8006140:	d105      	bne.n	800614e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3b01      	subs	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006156:	697b      	ldr	r3, [r7, #20]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d018      	beq.n	80061a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	441a      	add	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68da      	ldr	r2, [r3, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	429a      	cmp	r2, r3
 800618a:	d303      	bcc.n	8006194 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68d9      	ldr	r1, [r3, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	461a      	mov	r2, r3
 800619e:	6838      	ldr	r0, [r7, #0]
 80061a0:	f002 f912 	bl	80083c8 <memcpy>
	}
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80061b4:	f001 fbd2 	bl	800795c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061c0:	e011      	b.n	80061e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d012      	beq.n	80061f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3324      	adds	r3, #36	; 0x24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fd1e 	bl	8006c10 <xTaskRemoveFromEventList>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061da:	f000 fdf5 	bl	8006dc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	dce9      	bgt.n	80061c2 <prvUnlockQueue+0x16>
 80061ee:	e000      	b.n	80061f2 <prvUnlockQueue+0x46>
					break;
 80061f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	22ff      	movs	r2, #255	; 0xff
 80061f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061fa:	f001 fbdf 	bl	80079bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061fe:	f001 fbad 	bl	800795c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006208:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800620a:	e011      	b.n	8006230 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d012      	beq.n	800623a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	3310      	adds	r3, #16
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fcf9 	bl	8006c10 <xTaskRemoveFromEventList>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006224:	f000 fdd0 	bl	8006dc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	3b01      	subs	r3, #1
 800622c:	b2db      	uxtb	r3, r3
 800622e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006234:	2b00      	cmp	r3, #0
 8006236:	dce9      	bgt.n	800620c <prvUnlockQueue+0x60>
 8006238:	e000      	b.n	800623c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800623a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	22ff      	movs	r2, #255	; 0xff
 8006240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006244:	f001 fbba 	bl	80079bc <vPortExitCritical>
}
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006258:	f001 fb80 	bl	800795c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	2b00      	cmp	r3, #0
 8006262:	d102      	bne.n	800626a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006264:	2301      	movs	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	e001      	b.n	800626e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800626e:	f001 fba5 	bl	80079bc <vPortExitCritical>

	return xReturn;
 8006272:	68fb      	ldr	r3, [r7, #12]
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006284:	f001 fb6a 	bl	800795c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	429a      	cmp	r2, r3
 8006292:	d102      	bne.n	800629a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e001      	b.n	800629e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800629e:	f001 fb8d 	bl	80079bc <vPortExitCritical>

	return xReturn;
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e014      	b.n	80062e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062bc:	4a0e      	ldr	r2, [pc, #56]	; (80062f8 <vQueueAddToRegistry+0x4c>)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10b      	bne.n	80062e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062c8:	490b      	ldr	r1, [pc, #44]	; (80062f8 <vQueueAddToRegistry+0x4c>)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <vQueueAddToRegistry+0x4c>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062de:	e006      	b.n	80062ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b07      	cmp	r3, #7
 80062ea:	d9e7      	bls.n	80062bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	20004bb8 	.word	0x20004bb8

080062fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800630c:	f001 fb26 	bl	800795c <vPortEnterCritical>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006316:	b25b      	sxtb	r3, r3
 8006318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631c:	d103      	bne.n	8006326 <vQueueWaitForMessageRestricted+0x2a>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800632c:	b25b      	sxtb	r3, r3
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d103      	bne.n	800633c <vQueueWaitForMessageRestricted+0x40>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800633c:	f001 fb3e 	bl	80079bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	d106      	bne.n	8006356 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fc31 	bl	8006bb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006356:	6978      	ldr	r0, [r7, #20]
 8006358:	f7ff ff28 	bl	80061ac <prvUnlockQueue>
	}
 800635c:	bf00      	nop
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08e      	sub	sp, #56	; 0x38
 8006368:	af04      	add	r7, sp, #16
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
 8006370:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	623b      	str	r3, [r7, #32]
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <xTaskCreateStatic+0x46>
	__asm volatile
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f3bf 8f4f 	dsb	sy
 80063a4:	61fb      	str	r3, [r7, #28]
}
 80063a6:	bf00      	nop
 80063a8:	e7fe      	b.n	80063a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80063aa:	235c      	movs	r3, #92	; 0x5c
 80063ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b5c      	cmp	r3, #92	; 0x5c
 80063b2:	d00a      	beq.n	80063ca <xTaskCreateStatic+0x66>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	61bb      	str	r3, [r7, #24]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01e      	beq.n	800640e <xTaskCreateStatic+0xaa>
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01b      	beq.n	800640e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063e8:	2300      	movs	r3, #0
 80063ea:	9303      	str	r3, [sp, #12]
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	9302      	str	r3, [sp, #8]
 80063f0:	f107 0314 	add.w	r3, r7, #20
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	68b9      	ldr	r1, [r7, #8]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f850 	bl	80064a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006406:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006408:	f000 f8d4 	bl	80065b4 <prvAddNewTaskToReadyList>
 800640c:	e001      	b.n	8006412 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006412:	697b      	ldr	r3, [r7, #20]
	}
 8006414:	4618      	mov	r0, r3
 8006416:	3728      	adds	r7, #40	; 0x28
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08c      	sub	sp, #48	; 0x30
 8006420:	af04      	add	r7, sp, #16
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800642c:	88fb      	ldrh	r3, [r7, #6]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f001 fb93 	bl	8007b5c <pvPortMalloc>
 8006436:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800643e:	205c      	movs	r0, #92	; 0x5c
 8006440:	f001 fb8c 	bl	8007b5c <pvPortMalloc>
 8006444:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
 8006452:	e005      	b.n	8006460 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006454:	6978      	ldr	r0, [r7, #20]
 8006456:	f001 fc45 	bl	8007ce4 <vPortFree>
 800645a:	e001      	b.n	8006460 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d017      	beq.n	8006496 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	2300      	movs	r3, #0
 8006472:	9303      	str	r3, [sp, #12]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	9302      	str	r3, [sp, #8]
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	9301      	str	r3, [sp, #4]
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f80e 	bl	80064a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800648a:	69f8      	ldr	r0, [r7, #28]
 800648c:	f000 f892 	bl	80065b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006490:	2301      	movs	r3, #1
 8006492:	61bb      	str	r3, [r7, #24]
 8006494:	e002      	b.n	800649c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006496:	f04f 33ff 	mov.w	r3, #4294967295
 800649a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800649c:	69bb      	ldr	r3, [r7, #24]
	}
 800649e:	4618      	mov	r0, r3
 80064a0:	3720      	adds	r7, #32
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b088      	sub	sp, #32
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	461a      	mov	r2, r3
 80064be:	21a5      	movs	r1, #165	; 0xa5
 80064c0:	f001 ff90 	bl	80083e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064ce:	3b01      	subs	r3, #1
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	f023 0307 	bic.w	r3, r3, #7
 80064dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <prvInitialiseNewTask+0x58>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	617b      	str	r3, [r7, #20]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064fe:	2300      	movs	r3, #0
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	e012      	b.n	800652a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	7819      	ldrb	r1, [r3, #0]
 800650c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	4413      	add	r3, r2
 8006512:	3334      	adds	r3, #52	; 0x34
 8006514:	460a      	mov	r2, r1
 8006516:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b0f      	cmp	r3, #15
 800652e:	d9e9      	bls.n	8006504 <prvInitialiseNewTask+0x5e>
 8006530:	e000      	b.n	8006534 <prvInitialiseNewTask+0x8e>
		{
			break;
 8006532:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b37      	cmp	r3, #55	; 0x37
 8006540:	d901      	bls.n	8006546 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006542:	2337      	movs	r3, #55	; 0x37
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800654a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800654c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006550:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	2200      	movs	r2, #0
 8006556:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	3304      	adds	r3, #4
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff f98c 	bl	800587a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	3318      	adds	r3, #24
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff f987 	bl	800587a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006570:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006580:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	2200      	movs	r2, #0
 8006586:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	69b8      	ldr	r0, [r7, #24]
 8006596:	f001 f8ef 	bl	8007778 <pxPortInitialiseStack>
 800659a:	4602      	mov	r2, r0
 800659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065ac:	bf00      	nop
 80065ae:	3720      	adds	r7, #32
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065bc:	f001 f9ce 	bl	800795c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065c0:	4b2d      	ldr	r3, [pc, #180]	; (8006678 <prvAddNewTaskToReadyList+0xc4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3301      	adds	r3, #1
 80065c6:	4a2c      	ldr	r2, [pc, #176]	; (8006678 <prvAddNewTaskToReadyList+0xc4>)
 80065c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ca:	4b2c      	ldr	r3, [pc, #176]	; (800667c <prvAddNewTaskToReadyList+0xc8>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065d2:	4a2a      	ldr	r2, [pc, #168]	; (800667c <prvAddNewTaskToReadyList+0xc8>)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065d8:	4b27      	ldr	r3, [pc, #156]	; (8006678 <prvAddNewTaskToReadyList+0xc4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d110      	bne.n	8006602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065e0:	f000 fc16 	bl	8006e10 <prvInitialiseTaskLists>
 80065e4:	e00d      	b.n	8006602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065e6:	4b26      	ldr	r3, [pc, #152]	; (8006680 <prvAddNewTaskToReadyList+0xcc>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065ee:	4b23      	ldr	r3, [pc, #140]	; (800667c <prvAddNewTaskToReadyList+0xc8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d802      	bhi.n	8006602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <prvAddNewTaskToReadyList+0xc8>)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006602:	4b20      	ldr	r3, [pc, #128]	; (8006684 <prvAddNewTaskToReadyList+0xd0>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	4a1e      	ldr	r2, [pc, #120]	; (8006684 <prvAddNewTaskToReadyList+0xd0>)
 800660a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <prvAddNewTaskToReadyList+0xd0>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <prvAddNewTaskToReadyList+0xd4>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d903      	bls.n	8006628 <prvAddNewTaskToReadyList+0x74>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	4a18      	ldr	r2, [pc, #96]	; (8006688 <prvAddNewTaskToReadyList+0xd4>)
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <prvAddNewTaskToReadyList+0xd8>)
 8006636:	441a      	add	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	3304      	adds	r3, #4
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f7ff f927 	bl	8005892 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006644:	f001 f9ba 	bl	80079bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006648:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <prvAddNewTaskToReadyList+0xcc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <prvAddNewTaskToReadyList+0xc8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	429a      	cmp	r2, r3
 800665c:	d207      	bcs.n	800666e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800665e:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <prvAddNewTaskToReadyList+0xdc>)
 8006660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000d9c 	.word	0x20000d9c
 800667c:	200008c8 	.word	0x200008c8
 8006680:	20000da8 	.word	0x20000da8
 8006684:	20000db8 	.word	0x20000db8
 8006688:	20000da4 	.word	0x20000da4
 800668c:	200008cc 	.word	0x200008cc
 8006690:	e000ed04 	.word	0xe000ed04

08006694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <vTaskDelay+0x60>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <vTaskDelay+0x30>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60bb      	str	r3, [r7, #8]
}
 80066c0:	bf00      	nop
 80066c2:	e7fe      	b.n	80066c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066c4:	f000 f880 	bl	80067c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066c8:	2100      	movs	r1, #0
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fcee 	bl	80070ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066d0:	f000 f888 	bl	80067e4 <xTaskResumeAll>
 80066d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d107      	bne.n	80066ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066dc:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <vTaskDelay+0x64>)
 80066de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000dc4 	.word	0x20000dc4
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006706:	2300      	movs	r3, #0
 8006708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800670a:	463a      	mov	r2, r7
 800670c:	1d39      	adds	r1, r7, #4
 800670e:	f107 0308 	add.w	r3, r7, #8
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff f860 	bl	80057d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	9202      	str	r2, [sp, #8]
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	2300      	movs	r3, #0
 8006728:	460a      	mov	r2, r1
 800672a:	4921      	ldr	r1, [pc, #132]	; (80067b0 <vTaskStartScheduler+0xb4>)
 800672c:	4821      	ldr	r0, [pc, #132]	; (80067b4 <vTaskStartScheduler+0xb8>)
 800672e:	f7ff fe19 	bl	8006364 <xTaskCreateStatic>
 8006732:	4603      	mov	r3, r0
 8006734:	4a20      	ldr	r2, [pc, #128]	; (80067b8 <vTaskStartScheduler+0xbc>)
 8006736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006738:	4b1f      	ldr	r3, [pc, #124]	; (80067b8 <vTaskStartScheduler+0xbc>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006740:	2301      	movs	r3, #1
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e001      	b.n	800674a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d102      	bne.n	8006756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006750:	f000 fd00 	bl	8007154 <xTimerCreateTimerTask>
 8006754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d116      	bne.n	800678a <vTaskStartScheduler+0x8e>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	613b      	str	r3, [r7, #16]
}
 800676e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <vTaskStartScheduler+0xc0>)
 8006772:	f04f 32ff 	mov.w	r2, #4294967295
 8006776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006778:	4b11      	ldr	r3, [pc, #68]	; (80067c0 <vTaskStartScheduler+0xc4>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800677e:	4b11      	ldr	r3, [pc, #68]	; (80067c4 <vTaskStartScheduler+0xc8>)
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006784:	f001 f878 	bl	8007878 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006788:	e00e      	b.n	80067a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d10a      	bne.n	80067a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	60fb      	str	r3, [r7, #12]
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <vTaskStartScheduler+0xaa>
}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	0800b4c4 	.word	0x0800b4c4
 80067b4:	08006de1 	.word	0x08006de1
 80067b8:	20000dc0 	.word	0x20000dc0
 80067bc:	20000dbc 	.word	0x20000dbc
 80067c0:	20000da8 	.word	0x20000da8
 80067c4:	20000da0 	.word	0x20000da0

080067c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067cc:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <vTaskSuspendAll+0x18>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	4a03      	ldr	r2, [pc, #12]	; (80067e0 <vTaskSuspendAll+0x18>)
 80067d4:	6013      	str	r3, [r2, #0]
}
 80067d6:	bf00      	nop
 80067d8:	46bd      	mov	sp, r7
 80067da:	bc80      	pop	{r7}
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20000dc4 	.word	0x20000dc4

080067e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067f2:	4b42      	ldr	r3, [pc, #264]	; (80068fc <xTaskResumeAll+0x118>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <xTaskResumeAll+0x2c>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	603b      	str	r3, [r7, #0]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006810:	f001 f8a4 	bl	800795c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006814:	4b39      	ldr	r3, [pc, #228]	; (80068fc <xTaskResumeAll+0x118>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3b01      	subs	r3, #1
 800681a:	4a38      	ldr	r2, [pc, #224]	; (80068fc <xTaskResumeAll+0x118>)
 800681c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800681e:	4b37      	ldr	r3, [pc, #220]	; (80068fc <xTaskResumeAll+0x118>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d162      	bne.n	80068ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006826:	4b36      	ldr	r3, [pc, #216]	; (8006900 <xTaskResumeAll+0x11c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d05e      	beq.n	80068ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800682e:	e02f      	b.n	8006890 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006830:	4b34      	ldr	r3, [pc, #208]	; (8006904 <xTaskResumeAll+0x120>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3318      	adds	r3, #24
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff f883 	bl	8005948 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff f87e 	bl	8005948 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <xTaskResumeAll+0x124>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d903      	bls.n	8006860 <xTaskResumeAll+0x7c>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	4a2a      	ldr	r2, [pc, #168]	; (8006908 <xTaskResumeAll+0x124>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4a27      	ldr	r2, [pc, #156]	; (800690c <xTaskResumeAll+0x128>)
 800686e:	441a      	add	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7ff f80b 	bl	8005892 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	4b23      	ldr	r3, [pc, #140]	; (8006910 <xTaskResumeAll+0x12c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	429a      	cmp	r2, r3
 8006888:	d302      	bcc.n	8006890 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <xTaskResumeAll+0x130>)
 800688c:	2201      	movs	r2, #1
 800688e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006890:	4b1c      	ldr	r3, [pc, #112]	; (8006904 <xTaskResumeAll+0x120>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1cb      	bne.n	8006830 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800689e:	f000 fb55 	bl	8006f4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <xTaskResumeAll+0x134>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068ae:	f000 f845 	bl	800693c <xTaskIncrementTick>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80068b8:	4b16      	ldr	r3, [pc, #88]	; (8006914 <xTaskResumeAll+0x130>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3b01      	subs	r3, #1
 80068c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f1      	bne.n	80068ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80068ca:	4b13      	ldr	r3, [pc, #76]	; (8006918 <xTaskResumeAll+0x134>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068d0:	4b10      	ldr	r3, [pc, #64]	; (8006914 <xTaskResumeAll+0x130>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <xTaskResumeAll+0x138>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ec:	f001 f866 	bl	80079bc <vPortExitCritical>

	return xAlreadyYielded;
 80068f0:	68bb      	ldr	r3, [r7, #8]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20000dc4 	.word	0x20000dc4
 8006900:	20000d9c 	.word	0x20000d9c
 8006904:	20000d5c 	.word	0x20000d5c
 8006908:	20000da4 	.word	0x20000da4
 800690c:	200008cc 	.word	0x200008cc
 8006910:	200008c8 	.word	0x200008c8
 8006914:	20000db0 	.word	0x20000db0
 8006918:	20000dac 	.word	0x20000dac
 800691c:	e000ed04 	.word	0xe000ed04

08006920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006926:	4b04      	ldr	r3, [pc, #16]	; (8006938 <xTaskGetTickCount+0x18>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800692c:	687b      	ldr	r3, [r7, #4]
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	20000da0 	.word	0x20000da0

0800693c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006942:	2300      	movs	r3, #0
 8006944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006946:	4b51      	ldr	r3, [pc, #324]	; (8006a8c <xTaskIncrementTick+0x150>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 808e 	bne.w	8006a6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006950:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <xTaskIncrementTick+0x154>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006958:	4a4d      	ldr	r2, [pc, #308]	; (8006a90 <xTaskIncrementTick+0x154>)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d120      	bne.n	80069a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006964:	4b4b      	ldr	r3, [pc, #300]	; (8006a94 <xTaskIncrementTick+0x158>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <xTaskIncrementTick+0x48>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	603b      	str	r3, [r7, #0]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <xTaskIncrementTick+0x46>
 8006984:	4b43      	ldr	r3, [pc, #268]	; (8006a94 <xTaskIncrementTick+0x158>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <xTaskIncrementTick+0x15c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a41      	ldr	r2, [pc, #260]	; (8006a94 <xTaskIncrementTick+0x158>)
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	4a41      	ldr	r2, [pc, #260]	; (8006a98 <xTaskIncrementTick+0x15c>)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	4b40      	ldr	r3, [pc, #256]	; (8006a9c <xTaskIncrementTick+0x160>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3301      	adds	r3, #1
 800699e:	4a3f      	ldr	r2, [pc, #252]	; (8006a9c <xTaskIncrementTick+0x160>)
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	f000 fad3 	bl	8006f4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069a6:	4b3e      	ldr	r3, [pc, #248]	; (8006aa0 <xTaskIncrementTick+0x164>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d34e      	bcc.n	8006a4e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b0:	4b38      	ldr	r3, [pc, #224]	; (8006a94 <xTaskIncrementTick+0x158>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d101      	bne.n	80069be <xTaskIncrementTick+0x82>
 80069ba:	2301      	movs	r3, #1
 80069bc:	e000      	b.n	80069c0 <xTaskIncrementTick+0x84>
 80069be:	2300      	movs	r3, #0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069c4:	4b36      	ldr	r3, [pc, #216]	; (8006aa0 <xTaskIncrementTick+0x164>)
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	601a      	str	r2, [r3, #0]
					break;
 80069cc:	e03f      	b.n	8006a4e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80069ce:	4b31      	ldr	r3, [pc, #196]	; (8006a94 <xTaskIncrementTick+0x158>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d203      	bcs.n	80069ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069e6:	4a2e      	ldr	r2, [pc, #184]	; (8006aa0 <xTaskIncrementTick+0x164>)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6013      	str	r3, [r2, #0]
						break;
 80069ec:	e02f      	b.n	8006a4e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fe ffa8 	bl	8005948 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	3318      	adds	r3, #24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe ff9f 	bl	8005948 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	4b25      	ldr	r3, [pc, #148]	; (8006aa4 <xTaskIncrementTick+0x168>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d903      	bls.n	8006a1e <xTaskIncrementTick+0xe2>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	4a22      	ldr	r2, [pc, #136]	; (8006aa4 <xTaskIncrementTick+0x168>)
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4a1f      	ldr	r2, [pc, #124]	; (8006aa8 <xTaskIncrementTick+0x16c>)
 8006a2c:	441a      	add	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f7fe ff2c 	bl	8005892 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3e:	4b1b      	ldr	r3, [pc, #108]	; (8006aac <xTaskIncrementTick+0x170>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d3b3      	bcc.n	80069b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a4c:	e7b0      	b.n	80069b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a4e:	4b17      	ldr	r3, [pc, #92]	; (8006aac <xTaskIncrementTick+0x170>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a54:	4914      	ldr	r1, [pc, #80]	; (8006aa8 <xTaskIncrementTick+0x16c>)
 8006a56:	4613      	mov	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4413      	add	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	440b      	add	r3, r1
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d907      	bls.n	8006a76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006a66:	2301      	movs	r3, #1
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e004      	b.n	8006a76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a6c:	4b10      	ldr	r3, [pc, #64]	; (8006ab0 <xTaskIncrementTick+0x174>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a0f      	ldr	r2, [pc, #60]	; (8006ab0 <xTaskIncrementTick+0x174>)
 8006a74:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <xTaskIncrementTick+0x178>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a82:	697b      	ldr	r3, [r7, #20]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	20000dc4 	.word	0x20000dc4
 8006a90:	20000da0 	.word	0x20000da0
 8006a94:	20000d54 	.word	0x20000d54
 8006a98:	20000d58 	.word	0x20000d58
 8006a9c:	20000db4 	.word	0x20000db4
 8006aa0:	20000dbc 	.word	0x20000dbc
 8006aa4:	20000da4 	.word	0x20000da4
 8006aa8:	200008cc 	.word	0x200008cc
 8006aac:	200008c8 	.word	0x200008c8
 8006ab0:	20000dac 	.word	0x20000dac
 8006ab4:	20000db0 	.word	0x20000db0

08006ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006abe:	4b27      	ldr	r3, [pc, #156]	; (8006b5c <vTaskSwitchContext+0xa4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006ac6:	4b26      	ldr	r3, [pc, #152]	; (8006b60 <vTaskSwitchContext+0xa8>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006acc:	e041      	b.n	8006b52 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <vTaskSwitchContext+0xa8>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ad4:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <vTaskSwitchContext+0xac>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	e010      	b.n	8006afe <vTaskSwitchContext+0x46>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	607b      	str	r3, [r7, #4]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vTaskSwitchContext+0x3e>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	491a      	ldr	r1, [pc, #104]	; (8006b68 <vTaskSwitchContext+0xb0>)
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4613      	mov	r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	440b      	add	r3, r1
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0e4      	beq.n	8006adc <vTaskSwitchContext+0x24>
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4613      	mov	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4a12      	ldr	r2, [pc, #72]	; (8006b68 <vTaskSwitchContext+0xb0>)
 8006b1e:	4413      	add	r3, r2
 8006b20:	60bb      	str	r3, [r7, #8]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	3308      	adds	r3, #8
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d104      	bne.n	8006b42 <vTaskSwitchContext+0x8a>
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <vTaskSwitchContext+0xb4>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4a05      	ldr	r2, [pc, #20]	; (8006b64 <vTaskSwitchContext+0xac>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6013      	str	r3, [r2, #0]
}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	20000dc4 	.word	0x20000dc4
 8006b60:	20000db0 	.word	0x20000db0
 8006b64:	20000da4 	.word	0x20000da4
 8006b68:	200008cc 	.word	0x200008cc
 8006b6c:	200008c8 	.word	0x200008c8

08006b70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	60fb      	str	r3, [r7, #12]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b96:	4b07      	ldr	r3, [pc, #28]	; (8006bb4 <vTaskPlaceOnEventList+0x44>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fe fe9a 	bl	80058d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6838      	ldr	r0, [r7, #0]
 8006ba8:	f000 fa80 	bl	80070ac <prvAddCurrentTaskToDelayedList>
}
 8006bac:	bf00      	nop
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	200008c8 	.word	0x200008c8

08006bb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	617b      	str	r3, [r7, #20]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006be0:	4b0a      	ldr	r3, [pc, #40]	; (8006c0c <vTaskPlaceOnEventListRestricted+0x54>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3318      	adds	r3, #24
 8006be6:	4619      	mov	r1, r3
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7fe fe52 	bl	8005892 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	68b8      	ldr	r0, [r7, #8]
 8006bfe:	f000 fa55 	bl	80070ac <prvAddCurrentTaskToDelayedList>
	}
 8006c02:	bf00      	nop
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	200008c8 	.word	0x200008c8

08006c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60fb      	str	r3, [r7, #12]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	3318      	adds	r3, #24
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fe fe81 	bl	8005948 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c46:	4b1e      	ldr	r3, [pc, #120]	; (8006cc0 <xTaskRemoveFromEventList+0xb0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d11d      	bne.n	8006c8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fe fe78 	bl	8005948 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <xTaskRemoveFromEventList+0xb4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <xTaskRemoveFromEventList+0x5c>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <xTaskRemoveFromEventList+0xb4>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <xTaskRemoveFromEventList+0xb8>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7fe fe05 	bl	8005892 <vListInsertEnd>
 8006c88:	e005      	b.n	8006c96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3318      	adds	r3, #24
 8006c8e:	4619      	mov	r1, r3
 8006c90:	480e      	ldr	r0, [pc, #56]	; (8006ccc <xTaskRemoveFromEventList+0xbc>)
 8006c92:	f7fe fdfe 	bl	8005892 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <xTaskRemoveFromEventList+0xc0>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d905      	bls.n	8006cb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <xTaskRemoveFromEventList+0xc4>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	601a      	str	r2, [r3, #0]
 8006cae:	e001      	b.n	8006cb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006cb4:	697b      	ldr	r3, [r7, #20]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000dc4 	.word	0x20000dc4
 8006cc4:	20000da4 	.word	0x20000da4
 8006cc8:	200008cc 	.word	0x200008cc
 8006ccc:	20000d5c 	.word	0x20000d5c
 8006cd0:	200008c8 	.word	0x200008c8
 8006cd4:	20000db0 	.word	0x20000db0

08006cd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <vTaskInternalSetTimeOutState+0x24>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <vTaskInternalSetTimeOutState+0x28>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	605a      	str	r2, [r3, #4]
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000db4 	.word	0x20000db4
 8006d00:	20000da0 	.word	0x20000da0

08006d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	613b      	str	r3, [r7, #16]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d46:	f000 fe09 	bl	800795c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d4a:	4b1d      	ldr	r3, [pc, #116]	; (8006dc0 <xTaskCheckForTimeOut+0xbc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d62:	d102      	bne.n	8006d6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61fb      	str	r3, [r7, #28]
 8006d68:	e023      	b.n	8006db2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <xTaskCheckForTimeOut+0xc0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d007      	beq.n	8006d86 <xTaskCheckForTimeOut+0x82>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d302      	bcc.n	8006d86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d80:	2301      	movs	r3, #1
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e015      	b.n	8006db2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d20b      	bcs.n	8006da8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ff9b 	bl	8006cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	e004      	b.n	8006db2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006db2:	f000 fe03 	bl	80079bc <vPortExitCritical>

	return xReturn;
 8006db6:	69fb      	ldr	r3, [r7, #28]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000da0 	.word	0x20000da0
 8006dc4:	20000db4 	.word	0x20000db4

08006dc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <vTaskMissedYield+0x14>)
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
}
 8006dd2:	bf00      	nop
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bc80      	pop	{r7}
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000db0 	.word	0x20000db0

08006de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006de8:	f000 f852 	bl	8006e90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <prvIdleTask+0x28>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d9f9      	bls.n	8006de8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006df4:	4b05      	ldr	r3, [pc, #20]	; (8006e0c <prvIdleTask+0x2c>)
 8006df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e04:	e7f0      	b.n	8006de8 <prvIdleTask+0x8>
 8006e06:	bf00      	nop
 8006e08:	200008cc 	.word	0x200008cc
 8006e0c:	e000ed04 	.word	0xe000ed04

08006e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e16:	2300      	movs	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]
 8006e1a:	e00c      	b.n	8006e36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4a12      	ldr	r2, [pc, #72]	; (8006e70 <prvInitialiseTaskLists+0x60>)
 8006e28:	4413      	add	r3, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fd06 	bl	800583c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3301      	adds	r3, #1
 8006e34:	607b      	str	r3, [r7, #4]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2b37      	cmp	r3, #55	; 0x37
 8006e3a:	d9ef      	bls.n	8006e1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e3c:	480d      	ldr	r0, [pc, #52]	; (8006e74 <prvInitialiseTaskLists+0x64>)
 8006e3e:	f7fe fcfd 	bl	800583c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e42:	480d      	ldr	r0, [pc, #52]	; (8006e78 <prvInitialiseTaskLists+0x68>)
 8006e44:	f7fe fcfa 	bl	800583c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e48:	480c      	ldr	r0, [pc, #48]	; (8006e7c <prvInitialiseTaskLists+0x6c>)
 8006e4a:	f7fe fcf7 	bl	800583c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e4e:	480c      	ldr	r0, [pc, #48]	; (8006e80 <prvInitialiseTaskLists+0x70>)
 8006e50:	f7fe fcf4 	bl	800583c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e54:	480b      	ldr	r0, [pc, #44]	; (8006e84 <prvInitialiseTaskLists+0x74>)
 8006e56:	f7fe fcf1 	bl	800583c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <prvInitialiseTaskLists+0x78>)
 8006e5c:	4a05      	ldr	r2, [pc, #20]	; (8006e74 <prvInitialiseTaskLists+0x64>)
 8006e5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e60:	4b0a      	ldr	r3, [pc, #40]	; (8006e8c <prvInitialiseTaskLists+0x7c>)
 8006e62:	4a05      	ldr	r2, [pc, #20]	; (8006e78 <prvInitialiseTaskLists+0x68>)
 8006e64:	601a      	str	r2, [r3, #0]
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200008cc 	.word	0x200008cc
 8006e74:	20000d2c 	.word	0x20000d2c
 8006e78:	20000d40 	.word	0x20000d40
 8006e7c:	20000d5c 	.word	0x20000d5c
 8006e80:	20000d70 	.word	0x20000d70
 8006e84:	20000d88 	.word	0x20000d88
 8006e88:	20000d54 	.word	0x20000d54
 8006e8c:	20000d58 	.word	0x20000d58

08006e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e96:	e019      	b.n	8006ecc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e98:	f000 fd60 	bl	800795c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e9c:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <prvCheckTasksWaitingTermination+0x50>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fd4d 	bl	8005948 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <prvCheckTasksWaitingTermination+0x54>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	4a0b      	ldr	r2, [pc, #44]	; (8006ee4 <prvCheckTasksWaitingTermination+0x54>)
 8006eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006eb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <prvCheckTasksWaitingTermination+0x58>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <prvCheckTasksWaitingTermination+0x58>)
 8006ec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ec2:	f000 fd7b 	bl	80079bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 f810 	bl	8006eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <prvCheckTasksWaitingTermination+0x58>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e1      	bne.n	8006e98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000d70 	.word	0x20000d70
 8006ee4:	20000d9c 	.word	0x20000d9c
 8006ee8:	20000d84 	.word	0x20000d84

08006eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d108      	bne.n	8006f10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 feee 	bl	8007ce4 <vPortFree>
				vPortFree( pxTCB );
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 feeb 	bl	8007ce4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f0e:	e018      	b.n	8006f42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d103      	bne.n	8006f22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 fee2 	bl	8007ce4 <vPortFree>
	}
 8006f20:	e00f      	b.n	8006f42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d00a      	beq.n	8006f42 <prvDeleteTCB+0x56>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60fb      	str	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	e7fe      	b.n	8006f40 <prvDeleteTCB+0x54>
	}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f52:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <prvResetNextTaskUnblockTime+0x40>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <prvResetNextTaskUnblockTime+0x14>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <prvResetNextTaskUnblockTime+0x16>
 8006f60:	2300      	movs	r3, #0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f66:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <prvResetNextTaskUnblockTime+0x44>)
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f6e:	e008      	b.n	8006f82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006f70:	4b06      	ldr	r3, [pc, #24]	; (8006f8c <prvResetNextTaskUnblockTime+0x40>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	4a04      	ldr	r2, [pc, #16]	; (8006f90 <prvResetNextTaskUnblockTime+0x44>)
 8006f80:	6013      	str	r3, [r2, #0]
}
 8006f82:	bf00      	nop
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bc80      	pop	{r7}
 8006f8a:	4770      	bx	lr
 8006f8c:	20000d54 	.word	0x20000d54
 8006f90:	20000dbc 	.word	0x20000dbc

08006f94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f9a:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <xTaskGetSchedulerState+0x34>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	607b      	str	r3, [r7, #4]
 8006fa6:	e008      	b.n	8006fba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa8:	4b08      	ldr	r3, [pc, #32]	; (8006fcc <xTaskGetSchedulerState+0x38>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	e001      	b.n	8006fba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fba:	687b      	ldr	r3, [r7, #4]
	}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000da8 	.word	0x20000da8
 8006fcc:	20000dc4 	.word	0x20000dc4

08006fd0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d056      	beq.n	8007094 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fe6:	4b2e      	ldr	r3, [pc, #184]	; (80070a0 <xTaskPriorityDisinherit+0xd0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d00a      	beq.n	8007006 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10a      	bne.n	8007024 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	60bb      	str	r3, [r7, #8]
}
 8007020:	bf00      	nop
 8007022:	e7fe      	b.n	8007022 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007036:	429a      	cmp	r2, r3
 8007038:	d02c      	beq.n	8007094 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703e:	2b00      	cmp	r3, #0
 8007040:	d128      	bne.n	8007094 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	3304      	adds	r3, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fc7e 	bl	8005948 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007064:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <xTaskPriorityDisinherit+0xd4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d903      	bls.n	8007074 <xTaskPriorityDisinherit+0xa4>
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	4a0c      	ldr	r2, [pc, #48]	; (80070a4 <xTaskPriorityDisinherit+0xd4>)
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <xTaskPriorityDisinherit+0xd8>)
 8007082:	441a      	add	r2, r3
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	3304      	adds	r3, #4
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f7fe fc01 	bl	8005892 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007090:	2301      	movs	r3, #1
 8007092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007094:	697b      	ldr	r3, [r7, #20]
	}
 8007096:	4618      	mov	r0, r3
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200008c8 	.word	0x200008c8
 80070a4:	20000da4 	.word	0x20000da4
 80070a8:	200008cc 	.word	0x200008cc

080070ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070b6:	4b21      	ldr	r3, [pc, #132]	; (800713c <prvAddCurrentTaskToDelayedList+0x90>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070bc:	4b20      	ldr	r3, [pc, #128]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	3304      	adds	r3, #4
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fc40 	bl	8005948 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d10a      	bne.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070d6:	4b1a      	ldr	r3, [pc, #104]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3304      	adds	r3, #4
 80070dc:	4619      	mov	r1, r3
 80070de:	4819      	ldr	r0, [pc, #100]	; (8007144 <prvAddCurrentTaskToDelayedList+0x98>)
 80070e0:	f7fe fbd7 	bl	8005892 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070e4:	e026      	b.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070ee:	4b14      	ldr	r3, [pc, #80]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d209      	bcs.n	8007112 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3304      	adds	r3, #4
 8007108:	4619      	mov	r1, r3
 800710a:	4610      	mov	r0, r2
 800710c:	f7fe fbe4 	bl	80058d8 <vListInsert>
}
 8007110:	e010      	b.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007112:	4b0e      	ldr	r3, [pc, #56]	; (800714c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <prvAddCurrentTaskToDelayedList+0x94>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f7fe fbda 	bl	80058d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007124:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	d202      	bcs.n	8007134 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800712e:	4a08      	ldr	r2, [pc, #32]	; (8007150 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6013      	str	r3, [r2, #0]
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000da0 	.word	0x20000da0
 8007140:	200008c8 	.word	0x200008c8
 8007144:	20000d88 	.word	0x20000d88
 8007148:	20000d58 	.word	0x20000d58
 800714c:	20000d54 	.word	0x20000d54
 8007150:	20000dbc 	.word	0x20000dbc

08007154 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800715e:	f000 facb 	bl	80076f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <xTimerCreateTimerTask+0x80>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d021      	beq.n	80071ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007172:	1d3a      	adds	r2, r7, #4
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fb43 	bl	8005808 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	9202      	str	r2, [sp, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	2302      	movs	r3, #2
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	460a      	mov	r2, r1
 8007194:	4910      	ldr	r1, [pc, #64]	; (80071d8 <xTimerCreateTimerTask+0x84>)
 8007196:	4811      	ldr	r0, [pc, #68]	; (80071dc <xTimerCreateTimerTask+0x88>)
 8007198:	f7ff f8e4 	bl	8006364 <xTaskCreateStatic>
 800719c:	4603      	mov	r3, r0
 800719e:	4a10      	ldr	r2, [pc, #64]	; (80071e0 <xTimerCreateTimerTask+0x8c>)
 80071a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80071a2:	4b0f      	ldr	r3, [pc, #60]	; (80071e0 <xTimerCreateTimerTask+0x8c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80071aa:	2301      	movs	r3, #1
 80071ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	613b      	str	r3, [r7, #16]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80071ca:	697b      	ldr	r3, [r7, #20]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000df8 	.word	0x20000df8
 80071d8:	0800b4cc 	.word	0x0800b4cc
 80071dc:	08007301 	.word	0x08007301
 80071e0:	20000dfc 	.word	0x20000dfc

080071e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	; 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xTimerGenericCommand+0x2e>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	623b      	str	r3, [r7, #32]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007212:	4b1a      	ldr	r3, [pc, #104]	; (800727c <xTimerGenericCommand+0x98>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d02a      	beq.n	8007270 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b05      	cmp	r3, #5
 800722a:	dc18      	bgt.n	800725e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800722c:	f7ff feb2 	bl	8006f94 <xTaskGetSchedulerState>
 8007230:	4603      	mov	r3, r0
 8007232:	2b02      	cmp	r3, #2
 8007234:	d109      	bne.n	800724a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007236:	4b11      	ldr	r3, [pc, #68]	; (800727c <xTimerGenericCommand+0x98>)
 8007238:	6818      	ldr	r0, [r3, #0]
 800723a:	f107 0110 	add.w	r1, r7, #16
 800723e:	2300      	movs	r3, #0
 8007240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007242:	f7fe fcad 	bl	8005ba0 <xQueueGenericSend>
 8007246:	6278      	str	r0, [r7, #36]	; 0x24
 8007248:	e012      	b.n	8007270 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800724a:	4b0c      	ldr	r3, [pc, #48]	; (800727c <xTimerGenericCommand+0x98>)
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	f107 0110 	add.w	r1, r7, #16
 8007252:	2300      	movs	r3, #0
 8007254:	2200      	movs	r2, #0
 8007256:	f7fe fca3 	bl	8005ba0 <xQueueGenericSend>
 800725a:	6278      	str	r0, [r7, #36]	; 0x24
 800725c:	e008      	b.n	8007270 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <xTimerGenericCommand+0x98>)
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f107 0110 	add.w	r1, r7, #16
 8007266:	2300      	movs	r3, #0
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	f7fe fd97 	bl	8005d9c <xQueueGenericSendFromISR>
 800726e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007272:	4618      	mov	r0, r3
 8007274:	3728      	adds	r7, #40	; 0x28
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000df8 	.word	0x20000df8

08007280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af02      	add	r7, sp, #8
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800728a:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <prvProcessExpiredTimer+0x7c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fb55 	bl	8005948 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d122      	bne.n	80072ec <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	18d1      	adds	r1, r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	6978      	ldr	r0, [r7, #20]
 80072b4:	f000 f8c8 	bl	8007448 <prvInsertTimerInActiveList>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d016      	beq.n	80072ec <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072be:	2300      	movs	r3, #0
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	2300      	movs	r3, #0
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	2100      	movs	r1, #0
 80072c8:	6978      	ldr	r0, [r7, #20]
 80072ca:	f7ff ff8b 	bl	80071e4 <xTimerGenericCommand>
 80072ce:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60fb      	str	r3, [r7, #12]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	6978      	ldr	r0, [r7, #20]
 80072f2:	4798      	blx	r3
}
 80072f4:	bf00      	nop
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000df0 	.word	0x20000df0

08007300 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4618      	mov	r0, r3
 800730e:	f000 f857 	bl	80073c0 <prvGetNextExpireTime>
 8007312:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4619      	mov	r1, r3
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f803 	bl	8007324 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800731e:	f000 f8d5 	bl	80074cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007322:	e7f1      	b.n	8007308 <prvTimerTask+0x8>

08007324 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800732e:	f7ff fa4b 	bl	80067c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007332:	f107 0308 	add.w	r3, r7, #8
 8007336:	4618      	mov	r0, r3
 8007338:	f000 f866 	bl	8007408 <prvSampleTimeNow>
 800733c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d130      	bne.n	80073a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <prvProcessTimerOrBlockTask+0x3c>
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	429a      	cmp	r2, r3
 8007350:	d806      	bhi.n	8007360 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007352:	f7ff fa47 	bl	80067e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007356:	68f9      	ldr	r1, [r7, #12]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ff91 	bl	8007280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800735e:	e024      	b.n	80073aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d008      	beq.n	8007378 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007366:	4b13      	ldr	r3, [pc, #76]	; (80073b4 <prvProcessTimerOrBlockTask+0x90>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <prvProcessTimerOrBlockTask+0x94>)
 800737a:	6818      	ldr	r0, [r3, #0]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	4619      	mov	r1, r3
 8007386:	f7fe ffb9 	bl	80062fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800738a:	f7ff fa2b 	bl	80067e4 <xTaskResumeAll>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007394:	4b09      	ldr	r3, [pc, #36]	; (80073bc <prvProcessTimerOrBlockTask+0x98>)
 8007396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	f3bf 8f6f 	isb	sy
}
 80073a4:	e001      	b.n	80073aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80073a6:	f7ff fa1d 	bl	80067e4 <xTaskResumeAll>
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000df4 	.word	0x20000df4
 80073b8:	20000df8 	.word	0x20000df8
 80073bc:	e000ed04 	.word	0xe000ed04

080073c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <prvGetNextExpireTime+0x44>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bf0c      	ite	eq
 80073d2:	2301      	moveq	r3, #1
 80073d4:	2300      	movne	r3, #0
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <prvGetNextExpireTime+0x44>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	e001      	b.n	80073f6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000df0 	.word	0x20000df0

08007408 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007410:	f7ff fa86 	bl	8006920 <xTaskGetTickCount>
 8007414:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007416:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <prvSampleTimeNow+0x3c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d205      	bcs.n	800742c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007420:	f000 f908 	bl	8007634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e002      	b.n	8007432 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007432:	4a04      	ldr	r2, [pc, #16]	; (8007444 <prvSampleTimeNow+0x3c>)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007438:	68fb      	ldr	r3, [r7, #12]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	20000e00 	.word	0x20000e00

08007448 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	429a      	cmp	r2, r3
 800746c:	d812      	bhi.n	8007494 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	1ad2      	subs	r2, r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e01b      	b.n	80074ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007482:	4b10      	ldr	r3, [pc, #64]	; (80074c4 <prvInsertTimerInActiveList+0x7c>)
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	3304      	adds	r3, #4
 800748a:	4619      	mov	r1, r3
 800748c:	4610      	mov	r0, r2
 800748e:	f7fe fa23 	bl	80058d8 <vListInsert>
 8007492:	e012      	b.n	80074ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d206      	bcs.n	80074aa <prvInsertTimerInActiveList+0x62>
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d302      	bcc.n	80074aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80074a4:	2301      	movs	r3, #1
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e007      	b.n	80074ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <prvInsertTimerInActiveList+0x80>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3304      	adds	r3, #4
 80074b2:	4619      	mov	r1, r3
 80074b4:	4610      	mov	r0, r2
 80074b6:	f7fe fa0f 	bl	80058d8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80074ba:	697b      	ldr	r3, [r7, #20]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3718      	adds	r7, #24
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000df4 	.word	0x20000df4
 80074c8:	20000df0 	.word	0x20000df0

080074cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08e      	sub	sp, #56	; 0x38
 80074d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074d2:	e09d      	b.n	8007610 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da18      	bge.n	800750c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074da:	1d3b      	adds	r3, r7, #4
 80074dc:	3304      	adds	r3, #4
 80074de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10a      	bne.n	80074fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	61fb      	str	r3, [r7, #28]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007502:	6850      	ldr	r0, [r2, #4]
 8007504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007506:	6892      	ldr	r2, [r2, #8]
 8007508:	4611      	mov	r1, r2
 800750a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	db7d      	blt.n	800760e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	695b      	ldr	r3, [r3, #20]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	3304      	adds	r3, #4
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fa10 	bl	8005948 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007528:	463b      	mov	r3, r7
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff ff6c 	bl	8007408 <prvSampleTimeNow>
 8007530:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b09      	cmp	r3, #9
 8007536:	d86b      	bhi.n	8007610 <prvProcessReceivedCommands+0x144>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <prvProcessReceivedCommands+0x74>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007569 	.word	0x08007569
 8007544:	08007569 	.word	0x08007569
 8007548:	08007569 	.word	0x08007569
 800754c:	08007611 	.word	0x08007611
 8007550:	080075c5 	.word	0x080075c5
 8007554:	080075fd 	.word	0x080075fd
 8007558:	08007569 	.word	0x08007569
 800755c:	08007569 	.word	0x08007569
 8007560:	08007611 	.word	0x08007611
 8007564:	080075c5 	.word	0x080075c5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007568:	68ba      	ldr	r2, [r7, #8]
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	18d1      	adds	r1, r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007576:	f7ff ff67 	bl	8007448 <prvInsertTimerInActiveList>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d047      	beq.n	8007610 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007586:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d13f      	bne.n	8007610 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	441a      	add	r2, r3
 8007598:	2300      	movs	r3, #0
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	2100      	movs	r1, #0
 80075a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075a2:	f7ff fe1f 	bl	80071e4 <xTimerGenericCommand>
 80075a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d130      	bne.n	8007610 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	61bb      	str	r3, [r7, #24]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	617b      	str	r3, [r7, #20]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ea:	699a      	ldr	r2, [r3, #24]
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	18d1      	adds	r1, r2, r3
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f6:	f7ff ff27 	bl	8007448 <prvInsertTimerInActiveList>
					break;
 80075fa:	e009      	b.n	8007610 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007602:	2b00      	cmp	r3, #0
 8007604:	d104      	bne.n	8007610 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8007606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007608:	f000 fb6c 	bl	8007ce4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800760c:	e000      	b.n	8007610 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800760e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007610:	4b07      	ldr	r3, [pc, #28]	; (8007630 <prvProcessReceivedCommands+0x164>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	1d39      	adds	r1, r7, #4
 8007616:	2200      	movs	r2, #0
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe fc57 	bl	8005ecc <xQueueReceive>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f47f af57 	bne.w	80074d4 <prvProcessReceivedCommands+0x8>
	}
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	3730      	adds	r7, #48	; 0x30
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000df8 	.word	0x20000df8

08007634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800763a:	e045      	b.n	80076c8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800763c:	4b2c      	ldr	r3, [pc, #176]	; (80076f0 <prvSwitchTimerLists+0xbc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007646:	4b2a      	ldr	r3, [pc, #168]	; (80076f0 <prvSwitchTimerLists+0xbc>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3304      	adds	r3, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f7fe f977 	bl	8005948 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d12e      	bne.n	80076c8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4413      	add	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007674:	68ba      	ldr	r2, [r7, #8]
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	429a      	cmp	r2, r3
 800767a:	d90e      	bls.n	800769a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007688:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <prvSwitchTimerLists+0xbc>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fe f920 	bl	80058d8 <vListInsert>
 8007698:	e016      	b.n	80076c8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800769a:	2300      	movs	r3, #0
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	2300      	movs	r3, #0
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	2100      	movs	r1, #0
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fd9d 	bl	80071e4 <xTimerGenericCommand>
 80076aa:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10a      	bne.n	80076c8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	603b      	str	r3, [r7, #0]
}
 80076c4:	bf00      	nop
 80076c6:	e7fe      	b.n	80076c6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076c8:	4b09      	ldr	r3, [pc, #36]	; (80076f0 <prvSwitchTimerLists+0xbc>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1b4      	bne.n	800763c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076d2:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <prvSwitchTimerLists+0xbc>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076d8:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <prvSwitchTimerLists+0xc0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a04      	ldr	r2, [pc, #16]	; (80076f0 <prvSwitchTimerLists+0xbc>)
 80076de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80076e0:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <prvSwitchTimerLists+0xc0>)
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6013      	str	r3, [r2, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20000df0 	.word	0x20000df0
 80076f4:	20000df4 	.word	0x20000df4

080076f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80076fe:	f000 f92d 	bl	800795c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007702:	4b15      	ldr	r3, [pc, #84]	; (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d120      	bne.n	800774c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800770a:	4814      	ldr	r0, [pc, #80]	; (800775c <prvCheckForValidListAndQueue+0x64>)
 800770c:	f7fe f896 	bl	800583c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007710:	4813      	ldr	r0, [pc, #76]	; (8007760 <prvCheckForValidListAndQueue+0x68>)
 8007712:	f7fe f893 	bl	800583c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007716:	4b13      	ldr	r3, [pc, #76]	; (8007764 <prvCheckForValidListAndQueue+0x6c>)
 8007718:	4a10      	ldr	r2, [pc, #64]	; (800775c <prvCheckForValidListAndQueue+0x64>)
 800771a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800771c:	4b12      	ldr	r3, [pc, #72]	; (8007768 <prvCheckForValidListAndQueue+0x70>)
 800771e:	4a10      	ldr	r2, [pc, #64]	; (8007760 <prvCheckForValidListAndQueue+0x68>)
 8007720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007722:	2300      	movs	r3, #0
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4b11      	ldr	r3, [pc, #68]	; (800776c <prvCheckForValidListAndQueue+0x74>)
 8007728:	4a11      	ldr	r2, [pc, #68]	; (8007770 <prvCheckForValidListAndQueue+0x78>)
 800772a:	2110      	movs	r1, #16
 800772c:	200a      	movs	r0, #10
 800772e:	f7fe f99d 	bl	8005a6c <xQueueGenericCreateStatic>
 8007732:	4603      	mov	r3, r0
 8007734:	4a08      	ldr	r2, [pc, #32]	; (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007738:	4b07      	ldr	r3, [pc, #28]	; (8007758 <prvCheckForValidListAndQueue+0x60>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007740:	4b05      	ldr	r3, [pc, #20]	; (8007758 <prvCheckForValidListAndQueue+0x60>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	490b      	ldr	r1, [pc, #44]	; (8007774 <prvCheckForValidListAndQueue+0x7c>)
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fdb0 	bl	80062ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800774c:	f000 f936 	bl	80079bc <vPortExitCritical>
}
 8007750:	bf00      	nop
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000df8 	.word	0x20000df8
 800775c:	20000dc8 	.word	0x20000dc8
 8007760:	20000ddc 	.word	0x20000ddc
 8007764:	20000df0 	.word	0x20000df0
 8007768:	20000df4 	.word	0x20000df4
 800776c:	20000ea4 	.word	0x20000ea4
 8007770:	20000e04 	.word	0x20000e04
 8007774:	0800b4d4 	.word	0x0800b4d4

08007778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3b04      	subs	r3, #4
 8007788:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3b04      	subs	r3, #4
 8007796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3b04      	subs	r3, #4
 80077a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077a8:	4a08      	ldr	r2, [pc, #32]	; (80077cc <pxPortInitialiseStack+0x54>)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3b14      	subs	r3, #20
 80077b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3b20      	subs	r3, #32
 80077be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077c0:	68fb      	ldr	r3, [r7, #12]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	080077d1 	.word	0x080077d1

080077d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077da:	4b12      	ldr	r3, [pc, #72]	; (8007824 <prvTaskExitError+0x54>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e2:	d00a      	beq.n	80077fa <prvTaskExitError+0x2a>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	60fb      	str	r3, [r7, #12]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <prvTaskExitError+0x28>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60bb      	str	r3, [r7, #8]
}
 800780c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800780e:	bf00      	nop
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0fc      	beq.n	8007810 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	bc80      	pop	{r7}
 8007820:	4770      	bx	lr
 8007822:	bf00      	nop
 8007824:	2000000c 	.word	0x2000000c
	...

08007830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <pxCurrentTCBConst2>)
 8007832:	6819      	ldr	r1, [r3, #0]
 8007834:	6808      	ldr	r0, [r1, #0]
 8007836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800783a:	f380 8809 	msr	PSP, r0
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f04f 0000 	mov.w	r0, #0
 8007846:	f380 8811 	msr	BASEPRI, r0
 800784a:	f04e 0e0d 	orr.w	lr, lr, #13
 800784e:	4770      	bx	lr

08007850 <pxCurrentTCBConst2>:
 8007850:	200008c8 	.word	0x200008c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007854:	bf00      	nop
 8007856:	bf00      	nop

08007858 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007858:	4806      	ldr	r0, [pc, #24]	; (8007874 <prvPortStartFirstTask+0x1c>)
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	6800      	ldr	r0, [r0, #0]
 800785e:	f380 8808 	msr	MSP, r0
 8007862:	b662      	cpsie	i
 8007864:	b661      	cpsie	f
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	df00      	svc	0
 8007870:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007872:	bf00      	nop
 8007874:	e000ed08 	.word	0xe000ed08

08007878 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800787e:	4b32      	ldr	r3, [pc, #200]	; (8007948 <xPortStartScheduler+0xd0>)
 8007880:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	22ff      	movs	r2, #255	; 0xff
 800788e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <xPortStartScheduler+0xd4>)
 80078a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80078a6:	4b2a      	ldr	r3, [pc, #168]	; (8007950 <xPortStartScheduler+0xd8>)
 80078a8:	2207      	movs	r2, #7
 80078aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078ac:	e009      	b.n	80078c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80078ae:	4b28      	ldr	r3, [pc, #160]	; (8007950 <xPortStartScheduler+0xd8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	4a26      	ldr	r2, [pc, #152]	; (8007950 <xPortStartScheduler+0xd8>)
 80078b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80078b8:	78fb      	ldrb	r3, [r7, #3]
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ca:	2b80      	cmp	r3, #128	; 0x80
 80078cc:	d0ef      	beq.n	80078ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80078ce:	4b20      	ldr	r3, [pc, #128]	; (8007950 <xPortStartScheduler+0xd8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f1c3 0307 	rsb	r3, r3, #7
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d00a      	beq.n	80078f0 <xPortStartScheduler+0x78>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	60bb      	str	r3, [r7, #8]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80078f0:	4b17      	ldr	r3, [pc, #92]	; (8007950 <xPortStartScheduler+0xd8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	021b      	lsls	r3, r3, #8
 80078f6:	4a16      	ldr	r2, [pc, #88]	; (8007950 <xPortStartScheduler+0xd8>)
 80078f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <xPortStartScheduler+0xd8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007902:	4a13      	ldr	r2, [pc, #76]	; (8007950 <xPortStartScheduler+0xd8>)
 8007904:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	b2da      	uxtb	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800790e:	4b11      	ldr	r3, [pc, #68]	; (8007954 <xPortStartScheduler+0xdc>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a10      	ldr	r2, [pc, #64]	; (8007954 <xPortStartScheduler+0xdc>)
 8007914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007918:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800791a:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <xPortStartScheduler+0xdc>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a0d      	ldr	r2, [pc, #52]	; (8007954 <xPortStartScheduler+0xdc>)
 8007920:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007924:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007926:	f000 f8b9 	bl	8007a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <xPortStartScheduler+0xe0>)
 800792c:	2200      	movs	r2, #0
 800792e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007930:	f7ff ff92 	bl	8007858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007934:	f7ff f8c0 	bl	8006ab8 <vTaskSwitchContext>
	prvTaskExitError();
 8007938:	f7ff ff4a 	bl	80077d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	e000e400 	.word	0xe000e400
 800794c:	20000ef4 	.word	0x20000ef4
 8007950:	20000ef8 	.word	0x20000ef8
 8007954:	e000ed20 	.word	0xe000ed20
 8007958:	2000000c 	.word	0x2000000c

0800795c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	607b      	str	r3, [r7, #4]
}
 8007974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <vPortEnterCritical+0x58>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3301      	adds	r3, #1
 800797c:	4a0d      	ldr	r2, [pc, #52]	; (80079b4 <vPortEnterCritical+0x58>)
 800797e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007980:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <vPortEnterCritical+0x58>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d10f      	bne.n	80079a8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007988:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <vPortEnterCritical+0x5c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	603b      	str	r3, [r7, #0]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <vPortEnterCritical+0x4a>
	}
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	2000000c 	.word	0x2000000c
 80079b8:	e000ed04 	.word	0xe000ed04

080079bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079c2:	4b11      	ldr	r3, [pc, #68]	; (8007a08 <vPortExitCritical+0x4c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <vPortExitCritical+0x24>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	607b      	str	r3, [r7, #4]
}
 80079dc:	bf00      	nop
 80079de:	e7fe      	b.n	80079de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <vPortExitCritical+0x4c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	4a08      	ldr	r2, [pc, #32]	; (8007a08 <vPortExitCritical+0x4c>)
 80079e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079ea:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <vPortExitCritical+0x4c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d105      	bne.n	80079fe <vPortExitCritical+0x42>
 80079f2:	2300      	movs	r3, #0
 80079f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	f383 8811 	msr	BASEPRI, r3
}
 80079fc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bc80      	pop	{r7}
 8007a06:	4770      	bx	lr
 8007a08:	2000000c 	.word	0x2000000c
 8007a0c:	00000000 	.word	0x00000000

08007a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a10:	f3ef 8009 	mrs	r0, PSP
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <pxCurrentTCBConst>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a20:	6010      	str	r0, [r2, #0]
 8007a22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007a26:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a2a:	f380 8811 	msr	BASEPRI, r0
 8007a2e:	f7ff f843 	bl	8006ab8 <vTaskSwitchContext>
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8811 	msr	BASEPRI, r0
 8007a3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a3e:	6819      	ldr	r1, [r3, #0]
 8007a40:	6808      	ldr	r0, [r1, #0]
 8007a42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a46:	f380 8809 	msr	PSP, r0
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	4770      	bx	lr

08007a50 <pxCurrentTCBConst>:
 8007a50:	200008c8 	.word	0x200008c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop

08007a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	607b      	str	r3, [r7, #4]
}
 8007a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a72:	f7fe ff63 	bl	800693c <xTaskIncrementTick>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d003      	beq.n	8007a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <xPortSysTickHandler+0x40>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	f383 8811 	msr	BASEPRI, r3
}
 8007a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <vPortSetupTimerInterrupt+0x30>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aac:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <vPortSetupTimerInterrupt+0x38>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <vPortSetupTimerInterrupt+0x3c>)
 8007ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab6:	099b      	lsrs	r3, r3, #6
 8007ab8:	4a08      	ldr	r2, [pc, #32]	; (8007adc <vPortSetupTimerInterrupt+0x40>)
 8007aba:	3b01      	subs	r3, #1
 8007abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007abe:	4b03      	ldr	r3, [pc, #12]	; (8007acc <vPortSetupTimerInterrupt+0x30>)
 8007ac0:	2207      	movs	r2, #7
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr
 8007acc:	e000e010 	.word	0xe000e010
 8007ad0:	e000e018 	.word	0xe000e018
 8007ad4:	20000000 	.word	0x20000000
 8007ad8:	10624dd3 	.word	0x10624dd3
 8007adc:	e000e014 	.word	0xe000e014

08007ae0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ae6:	f3ef 8305 	mrs	r3, IPSR
 8007aea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b0f      	cmp	r3, #15
 8007af0:	d914      	bls.n	8007b1c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007af2:	4a16      	ldr	r2, [pc, #88]	; (8007b4c <vPortValidateInterruptPriority+0x6c>)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007afc:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <vPortValidateInterruptPriority+0x70>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	7afa      	ldrb	r2, [r7, #11]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d20a      	bcs.n	8007b1c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	607b      	str	r3, [r7, #4]
}
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	; (8007b54 <vPortValidateInterruptPriority+0x74>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007b24:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <vPortValidateInterruptPriority+0x78>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d90a      	bls.n	8007b42 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	603b      	str	r3, [r7, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <vPortValidateInterruptPriority+0x60>
	}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	e000e3f0 	.word	0xe000e3f0
 8007b50:	20000ef4 	.word	0x20000ef4
 8007b54:	e000ed0c 	.word	0xe000ed0c
 8007b58:	20000ef8 	.word	0x20000ef8

08007b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	; 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b68:	f7fe fe2e 	bl	80067c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b6c:	4b58      	ldr	r3, [pc, #352]	; (8007cd0 <pvPortMalloc+0x174>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b74:	f000 f910 	bl	8007d98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b78:	4b56      	ldr	r3, [pc, #344]	; (8007cd4 <pvPortMalloc+0x178>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f040 808e 	bne.w	8007ca2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01d      	beq.n	8007bc8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007b8c:	2208      	movs	r2, #8
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4413      	add	r3, r2
 8007b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f003 0307 	and.w	r3, r3, #7
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d014      	beq.n	8007bc8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <pvPortMalloc+0x6c>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	617b      	str	r3, [r7, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d069      	beq.n	8007ca2 <pvPortMalloc+0x146>
 8007bce:	4b42      	ldr	r3, [pc, #264]	; (8007cd8 <pvPortMalloc+0x17c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d864      	bhi.n	8007ca2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bd8:	4b40      	ldr	r3, [pc, #256]	; (8007cdc <pvPortMalloc+0x180>)
 8007bda:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bdc:	4b3f      	ldr	r3, [pc, #252]	; (8007cdc <pvPortMalloc+0x180>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007be2:	e004      	b.n	8007bee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d903      	bls.n	8007c00 <pvPortMalloc+0xa4>
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1f1      	bne.n	8007be4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c00:	4b33      	ldr	r3, [pc, #204]	; (8007cd0 <pvPortMalloc+0x174>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d04b      	beq.n	8007ca2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2208      	movs	r2, #8
 8007c10:	4413      	add	r3, r2
 8007c12:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	685a      	ldr	r2, [r3, #4]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	1ad2      	subs	r2, r2, r3
 8007c24:	2308      	movs	r3, #8
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	429a      	cmp	r2, r3
 8007c2a:	d91f      	bls.n	8007c6c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4413      	add	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	f003 0307 	and.w	r3, r3, #7
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <pvPortMalloc+0xf8>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	613b      	str	r3, [r7, #16]
}
 8007c50:	bf00      	nop
 8007c52:	e7fe      	b.n	8007c52 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	1ad2      	subs	r2, r2, r3
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c66:	69b8      	ldr	r0, [r7, #24]
 8007c68:	f000 f8f8 	bl	8007e5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c6c:	4b1a      	ldr	r3, [pc, #104]	; (8007cd8 <pvPortMalloc+0x17c>)
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	4a18      	ldr	r2, [pc, #96]	; (8007cd8 <pvPortMalloc+0x17c>)
 8007c78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c7a:	4b17      	ldr	r3, [pc, #92]	; (8007cd8 <pvPortMalloc+0x17c>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <pvPortMalloc+0x184>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d203      	bcs.n	8007c8e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c86:	4b14      	ldr	r3, [pc, #80]	; (8007cd8 <pvPortMalloc+0x17c>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a15      	ldr	r2, [pc, #84]	; (8007ce0 <pvPortMalloc+0x184>)
 8007c8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <pvPortMalloc+0x178>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	431a      	orrs	r2, r3
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ca2:	f7fe fd9f 	bl	80067e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <pvPortMalloc+0x16a>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <pvPortMalloc+0x168>
	return pvReturn;
 8007cc6:	69fb      	ldr	r3, [r7, #28]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3728      	adds	r7, #40	; 0x28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20002304 	.word	0x20002304
 8007cd4:	20002310 	.word	0x20002310
 8007cd8:	20002308 	.word	0x20002308
 8007cdc:	200022fc 	.word	0x200022fc
 8007ce0:	2000230c 	.word	0x2000230c

08007ce4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d048      	beq.n	8007d88 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	425b      	negs	r3, r3
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <vPortFree+0xac>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <vPortFree+0x44>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	60fb      	str	r3, [r7, #12]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <vPortFree+0x62>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	60bb      	str	r3, [r7, #8]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <vPortFree+0xac>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d019      	beq.n	8007d88 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d115      	bne.n	8007d88 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortFree+0xac>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	43db      	mvns	r3, r3
 8007d66:	401a      	ands	r2, r3
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d6c:	f7fe fd2c 	bl	80067c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <vPortFree+0xb0>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4413      	add	r3, r2
 8007d7a:	4a06      	ldr	r2, [pc, #24]	; (8007d94 <vPortFree+0xb0>)
 8007d7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007d7e:	6938      	ldr	r0, [r7, #16]
 8007d80:	f000 f86c 	bl	8007e5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007d84:	f7fe fd2e 	bl	80067e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007d88:	bf00      	nop
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20002310 	.word	0x20002310
 8007d94:	20002308 	.word	0x20002308

08007d98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007d9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007da2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007da4:	4b27      	ldr	r3, [pc, #156]	; (8007e44 <prvHeapInit+0xac>)
 8007da6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00c      	beq.n	8007dcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3307      	adds	r3, #7
 8007db6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f023 0307 	bic.w	r3, r3, #7
 8007dbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	4a1f      	ldr	r2, [pc, #124]	; (8007e44 <prvHeapInit+0xac>)
 8007dc8:	4413      	add	r3, r2
 8007dca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007dd0:	4a1d      	ldr	r2, [pc, #116]	; (8007e48 <prvHeapInit+0xb0>)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007dd6:	4b1c      	ldr	r3, [pc, #112]	; (8007e48 <prvHeapInit+0xb0>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	4413      	add	r3, r2
 8007de2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007de4:	2208      	movs	r2, #8
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	1a9b      	subs	r3, r3, r2
 8007dea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	4a15      	ldr	r2, [pc, #84]	; (8007e4c <prvHeapInit+0xb4>)
 8007df8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007dfa:	4b14      	ldr	r3, [pc, #80]	; (8007e4c <prvHeapInit+0xb4>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e02:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <prvHeapInit+0xb4>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e18:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <prvHeapInit+0xb4>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <prvHeapInit+0xb8>)
 8007e26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <prvHeapInit+0xbc>)
 8007e2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <prvHeapInit+0xc0>)
 8007e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e36:	601a      	str	r2, [r3, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000efc 	.word	0x20000efc
 8007e48:	200022fc 	.word	0x200022fc
 8007e4c:	20002304 	.word	0x20002304
 8007e50:	2000230c 	.word	0x2000230c
 8007e54:	20002308 	.word	0x20002308
 8007e58:	20002310 	.word	0x20002310

08007e5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e64:	4b27      	ldr	r3, [pc, #156]	; (8007f04 <prvInsertBlockIntoFreeList+0xa8>)
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	e002      	b.n	8007e70 <prvInsertBlockIntoFreeList+0x14>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d8f7      	bhi.n	8007e6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	4413      	add	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d108      	bne.n	8007e9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	441a      	add	r2, r3
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d118      	bne.n	8007ee4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	4b14      	ldr	r3, [pc, #80]	; (8007f08 <prvInsertBlockIntoFreeList+0xac>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d00d      	beq.n	8007eda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	441a      	add	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e008      	b.n	8007eec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <prvInsertBlockIntoFreeList+0xac>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	e003      	b.n	8007eec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d002      	beq.n	8007efa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr
 8007f04:	200022fc 	.word	0x200022fc
 8007f08:	20002304 	.word	0x20002304

08007f0c <OLED_Refresh_Gram>:
#include "stdlib.h"
#include "oledfont.h"  

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8007f12:	2300      	movs	r3, #0
 8007f14:	71fb      	strb	r3, [r7, #7]
 8007f16:	e026      	b.n	8007f66 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	3b50      	subs	r3, #80	; 0x50
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f82b 	bl	8007f7c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8007f26:	2100      	movs	r1, #0
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f000 f827 	bl	8007f7c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8007f2e:	2100      	movs	r1, #0
 8007f30:	2010      	movs	r0, #16
 8007f32:	f000 f823 	bl	8007f7c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8007f36:	2300      	movs	r3, #0
 8007f38:	71bb      	strb	r3, [r7, #6]
 8007f3a:	e00d      	b.n	8007f58 <OLED_Refresh_Gram+0x4c>
 8007f3c:	79ba      	ldrb	r2, [r7, #6]
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	490d      	ldr	r1, [pc, #52]	; (8007f78 <OLED_Refresh_Gram+0x6c>)
 8007f42:	00d2      	lsls	r2, r2, #3
 8007f44:	440a      	add	r2, r1
 8007f46:	4413      	add	r3, r2
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f815 	bl	8007f7c <OLED_WR_Byte>
 8007f52:	79bb      	ldrb	r3, [r7, #6]
 8007f54:	3301      	adds	r3, #1
 8007f56:	71bb      	strb	r3, [r7, #6]
 8007f58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	daed      	bge.n	8007f3c <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	3301      	adds	r3, #1
 8007f64:	71fb      	strb	r3, [r7, #7]
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	2b07      	cmp	r3, #7
 8007f6a:	d9d5      	bls.n	8007f18 <OLED_Refresh_Gram+0xc>
	}   
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20004bf8 	.word	0x20004bf8

08007f7c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	460a      	mov	r2, r1
 8007f86:	71fb      	strb	r3, [r7, #7]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8007f8c:	79bb      	ldrb	r3, [r7, #6]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d006      	beq.n	8007fa0 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8007f92:	2201      	movs	r2, #1
 8007f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007f98:	481c      	ldr	r0, [pc, #112]	; (800800c <OLED_WR_Byte+0x90>)
 8007f9a:	f7fb f993 	bl	80032c4 <HAL_GPIO_WritePin>
 8007f9e:	e005      	b.n	8007fac <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fa6:	4819      	ldr	r0, [pc, #100]	; (800800c <OLED_WR_Byte+0x90>)
 8007fa8:	f7fb f98c 	bl	80032c4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8007fac:	2300      	movs	r3, #0
 8007fae:	73fb      	strb	r3, [r7, #15]
 8007fb0:	e01e      	b.n	8007ff0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2120      	movs	r1, #32
 8007fb6:	4815      	ldr	r0, [pc, #84]	; (800800c <OLED_WR_Byte+0x90>)
 8007fb8:	f7fb f984 	bl	80032c4 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8007fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da05      	bge.n	8007fd0 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	2140      	movs	r1, #64	; 0x40
 8007fc8:	4810      	ldr	r0, [pc, #64]	; (800800c <OLED_WR_Byte+0x90>)
 8007fca:	f7fb f97b 	bl	80032c4 <HAL_GPIO_WritePin>
 8007fce:	e004      	b.n	8007fda <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2140      	movs	r1, #64	; 0x40
 8007fd4:	480d      	ldr	r0, [pc, #52]	; (800800c <OLED_WR_Byte+0x90>)
 8007fd6:	f7fb f975 	bl	80032c4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8007fda:	2201      	movs	r2, #1
 8007fdc:	2120      	movs	r1, #32
 8007fde:	480b      	ldr	r0, [pc, #44]	; (800800c <OLED_WR_Byte+0x90>)
 8007fe0:	f7fb f970 	bl	80032c4 <HAL_GPIO_WritePin>
		dat<<=1;   
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	3301      	adds	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	d9dd      	bls.n	8007fb2 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ffc:	4803      	ldr	r0, [pc, #12]	; (800800c <OLED_WR_Byte+0x90>)
 8007ffe:	f7fb f961 	bl	80032c4 <HAL_GPIO_WritePin>
} 
 8008002:	bf00      	nop
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40011800 	.word	0x40011800

08008010 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008016:	2300      	movs	r3, #0
 8008018:	71fb      	strb	r3, [r7, #7]
 800801a:	e014      	b.n	8008046 <OLED_Clear+0x36>
 800801c:	2300      	movs	r3, #0
 800801e:	71bb      	strb	r3, [r7, #6]
 8008020:	e00a      	b.n	8008038 <OLED_Clear+0x28>
 8008022:	79ba      	ldrb	r2, [r7, #6]
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	490c      	ldr	r1, [pc, #48]	; (8008058 <OLED_Clear+0x48>)
 8008028:	00d2      	lsls	r2, r2, #3
 800802a:	440a      	add	r2, r1
 800802c:	4413      	add	r3, r2
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	79bb      	ldrb	r3, [r7, #6]
 8008034:	3301      	adds	r3, #1
 8008036:	71bb      	strb	r3, [r7, #6]
 8008038:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	daf0      	bge.n	8008022 <OLED_Clear+0x12>
 8008040:	79fb      	ldrb	r3, [r7, #7]
 8008042:	3301      	adds	r3, #1
 8008044:	71fb      	strb	r3, [r7, #7]
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b07      	cmp	r3, #7
 800804a:	d9e7      	bls.n	800801c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800804c:	f7ff ff5e 	bl	8007f0c <OLED_Refresh_Gram>
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20004bf8 	.word	0x20004bf8

0800805c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
 8008066:	460b      	mov	r3, r1
 8008068:	71bb      	strb	r3, [r7, #6]
 800806a:	4613      	mov	r3, r2
 800806c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	2b00      	cmp	r3, #0
 8008078:	db41      	blt.n	80080fe <OLED_DrawPoint+0xa2>
 800807a:	79bb      	ldrb	r3, [r7, #6]
 800807c:	2b3f      	cmp	r3, #63	; 0x3f
 800807e:	d83e      	bhi.n	80080fe <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8008080:	79bb      	ldrb	r3, [r7, #6]
 8008082:	08db      	lsrs	r3, r3, #3
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f1c3 0307 	rsb	r3, r3, #7
 800808a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800808c:	79bb      	ldrb	r3, [r7, #6]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8008094:	7b7b      	ldrb	r3, [r7, #13]
 8008096:	f1c3 0307 	rsb	r3, r3, #7
 800809a:	2201      	movs	r2, #1
 800809c:	fa02 f303 	lsl.w	r3, r2, r3
 80080a0:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80080a2:	797b      	ldrb	r3, [r7, #5]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d012      	beq.n	80080ce <OLED_DrawPoint+0x72>
 80080a8:	79fa      	ldrb	r2, [r7, #7]
 80080aa:	7bbb      	ldrb	r3, [r7, #14]
 80080ac:	4916      	ldr	r1, [pc, #88]	; (8008108 <OLED_DrawPoint+0xac>)
 80080ae:	00d2      	lsls	r2, r2, #3
 80080b0:	440a      	add	r2, r1
 80080b2:	4413      	add	r3, r2
 80080b4:	7818      	ldrb	r0, [r3, #0]
 80080b6:	79fa      	ldrb	r2, [r7, #7]
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	7bf9      	ldrb	r1, [r7, #15]
 80080bc:	4301      	orrs	r1, r0
 80080be:	b2c8      	uxtb	r0, r1
 80080c0:	4911      	ldr	r1, [pc, #68]	; (8008108 <OLED_DrawPoint+0xac>)
 80080c2:	00d2      	lsls	r2, r2, #3
 80080c4:	440a      	add	r2, r1
 80080c6:	4413      	add	r3, r2
 80080c8:	4602      	mov	r2, r0
 80080ca:	701a      	strb	r2, [r3, #0]
 80080cc:	e018      	b.n	8008100 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80080ce:	79fa      	ldrb	r2, [r7, #7]
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	490d      	ldr	r1, [pc, #52]	; (8008108 <OLED_DrawPoint+0xac>)
 80080d4:	00d2      	lsls	r2, r2, #3
 80080d6:	440a      	add	r2, r1
 80080d8:	4413      	add	r3, r2
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b25a      	sxtb	r2, r3
 80080de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e2:	43db      	mvns	r3, r3
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	4013      	ands	r3, r2
 80080e8:	b259      	sxtb	r1, r3
 80080ea:	79fa      	ldrb	r2, [r7, #7]
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	b2c8      	uxtb	r0, r1
 80080f0:	4905      	ldr	r1, [pc, #20]	; (8008108 <OLED_DrawPoint+0xac>)
 80080f2:	00d2      	lsls	r2, r2, #3
 80080f4:	440a      	add	r2, r1
 80080f6:	4413      	add	r3, r2
 80080f8:	4602      	mov	r2, r0
 80080fa:	701a      	strb	r2, [r3, #0]
 80080fc:	e000      	b.n	8008100 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80080fe:	bf00      	nop
}
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr
 8008108:	20004bf8 	.word	0x20004bf8

0800810c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800810c:	b590      	push	{r4, r7, lr}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	4611      	mov	r1, r2
 8008118:	461a      	mov	r2, r3
 800811a:	4623      	mov	r3, r4
 800811c:	71fb      	strb	r3, [r7, #7]
 800811e:	4603      	mov	r3, r0
 8008120:	71bb      	strb	r3, [r7, #6]
 8008122:	460b      	mov	r3, r1
 8008124:	717b      	strb	r3, [r7, #5]
 8008126:	4613      	mov	r3, r2
 8008128:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800812a:	79bb      	ldrb	r3, [r7, #6]
 800812c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800812e:	797b      	ldrb	r3, [r7, #5]
 8008130:	3b20      	subs	r3, #32
 8008132:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]
 8008138:	e04d      	b.n	80081d6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800813a:	793b      	ldrb	r3, [r7, #4]
 800813c:	2b0c      	cmp	r3, #12
 800813e:	d10b      	bne.n	8008158 <OLED_ShowChar+0x4c>
 8008140:	797a      	ldrb	r2, [r7, #5]
 8008142:	7bb9      	ldrb	r1, [r7, #14]
 8008144:	4828      	ldr	r0, [pc, #160]	; (80081e8 <OLED_ShowChar+0xdc>)
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	4403      	add	r3, r0
 8008150:	440b      	add	r3, r1
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	73fb      	strb	r3, [r7, #15]
 8008156:	e007      	b.n	8008168 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8008158:	797a      	ldrb	r2, [r7, #5]
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	4923      	ldr	r1, [pc, #140]	; (80081ec <OLED_ShowChar+0xe0>)
 800815e:	0112      	lsls	r2, r2, #4
 8008160:	440a      	add	r2, r1
 8008162:	4413      	add	r3, r2
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8008168:	2300      	movs	r3, #0
 800816a:	737b      	strb	r3, [r7, #13]
 800816c:	e02d      	b.n	80081ca <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008172:	2b00      	cmp	r3, #0
 8008174:	da07      	bge.n	8008186 <OLED_ShowChar+0x7a>
 8008176:	f897 2020 	ldrb.w	r2, [r7, #32]
 800817a:	79b9      	ldrb	r1, [r7, #6]
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff ff6c 	bl	800805c <OLED_DrawPoint>
 8008184:	e00c      	b.n	80081a0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8008186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	bf0c      	ite	eq
 800818e:	2301      	moveq	r3, #1
 8008190:	2300      	movne	r3, #0
 8008192:	b2db      	uxtb	r3, r3
 8008194:	461a      	mov	r2, r3
 8008196:	79b9      	ldrb	r1, [r7, #6]
 8008198:	79fb      	ldrb	r3, [r7, #7]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff ff5e 	bl	800805c <OLED_DrawPoint>
			temp<<=1;
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	73fb      	strb	r3, [r7, #15]
			y++;
 80081a6:	79bb      	ldrb	r3, [r7, #6]
 80081a8:	3301      	adds	r3, #1
 80081aa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80081ac:	79ba      	ldrb	r2, [r7, #6]
 80081ae:	7b3b      	ldrb	r3, [r7, #12]
 80081b0:	1ad2      	subs	r2, r2, r3
 80081b2:	793b      	ldrb	r3, [r7, #4]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d105      	bne.n	80081c4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80081b8:	7b3b      	ldrb	r3, [r7, #12]
 80081ba:	71bb      	strb	r3, [r7, #6]
				x++;
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	3301      	adds	r3, #1
 80081c0:	71fb      	strb	r3, [r7, #7]
				break;
 80081c2:	e005      	b.n	80081d0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80081c4:	7b7b      	ldrb	r3, [r7, #13]
 80081c6:	3301      	adds	r3, #1
 80081c8:	737b      	strb	r3, [r7, #13]
 80081ca:	7b7b      	ldrb	r3, [r7, #13]
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d9ce      	bls.n	800816e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80081d0:	7bbb      	ldrb	r3, [r7, #14]
 80081d2:	3301      	adds	r3, #1
 80081d4:	73bb      	strb	r3, [r7, #14]
 80081d6:	7bba      	ldrb	r2, [r7, #14]
 80081d8:	793b      	ldrb	r3, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3ad      	bcc.n	800813a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd90      	pop	{r4, r7, pc}
 80081e8:	0800b5a8 	.word	0x0800b5a8
 80081ec:	0800ba1c 	.word	0x0800ba1c

080081f0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	4603      	mov	r3, r0
 80081f8:	603a      	str	r2, [r7, #0]
 80081fa:	71fb      	strb	r3, [r7, #7]
 80081fc:	460b      	mov	r3, r1
 80081fe:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8008200:	e01f      	b.n	8008242 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	2b7a      	cmp	r3, #122	; 0x7a
 8008206:	d904      	bls.n	8008212 <OLED_ShowString+0x22>
 8008208:	2300      	movs	r3, #0
 800820a:	71fb      	strb	r3, [r7, #7]
 800820c:	79bb      	ldrb	r3, [r7, #6]
 800820e:	3310      	adds	r3, #16
 8008210:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8008212:	79bb      	ldrb	r3, [r7, #6]
 8008214:	2b3a      	cmp	r3, #58	; 0x3a
 8008216:	d905      	bls.n	8008224 <OLED_ShowString+0x34>
 8008218:	2300      	movs	r3, #0
 800821a:	71fb      	strb	r3, [r7, #7]
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	71bb      	strb	r3, [r7, #6]
 8008220:	f7ff fef6 	bl	8008010 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	79b9      	ldrb	r1, [r7, #6]
 800822a:	79f8      	ldrb	r0, [r7, #7]
 800822c:	2301      	movs	r3, #1
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	230c      	movs	r3, #12
 8008232:	f7ff ff6b 	bl	800810c <OLED_ShowChar>
        x+=8;
 8008236:	79fb      	ldrb	r3, [r7, #7]
 8008238:	3308      	adds	r3, #8
 800823a:	71fb      	strb	r3, [r7, #7]
        p++;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3301      	adds	r3, #1
 8008240:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1db      	bne.n	8008202 <OLED_ShowString+0x12>
    }  
}	 
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <OLED_Init>:

void OLED_Init(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8008258:	f7fb f866 	bl	8003328 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800825c:	4b41      	ldr	r3, [pc, #260]	; (8008364 <OLED_Init+0x110>)
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	4a40      	ldr	r2, [pc, #256]	; (8008364 <OLED_Init+0x110>)
 8008262:	f023 0301 	bic.w	r3, r3, #1
 8008266:	6213      	str	r3, [r2, #32]
 8008268:	4b3e      	ldr	r3, [pc, #248]	; (8008364 <OLED_Init+0x110>)
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	4a3d      	ldr	r2, [pc, #244]	; (8008364 <OLED_Init+0x110>)
 800826e:	f023 0304 	bic.w	r3, r3, #4
 8008272:	6213      	str	r3, [r2, #32]
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8008274:	f7fb f864 	bl	8003340 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8008278:	2200      	movs	r2, #0
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	483a      	ldr	r0, [pc, #232]	; (8008368 <OLED_Init+0x114>)
 800827e:	f7fb f821 	bl	80032c4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8008282:	2064      	movs	r0, #100	; 0x64
 8008284:	f7fa fc16 	bl	8002ab4 <HAL_Delay>
	OLED_RST_Set();
 8008288:	2201      	movs	r2, #1
 800828a:	2180      	movs	r1, #128	; 0x80
 800828c:	4836      	ldr	r0, [pc, #216]	; (8008368 <OLED_Init+0x114>)
 800828e:	f7fb f819 	bl	80032c4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8008292:	2100      	movs	r1, #0
 8008294:	20ae      	movs	r0, #174	; 0xae
 8008296:	f7ff fe71 	bl	8007f7c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800829a:	2100      	movs	r1, #0
 800829c:	20d5      	movs	r0, #213	; 0xd5
 800829e:	f7ff fe6d 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80082a2:	2100      	movs	r1, #0
 80082a4:	2050      	movs	r0, #80	; 0x50
 80082a6:	f7ff fe69 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80082aa:	2100      	movs	r1, #0
 80082ac:	20a8      	movs	r0, #168	; 0xa8
 80082ae:	f7ff fe65 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80082b2:	2100      	movs	r1, #0
 80082b4:	203f      	movs	r0, #63	; 0x3f
 80082b6:	f7ff fe61 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80082ba:	2100      	movs	r1, #0
 80082bc:	20d3      	movs	r0, #211	; 0xd3
 80082be:	f7ff fe5d 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80082c2:	2100      	movs	r1, #0
 80082c4:	2000      	movs	r0, #0
 80082c6:	f7ff fe59 	bl	8007f7c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80082ca:	2100      	movs	r1, #0
 80082cc:	2040      	movs	r0, #64	; 0x40
 80082ce:	f7ff fe55 	bl	8007f7c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80082d2:	2100      	movs	r1, #0
 80082d4:	208d      	movs	r0, #141	; 0x8d
 80082d6:	f7ff fe51 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80082da:	2100      	movs	r1, #0
 80082dc:	2014      	movs	r0, #20
 80082de:	f7ff fe4d 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80082e2:	2100      	movs	r1, #0
 80082e4:	2020      	movs	r0, #32
 80082e6:	f7ff fe49 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80082ea:	2100      	movs	r1, #0
 80082ec:	2002      	movs	r0, #2
 80082ee:	f7ff fe45 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80082f2:	2100      	movs	r1, #0
 80082f4:	20a1      	movs	r0, #161	; 0xa1
 80082f6:	f7ff fe41 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80082fa:	2100      	movs	r1, #0
 80082fc:	20c0      	movs	r0, #192	; 0xc0
 80082fe:	f7ff fe3d 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8008302:	2100      	movs	r1, #0
 8008304:	20da      	movs	r0, #218	; 0xda
 8008306:	f7ff fe39 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800830a:	2100      	movs	r1, #0
 800830c:	2012      	movs	r0, #18
 800830e:	f7ff fe35 	bl	8007f7c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8008312:	2100      	movs	r1, #0
 8008314:	2081      	movs	r0, #129	; 0x81
 8008316:	f7ff fe31 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800831a:	2100      	movs	r1, #0
 800831c:	20ef      	movs	r0, #239	; 0xef
 800831e:	f7ff fe2d 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8008322:	2100      	movs	r1, #0
 8008324:	20d9      	movs	r0, #217	; 0xd9
 8008326:	f7ff fe29 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800832a:	2100      	movs	r1, #0
 800832c:	20f1      	movs	r0, #241	; 0xf1
 800832e:	f7ff fe25 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8008332:	2100      	movs	r1, #0
 8008334:	20db      	movs	r0, #219	; 0xdb
 8008336:	f7ff fe21 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800833a:	2100      	movs	r1, #0
 800833c:	2030      	movs	r0, #48	; 0x30
 800833e:	f7ff fe1d 	bl	8007f7c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8008342:	2100      	movs	r1, #0
 8008344:	20a4      	movs	r0, #164	; 0xa4
 8008346:	f7ff fe19 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800834a:	2100      	movs	r1, #0
 800834c:	20a6      	movs	r0, #166	; 0xa6
 800834e:	f7ff fe15 	bl	8007f7c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8008352:	2100      	movs	r1, #0
 8008354:	20af      	movs	r0, #175	; 0xaf
 8008356:	f7ff fe11 	bl	8007f7c <OLED_WR_Byte>
	OLED_Clear(); 
 800835a:	f7ff fe59 	bl	8008010 <OLED_Clear>
 800835e:	bf00      	nop
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40021000 	.word	0x40021000
 8008368:	40011800 	.word	0x40011800

0800836c <atof>:
 800836c:	2100      	movs	r1, #0
 800836e:	f000 be77 	b.w	8009060 <strtod>
	...

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	; (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000010 	.word	0x20000010

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	2600      	movs	r6, #0
 8008384:	4d0c      	ldr	r5, [pc, #48]	; (80083b8 <__libc_init_array+0x38>)
 8008386:	4c0d      	ldr	r4, [pc, #52]	; (80083bc <__libc_init_array+0x3c>)
 8008388:	1b64      	subs	r4, r4, r5
 800838a:	10a4      	asrs	r4, r4, #2
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	f003 f846 	bl	800b420 <_init>
 8008394:	2600      	movs	r6, #0
 8008396:	4d0a      	ldr	r5, [pc, #40]	; (80083c0 <__libc_init_array+0x40>)
 8008398:	4c0a      	ldr	r4, [pc, #40]	; (80083c4 <__libc_init_array+0x44>)
 800839a:	1b64      	subs	r4, r4, r5
 800839c:	10a4      	asrs	r4, r4, #2
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800c444 	.word	0x0800c444
 80083bc:	0800c444 	.word	0x0800c444
 80083c0:	0800c444 	.word	0x0800c444
 80083c4:	0800c448 	.word	0x0800c448

080083c8 <memcpy>:
 80083c8:	440a      	add	r2, r1
 80083ca:	4291      	cmp	r1, r2
 80083cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d0:	d100      	bne.n	80083d4 <memcpy+0xc>
 80083d2:	4770      	bx	lr
 80083d4:	b510      	push	{r4, lr}
 80083d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083da:	4291      	cmp	r1, r2
 80083dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e0:	d1f9      	bne.n	80083d6 <memcpy+0xe>
 80083e2:	bd10      	pop	{r4, pc}

080083e4 <memset>:
 80083e4:	4603      	mov	r3, r0
 80083e6:	4402      	add	r2, r0
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d100      	bne.n	80083ee <memset+0xa>
 80083ec:	4770      	bx	lr
 80083ee:	f803 1b01 	strb.w	r1, [r3], #1
 80083f2:	e7f9      	b.n	80083e8 <memset+0x4>

080083f4 <siprintf>:
 80083f4:	b40e      	push	{r1, r2, r3}
 80083f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083fa:	b500      	push	{lr}
 80083fc:	b09c      	sub	sp, #112	; 0x70
 80083fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008400:	9002      	str	r0, [sp, #8]
 8008402:	9006      	str	r0, [sp, #24]
 8008404:	9107      	str	r1, [sp, #28]
 8008406:	9104      	str	r1, [sp, #16]
 8008408:	4808      	ldr	r0, [pc, #32]	; (800842c <siprintf+0x38>)
 800840a:	4909      	ldr	r1, [pc, #36]	; (8008430 <siprintf+0x3c>)
 800840c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008410:	9105      	str	r1, [sp, #20]
 8008412:	6800      	ldr	r0, [r0, #0]
 8008414:	a902      	add	r1, sp, #8
 8008416:	9301      	str	r3, [sp, #4]
 8008418:	f001 ff22 	bl	800a260 <_svfiprintf_r>
 800841c:	2200      	movs	r2, #0
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	701a      	strb	r2, [r3, #0]
 8008422:	b01c      	add	sp, #112	; 0x70
 8008424:	f85d eb04 	ldr.w	lr, [sp], #4
 8008428:	b003      	add	sp, #12
 800842a:	4770      	bx	lr
 800842c:	20000010 	.word	0x20000010
 8008430:	ffff0208 	.word	0xffff0208

08008434 <sulp>:
 8008434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008438:	460f      	mov	r7, r1
 800843a:	4690      	mov	r8, r2
 800843c:	f001 fd04 	bl	8009e48 <__ulp>
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	f1b8 0f00 	cmp.w	r8, #0
 8008448:	d011      	beq.n	800846e <sulp+0x3a>
 800844a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800844e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008452:	2b00      	cmp	r3, #0
 8008454:	dd0b      	ble.n	800846e <sulp+0x3a>
 8008456:	2400      	movs	r4, #0
 8008458:	051b      	lsls	r3, r3, #20
 800845a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800845e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008462:	4622      	mov	r2, r4
 8008464:	462b      	mov	r3, r5
 8008466:	f7f8 f8a7 	bl	80005b8 <__aeabi_dmul>
 800846a:	4604      	mov	r4, r0
 800846c:	460d      	mov	r5, r1
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008478 <_strtod_l>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	469b      	mov	fp, r3
 800847e:	2300      	movs	r3, #0
 8008480:	b0a1      	sub	sp, #132	; 0x84
 8008482:	931c      	str	r3, [sp, #112]	; 0x70
 8008484:	4ba1      	ldr	r3, [pc, #644]	; (800870c <_strtod_l+0x294>)
 8008486:	4682      	mov	sl, r0
 8008488:	681f      	ldr	r7, [r3, #0]
 800848a:	460e      	mov	r6, r1
 800848c:	4638      	mov	r0, r7
 800848e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008490:	f7f7 fece 	bl	8000230 <strlen>
 8008494:	f04f 0800 	mov.w	r8, #0
 8008498:	4604      	mov	r4, r0
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	961b      	str	r6, [sp, #108]	; 0x6c
 80084a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084a2:	781a      	ldrb	r2, [r3, #0]
 80084a4:	2a2b      	cmp	r2, #43	; 0x2b
 80084a6:	d04c      	beq.n	8008542 <_strtod_l+0xca>
 80084a8:	d83a      	bhi.n	8008520 <_strtod_l+0xa8>
 80084aa:	2a0d      	cmp	r2, #13
 80084ac:	d833      	bhi.n	8008516 <_strtod_l+0x9e>
 80084ae:	2a08      	cmp	r2, #8
 80084b0:	d833      	bhi.n	800851a <_strtod_l+0xa2>
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	d03d      	beq.n	8008532 <_strtod_l+0xba>
 80084b6:	2300      	movs	r3, #0
 80084b8:	930c      	str	r3, [sp, #48]	; 0x30
 80084ba:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80084bc:	782b      	ldrb	r3, [r5, #0]
 80084be:	2b30      	cmp	r3, #48	; 0x30
 80084c0:	f040 80af 	bne.w	8008622 <_strtod_l+0x1aa>
 80084c4:	786b      	ldrb	r3, [r5, #1]
 80084c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80084ca:	2b58      	cmp	r3, #88	; 0x58
 80084cc:	d16c      	bne.n	80085a8 <_strtod_l+0x130>
 80084ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d0:	4650      	mov	r0, sl
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	ab1c      	add	r3, sp, #112	; 0x70
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4a8d      	ldr	r2, [pc, #564]	; (8008710 <_strtod_l+0x298>)
 80084da:	f8cd b008 	str.w	fp, [sp, #8]
 80084de:	ab1d      	add	r3, sp, #116	; 0x74
 80084e0:	a91b      	add	r1, sp, #108	; 0x6c
 80084e2:	f000 fe31 	bl	8009148 <__gethex>
 80084e6:	f010 0607 	ands.w	r6, r0, #7
 80084ea:	4604      	mov	r4, r0
 80084ec:	d005      	beq.n	80084fa <_strtod_l+0x82>
 80084ee:	2e06      	cmp	r6, #6
 80084f0:	d129      	bne.n	8008546 <_strtod_l+0xce>
 80084f2:	2300      	movs	r3, #0
 80084f4:	3501      	adds	r5, #1
 80084f6:	951b      	str	r5, [sp, #108]	; 0x6c
 80084f8:	930c      	str	r3, [sp, #48]	; 0x30
 80084fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8596 	bne.w	800902e <_strtod_l+0xbb6>
 8008502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008504:	b1d3      	cbz	r3, 800853c <_strtod_l+0xc4>
 8008506:	4642      	mov	r2, r8
 8008508:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	b021      	add	sp, #132	; 0x84
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	2a20      	cmp	r2, #32
 8008518:	d1cd      	bne.n	80084b6 <_strtod_l+0x3e>
 800851a:	3301      	adds	r3, #1
 800851c:	931b      	str	r3, [sp, #108]	; 0x6c
 800851e:	e7bf      	b.n	80084a0 <_strtod_l+0x28>
 8008520:	2a2d      	cmp	r2, #45	; 0x2d
 8008522:	d1c8      	bne.n	80084b6 <_strtod_l+0x3e>
 8008524:	2201      	movs	r2, #1
 8008526:	920c      	str	r2, [sp, #48]	; 0x30
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	921b      	str	r2, [sp, #108]	; 0x6c
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1c3      	bne.n	80084ba <_strtod_l+0x42>
 8008532:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008534:	961b      	str	r6, [sp, #108]	; 0x6c
 8008536:	2b00      	cmp	r3, #0
 8008538:	f040 8577 	bne.w	800902a <_strtod_l+0xbb2>
 800853c:	4642      	mov	r2, r8
 800853e:	464b      	mov	r3, r9
 8008540:	e7e4      	b.n	800850c <_strtod_l+0x94>
 8008542:	2200      	movs	r2, #0
 8008544:	e7ef      	b.n	8008526 <_strtod_l+0xae>
 8008546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008548:	b13a      	cbz	r2, 800855a <_strtod_l+0xe2>
 800854a:	2135      	movs	r1, #53	; 0x35
 800854c:	a81e      	add	r0, sp, #120	; 0x78
 800854e:	f001 fd7f 	bl	800a050 <__copybits>
 8008552:	4650      	mov	r0, sl
 8008554:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008556:	f001 f947 	bl	80097e8 <_Bfree>
 800855a:	3e01      	subs	r6, #1
 800855c:	2e05      	cmp	r6, #5
 800855e:	d807      	bhi.n	8008570 <_strtod_l+0xf8>
 8008560:	e8df f006 	tbb	[pc, r6]
 8008564:	1d180b0e 	.word	0x1d180b0e
 8008568:	030e      	.short	0x030e
 800856a:	f04f 0900 	mov.w	r9, #0
 800856e:	46c8      	mov	r8, r9
 8008570:	0721      	lsls	r1, r4, #28
 8008572:	d5c2      	bpl.n	80084fa <_strtod_l+0x82>
 8008574:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008578:	e7bf      	b.n	80084fa <_strtod_l+0x82>
 800857a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800857e:	e7f7      	b.n	8008570 <_strtod_l+0xf8>
 8008580:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008582:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8008586:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800858a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800858e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008592:	e7ed      	b.n	8008570 <_strtod_l+0xf8>
 8008594:	f04f 0800 	mov.w	r8, #0
 8008598:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008714 <_strtod_l+0x29c>
 800859c:	e7e8      	b.n	8008570 <_strtod_l+0xf8>
 800859e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80085a2:	f04f 38ff 	mov.w	r8, #4294967295
 80085a6:	e7e3      	b.n	8008570 <_strtod_l+0xf8>
 80085a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	921b      	str	r2, [sp, #108]	; 0x6c
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b30      	cmp	r3, #48	; 0x30
 80085b2:	d0f9      	beq.n	80085a8 <_strtod_l+0x130>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0a0      	beq.n	80084fa <_strtod_l+0x82>
 80085b8:	2301      	movs	r3, #1
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085be:	220a      	movs	r2, #10
 80085c0:	9308      	str	r3, [sp, #32]
 80085c2:	2300      	movs	r3, #0
 80085c4:	469b      	mov	fp, r3
 80085c6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80085ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80085cc:	7805      	ldrb	r5, [r0, #0]
 80085ce:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80085d2:	b2d9      	uxtb	r1, r3
 80085d4:	2909      	cmp	r1, #9
 80085d6:	d926      	bls.n	8008626 <_strtod_l+0x1ae>
 80085d8:	4622      	mov	r2, r4
 80085da:	4639      	mov	r1, r7
 80085dc:	f002 f8ec 	bl	800a7b8 <strncmp>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d032      	beq.n	800864a <_strtod_l+0x1d2>
 80085e4:	2000      	movs	r0, #0
 80085e6:	462b      	mov	r3, r5
 80085e8:	465c      	mov	r4, fp
 80085ea:	4602      	mov	r2, r0
 80085ec:	9004      	str	r0, [sp, #16]
 80085ee:	2b65      	cmp	r3, #101	; 0x65
 80085f0:	d001      	beq.n	80085f6 <_strtod_l+0x17e>
 80085f2:	2b45      	cmp	r3, #69	; 0x45
 80085f4:	d113      	bne.n	800861e <_strtod_l+0x1a6>
 80085f6:	b91c      	cbnz	r4, 8008600 <_strtod_l+0x188>
 80085f8:	9b07      	ldr	r3, [sp, #28]
 80085fa:	4303      	orrs	r3, r0
 80085fc:	d099      	beq.n	8008532 <_strtod_l+0xba>
 80085fe:	2400      	movs	r4, #0
 8008600:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008602:	1c73      	adds	r3, r6, #1
 8008604:	931b      	str	r3, [sp, #108]	; 0x6c
 8008606:	7873      	ldrb	r3, [r6, #1]
 8008608:	2b2b      	cmp	r3, #43	; 0x2b
 800860a:	d078      	beq.n	80086fe <_strtod_l+0x286>
 800860c:	2b2d      	cmp	r3, #45	; 0x2d
 800860e:	d07b      	beq.n	8008708 <_strtod_l+0x290>
 8008610:	2700      	movs	r7, #0
 8008612:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008616:	2909      	cmp	r1, #9
 8008618:	f240 8082 	bls.w	8008720 <_strtod_l+0x2a8>
 800861c:	961b      	str	r6, [sp, #108]	; 0x6c
 800861e:	2500      	movs	r5, #0
 8008620:	e09e      	b.n	8008760 <_strtod_l+0x2e8>
 8008622:	2300      	movs	r3, #0
 8008624:	e7c9      	b.n	80085ba <_strtod_l+0x142>
 8008626:	f1bb 0f08 	cmp.w	fp, #8
 800862a:	bfd5      	itete	le
 800862c:	9906      	ldrle	r1, [sp, #24]
 800862e:	9905      	ldrgt	r1, [sp, #20]
 8008630:	fb02 3301 	mlale	r3, r2, r1, r3
 8008634:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008638:	f100 0001 	add.w	r0, r0, #1
 800863c:	bfd4      	ite	le
 800863e:	9306      	strle	r3, [sp, #24]
 8008640:	9305      	strgt	r3, [sp, #20]
 8008642:	f10b 0b01 	add.w	fp, fp, #1
 8008646:	901b      	str	r0, [sp, #108]	; 0x6c
 8008648:	e7bf      	b.n	80085ca <_strtod_l+0x152>
 800864a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800864c:	191a      	adds	r2, r3, r4
 800864e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008650:	5d1b      	ldrb	r3, [r3, r4]
 8008652:	f1bb 0f00 	cmp.w	fp, #0
 8008656:	d036      	beq.n	80086c6 <_strtod_l+0x24e>
 8008658:	465c      	mov	r4, fp
 800865a:	9004      	str	r0, [sp, #16]
 800865c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008660:	2a09      	cmp	r2, #9
 8008662:	d912      	bls.n	800868a <_strtod_l+0x212>
 8008664:	2201      	movs	r2, #1
 8008666:	e7c2      	b.n	80085ee <_strtod_l+0x176>
 8008668:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800866a:	3001      	adds	r0, #1
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	921b      	str	r2, [sp, #108]	; 0x6c
 8008670:	785b      	ldrb	r3, [r3, #1]
 8008672:	2b30      	cmp	r3, #48	; 0x30
 8008674:	d0f8      	beq.n	8008668 <_strtod_l+0x1f0>
 8008676:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800867a:	2a08      	cmp	r2, #8
 800867c:	f200 84dc 	bhi.w	8009038 <_strtod_l+0xbc0>
 8008680:	9004      	str	r0, [sp, #16]
 8008682:	2000      	movs	r0, #0
 8008684:	4604      	mov	r4, r0
 8008686:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008688:	9208      	str	r2, [sp, #32]
 800868a:	3b30      	subs	r3, #48	; 0x30
 800868c:	f100 0201 	add.w	r2, r0, #1
 8008690:	d013      	beq.n	80086ba <_strtod_l+0x242>
 8008692:	9904      	ldr	r1, [sp, #16]
 8008694:	1905      	adds	r5, r0, r4
 8008696:	4411      	add	r1, r2
 8008698:	9104      	str	r1, [sp, #16]
 800869a:	4622      	mov	r2, r4
 800869c:	210a      	movs	r1, #10
 800869e:	42aa      	cmp	r2, r5
 80086a0:	d113      	bne.n	80086ca <_strtod_l+0x252>
 80086a2:	1822      	adds	r2, r4, r0
 80086a4:	2a08      	cmp	r2, #8
 80086a6:	f104 0401 	add.w	r4, r4, #1
 80086aa:	4404      	add	r4, r0
 80086ac:	dc1b      	bgt.n	80086e6 <_strtod_l+0x26e>
 80086ae:	220a      	movs	r2, #10
 80086b0:	9906      	ldr	r1, [sp, #24]
 80086b2:	fb02 3301 	mla	r3, r2, r1, r3
 80086b6:	9306      	str	r3, [sp, #24]
 80086b8:	2200      	movs	r2, #0
 80086ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086bc:	4610      	mov	r0, r2
 80086be:	1c59      	adds	r1, r3, #1
 80086c0:	911b      	str	r1, [sp, #108]	; 0x6c
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	e7ca      	b.n	800865c <_strtod_l+0x1e4>
 80086c6:	4658      	mov	r0, fp
 80086c8:	e7d3      	b.n	8008672 <_strtod_l+0x1fa>
 80086ca:	2a08      	cmp	r2, #8
 80086cc:	dc04      	bgt.n	80086d8 <_strtod_l+0x260>
 80086ce:	9f06      	ldr	r7, [sp, #24]
 80086d0:	434f      	muls	r7, r1
 80086d2:	9706      	str	r7, [sp, #24]
 80086d4:	3201      	adds	r2, #1
 80086d6:	e7e2      	b.n	800869e <_strtod_l+0x226>
 80086d8:	1c57      	adds	r7, r2, #1
 80086da:	2f10      	cmp	r7, #16
 80086dc:	bfde      	ittt	le
 80086de:	9f05      	ldrle	r7, [sp, #20]
 80086e0:	434f      	mulle	r7, r1
 80086e2:	9705      	strle	r7, [sp, #20]
 80086e4:	e7f6      	b.n	80086d4 <_strtod_l+0x25c>
 80086e6:	2c10      	cmp	r4, #16
 80086e8:	bfdf      	itttt	le
 80086ea:	220a      	movle	r2, #10
 80086ec:	9905      	ldrle	r1, [sp, #20]
 80086ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80086f2:	9305      	strle	r3, [sp, #20]
 80086f4:	e7e0      	b.n	80086b8 <_strtod_l+0x240>
 80086f6:	2300      	movs	r3, #0
 80086f8:	2201      	movs	r2, #1
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	e77c      	b.n	80085f8 <_strtod_l+0x180>
 80086fe:	2700      	movs	r7, #0
 8008700:	1cb3      	adds	r3, r6, #2
 8008702:	931b      	str	r3, [sp, #108]	; 0x6c
 8008704:	78b3      	ldrb	r3, [r6, #2]
 8008706:	e784      	b.n	8008612 <_strtod_l+0x19a>
 8008708:	2701      	movs	r7, #1
 800870a:	e7f9      	b.n	8008700 <_strtod_l+0x288>
 800870c:	0800c0ec 	.word	0x0800c0ec
 8008710:	0800c01c 	.word	0x0800c01c
 8008714:	7ff00000 	.word	0x7ff00000
 8008718:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800871a:	1c59      	adds	r1, r3, #1
 800871c:	911b      	str	r1, [sp, #108]	; 0x6c
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b30      	cmp	r3, #48	; 0x30
 8008722:	d0f9      	beq.n	8008718 <_strtod_l+0x2a0>
 8008724:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008728:	2908      	cmp	r1, #8
 800872a:	f63f af78 	bhi.w	800861e <_strtod_l+0x1a6>
 800872e:	f04f 0e0a 	mov.w	lr, #10
 8008732:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8008736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008738:	9309      	str	r3, [sp, #36]	; 0x24
 800873a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800873c:	1c59      	adds	r1, r3, #1
 800873e:	911b      	str	r1, [sp, #108]	; 0x6c
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8008746:	2d09      	cmp	r5, #9
 8008748:	d935      	bls.n	80087b6 <_strtod_l+0x33e>
 800874a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800874c:	1b49      	subs	r1, r1, r5
 800874e:	2908      	cmp	r1, #8
 8008750:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008754:	dc02      	bgt.n	800875c <_strtod_l+0x2e4>
 8008756:	4565      	cmp	r5, ip
 8008758:	bfa8      	it	ge
 800875a:	4665      	movge	r5, ip
 800875c:	b107      	cbz	r7, 8008760 <_strtod_l+0x2e8>
 800875e:	426d      	negs	r5, r5
 8008760:	2c00      	cmp	r4, #0
 8008762:	d14c      	bne.n	80087fe <_strtod_l+0x386>
 8008764:	9907      	ldr	r1, [sp, #28]
 8008766:	4301      	orrs	r1, r0
 8008768:	f47f aec7 	bne.w	80084fa <_strtod_l+0x82>
 800876c:	2a00      	cmp	r2, #0
 800876e:	f47f aee0 	bne.w	8008532 <_strtod_l+0xba>
 8008772:	2b69      	cmp	r3, #105	; 0x69
 8008774:	d026      	beq.n	80087c4 <_strtod_l+0x34c>
 8008776:	dc23      	bgt.n	80087c0 <_strtod_l+0x348>
 8008778:	2b49      	cmp	r3, #73	; 0x49
 800877a:	d023      	beq.n	80087c4 <_strtod_l+0x34c>
 800877c:	2b4e      	cmp	r3, #78	; 0x4e
 800877e:	f47f aed8 	bne.w	8008532 <_strtod_l+0xba>
 8008782:	499c      	ldr	r1, [pc, #624]	; (80089f4 <_strtod_l+0x57c>)
 8008784:	a81b      	add	r0, sp, #108	; 0x6c
 8008786:	f000 ff2d 	bl	80095e4 <__match>
 800878a:	2800      	cmp	r0, #0
 800878c:	f43f aed1 	beq.w	8008532 <_strtod_l+0xba>
 8008790:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b28      	cmp	r3, #40	; 0x28
 8008796:	d12c      	bne.n	80087f2 <_strtod_l+0x37a>
 8008798:	4997      	ldr	r1, [pc, #604]	; (80089f8 <_strtod_l+0x580>)
 800879a:	aa1e      	add	r2, sp, #120	; 0x78
 800879c:	a81b      	add	r0, sp, #108	; 0x6c
 800879e:	f000 ff35 	bl	800960c <__hexnan>
 80087a2:	2805      	cmp	r0, #5
 80087a4:	d125      	bne.n	80087f2 <_strtod_l+0x37a>
 80087a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80087a8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80087ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80087b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80087b4:	e6a1      	b.n	80084fa <_strtod_l+0x82>
 80087b6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80087ba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80087be:	e7bc      	b.n	800873a <_strtod_l+0x2c2>
 80087c0:	2b6e      	cmp	r3, #110	; 0x6e
 80087c2:	e7dc      	b.n	800877e <_strtod_l+0x306>
 80087c4:	498d      	ldr	r1, [pc, #564]	; (80089fc <_strtod_l+0x584>)
 80087c6:	a81b      	add	r0, sp, #108	; 0x6c
 80087c8:	f000 ff0c 	bl	80095e4 <__match>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f43f aeb0 	beq.w	8008532 <_strtod_l+0xba>
 80087d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087d4:	498a      	ldr	r1, [pc, #552]	; (8008a00 <_strtod_l+0x588>)
 80087d6:	3b01      	subs	r3, #1
 80087d8:	a81b      	add	r0, sp, #108	; 0x6c
 80087da:	931b      	str	r3, [sp, #108]	; 0x6c
 80087dc:	f000 ff02 	bl	80095e4 <__match>
 80087e0:	b910      	cbnz	r0, 80087e8 <_strtod_l+0x370>
 80087e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80087e4:	3301      	adds	r3, #1
 80087e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80087e8:	f04f 0800 	mov.w	r8, #0
 80087ec:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8008a10 <_strtod_l+0x598>
 80087f0:	e683      	b.n	80084fa <_strtod_l+0x82>
 80087f2:	4884      	ldr	r0, [pc, #528]	; (8008a04 <_strtod_l+0x58c>)
 80087f4:	f001 ffca 	bl	800a78c <nan>
 80087f8:	4680      	mov	r8, r0
 80087fa:	4689      	mov	r9, r1
 80087fc:	e67d      	b.n	80084fa <_strtod_l+0x82>
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	f1bb 0f00 	cmp.w	fp, #0
 8008804:	bf08      	it	eq
 8008806:	46a3      	moveq	fp, r4
 8008808:	1aeb      	subs	r3, r5, r3
 800880a:	2c10      	cmp	r4, #16
 800880c:	9806      	ldr	r0, [sp, #24]
 800880e:	4626      	mov	r6, r4
 8008810:	9307      	str	r3, [sp, #28]
 8008812:	bfa8      	it	ge
 8008814:	2610      	movge	r6, #16
 8008816:	f7f7 fe55 	bl	80004c4 <__aeabi_ui2d>
 800881a:	2c09      	cmp	r4, #9
 800881c:	4680      	mov	r8, r0
 800881e:	4689      	mov	r9, r1
 8008820:	dd13      	ble.n	800884a <_strtod_l+0x3d2>
 8008822:	4b79      	ldr	r3, [pc, #484]	; (8008a08 <_strtod_l+0x590>)
 8008824:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008828:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800882c:	f7f7 fec4 	bl	80005b8 <__aeabi_dmul>
 8008830:	4680      	mov	r8, r0
 8008832:	9805      	ldr	r0, [sp, #20]
 8008834:	4689      	mov	r9, r1
 8008836:	f7f7 fe45 	bl	80004c4 <__aeabi_ui2d>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	f7f7 fd03 	bl	800024c <__adddf3>
 8008846:	4680      	mov	r8, r0
 8008848:	4689      	mov	r9, r1
 800884a:	2c0f      	cmp	r4, #15
 800884c:	dc36      	bgt.n	80088bc <_strtod_l+0x444>
 800884e:	9b07      	ldr	r3, [sp, #28]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f43f ae52 	beq.w	80084fa <_strtod_l+0x82>
 8008856:	dd22      	ble.n	800889e <_strtod_l+0x426>
 8008858:	2b16      	cmp	r3, #22
 800885a:	dc09      	bgt.n	8008870 <_strtod_l+0x3f8>
 800885c:	4c6a      	ldr	r4, [pc, #424]	; (8008a08 <_strtod_l+0x590>)
 800885e:	4642      	mov	r2, r8
 8008860:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8008864:	464b      	mov	r3, r9
 8008866:	e9d4 0100 	ldrd	r0, r1, [r4]
 800886a:	f7f7 fea5 	bl	80005b8 <__aeabi_dmul>
 800886e:	e7c3      	b.n	80087f8 <_strtod_l+0x380>
 8008870:	9a07      	ldr	r2, [sp, #28]
 8008872:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008876:	4293      	cmp	r3, r2
 8008878:	db20      	blt.n	80088bc <_strtod_l+0x444>
 800887a:	4d63      	ldr	r5, [pc, #396]	; (8008a08 <_strtod_l+0x590>)
 800887c:	f1c4 040f 	rsb	r4, r4, #15
 8008880:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008884:	4642      	mov	r2, r8
 8008886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800888a:	464b      	mov	r3, r9
 800888c:	f7f7 fe94 	bl	80005b8 <__aeabi_dmul>
 8008890:	9b07      	ldr	r3, [sp, #28]
 8008892:	1b1c      	subs	r4, r3, r4
 8008894:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800889c:	e7e5      	b.n	800886a <_strtod_l+0x3f2>
 800889e:	9b07      	ldr	r3, [sp, #28]
 80088a0:	3316      	adds	r3, #22
 80088a2:	db0b      	blt.n	80088bc <_strtod_l+0x444>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	4a58      	ldr	r2, [pc, #352]	; (8008a08 <_strtod_l+0x590>)
 80088a8:	1b5d      	subs	r5, r3, r5
 80088aa:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80088ae:	4640      	mov	r0, r8
 80088b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088b4:	4649      	mov	r1, r9
 80088b6:	f7f7 ffa9 	bl	800080c <__aeabi_ddiv>
 80088ba:	e79d      	b.n	80087f8 <_strtod_l+0x380>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	1ba6      	subs	r6, r4, r6
 80088c0:	441e      	add	r6, r3
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	dd71      	ble.n	80089aa <_strtod_l+0x532>
 80088c6:	f016 030f 	ands.w	r3, r6, #15
 80088ca:	d00a      	beq.n	80088e2 <_strtod_l+0x46a>
 80088cc:	494e      	ldr	r1, [pc, #312]	; (8008a08 <_strtod_l+0x590>)
 80088ce:	4642      	mov	r2, r8
 80088d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80088d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d8:	464b      	mov	r3, r9
 80088da:	f7f7 fe6d 	bl	80005b8 <__aeabi_dmul>
 80088de:	4680      	mov	r8, r0
 80088e0:	4689      	mov	r9, r1
 80088e2:	f036 060f 	bics.w	r6, r6, #15
 80088e6:	d050      	beq.n	800898a <_strtod_l+0x512>
 80088e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80088ec:	dd27      	ble.n	800893e <_strtod_l+0x4c6>
 80088ee:	f04f 0b00 	mov.w	fp, #0
 80088f2:	f8cd b010 	str.w	fp, [sp, #16]
 80088f6:	f8cd b020 	str.w	fp, [sp, #32]
 80088fa:	f8cd b018 	str.w	fp, [sp, #24]
 80088fe:	2322      	movs	r3, #34	; 0x22
 8008900:	f04f 0800 	mov.w	r8, #0
 8008904:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008a10 <_strtod_l+0x598>
 8008908:	f8ca 3000 	str.w	r3, [sl]
 800890c:	9b08      	ldr	r3, [sp, #32]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f43f adf3 	beq.w	80084fa <_strtod_l+0x82>
 8008914:	4650      	mov	r0, sl
 8008916:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008918:	f000 ff66 	bl	80097e8 <_Bfree>
 800891c:	4650      	mov	r0, sl
 800891e:	9906      	ldr	r1, [sp, #24]
 8008920:	f000 ff62 	bl	80097e8 <_Bfree>
 8008924:	4650      	mov	r0, sl
 8008926:	9904      	ldr	r1, [sp, #16]
 8008928:	f000 ff5e 	bl	80097e8 <_Bfree>
 800892c:	4650      	mov	r0, sl
 800892e:	9908      	ldr	r1, [sp, #32]
 8008930:	f000 ff5a 	bl	80097e8 <_Bfree>
 8008934:	4659      	mov	r1, fp
 8008936:	4650      	mov	r0, sl
 8008938:	f000 ff56 	bl	80097e8 <_Bfree>
 800893c:	e5dd      	b.n	80084fa <_strtod_l+0x82>
 800893e:	2300      	movs	r3, #0
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	461f      	mov	r7, r3
 8008946:	1136      	asrs	r6, r6, #4
 8008948:	2e01      	cmp	r6, #1
 800894a:	dc21      	bgt.n	8008990 <_strtod_l+0x518>
 800894c:	b10b      	cbz	r3, 8008952 <_strtod_l+0x4da>
 800894e:	4680      	mov	r8, r0
 8008950:	4689      	mov	r9, r1
 8008952:	4b2e      	ldr	r3, [pc, #184]	; (8008a0c <_strtod_l+0x594>)
 8008954:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008958:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800895c:	4642      	mov	r2, r8
 800895e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008962:	464b      	mov	r3, r9
 8008964:	f7f7 fe28 	bl	80005b8 <__aeabi_dmul>
 8008968:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <_strtod_l+0x598>)
 800896a:	460a      	mov	r2, r1
 800896c:	400b      	ands	r3, r1
 800896e:	4929      	ldr	r1, [pc, #164]	; (8008a14 <_strtod_l+0x59c>)
 8008970:	4680      	mov	r8, r0
 8008972:	428b      	cmp	r3, r1
 8008974:	d8bb      	bhi.n	80088ee <_strtod_l+0x476>
 8008976:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800897a:	428b      	cmp	r3, r1
 800897c:	bf86      	itte	hi
 800897e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008982:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008a18 <_strtod_l+0x5a0>
 8008986:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800898a:	2300      	movs	r3, #0
 800898c:	9305      	str	r3, [sp, #20]
 800898e:	e07e      	b.n	8008a8e <_strtod_l+0x616>
 8008990:	07f2      	lsls	r2, r6, #31
 8008992:	d507      	bpl.n	80089a4 <_strtod_l+0x52c>
 8008994:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <_strtod_l+0x594>)
 8008996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fe0b 	bl	80005b8 <__aeabi_dmul>
 80089a2:	2301      	movs	r3, #1
 80089a4:	3701      	adds	r7, #1
 80089a6:	1076      	asrs	r6, r6, #1
 80089a8:	e7ce      	b.n	8008948 <_strtod_l+0x4d0>
 80089aa:	d0ee      	beq.n	800898a <_strtod_l+0x512>
 80089ac:	4276      	negs	r6, r6
 80089ae:	f016 020f 	ands.w	r2, r6, #15
 80089b2:	d00a      	beq.n	80089ca <_strtod_l+0x552>
 80089b4:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <_strtod_l+0x590>)
 80089b6:	4640      	mov	r0, r8
 80089b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089bc:	4649      	mov	r1, r9
 80089be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c2:	f7f7 ff23 	bl	800080c <__aeabi_ddiv>
 80089c6:	4680      	mov	r8, r0
 80089c8:	4689      	mov	r9, r1
 80089ca:	1136      	asrs	r6, r6, #4
 80089cc:	d0dd      	beq.n	800898a <_strtod_l+0x512>
 80089ce:	2e1f      	cmp	r6, #31
 80089d0:	dd24      	ble.n	8008a1c <_strtod_l+0x5a4>
 80089d2:	f04f 0b00 	mov.w	fp, #0
 80089d6:	f8cd b010 	str.w	fp, [sp, #16]
 80089da:	f8cd b020 	str.w	fp, [sp, #32]
 80089de:	f8cd b018 	str.w	fp, [sp, #24]
 80089e2:	2322      	movs	r3, #34	; 0x22
 80089e4:	f04f 0800 	mov.w	r8, #0
 80089e8:	f04f 0900 	mov.w	r9, #0
 80089ec:	f8ca 3000 	str.w	r3, [sl]
 80089f0:	e78c      	b.n	800890c <_strtod_l+0x494>
 80089f2:	bf00      	nop
 80089f4:	0800c019 	.word	0x0800c019
 80089f8:	0800c030 	.word	0x0800c030
 80089fc:	0800c010 	.word	0x0800c010
 8008a00:	0800c013 	.word	0x0800c013
 8008a04:	0800c2e2 	.word	0x0800c2e2
 8008a08:	0800c1a0 	.word	0x0800c1a0
 8008a0c:	0800c178 	.word	0x0800c178
 8008a10:	7ff00000 	.word	0x7ff00000
 8008a14:	7ca00000 	.word	0x7ca00000
 8008a18:	7fefffff 	.word	0x7fefffff
 8008a1c:	f016 0310 	ands.w	r3, r6, #16
 8008a20:	bf18      	it	ne
 8008a22:	236a      	movne	r3, #106	; 0x6a
 8008a24:	4640      	mov	r0, r8
 8008a26:	9305      	str	r3, [sp, #20]
 8008a28:	4649      	mov	r1, r9
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	4fb2      	ldr	r7, [pc, #712]	; (8008cf8 <_strtod_l+0x880>)
 8008a2e:	07f2      	lsls	r2, r6, #31
 8008a30:	d504      	bpl.n	8008a3c <_strtod_l+0x5c4>
 8008a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a36:	f7f7 fdbf 	bl	80005b8 <__aeabi_dmul>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	1076      	asrs	r6, r6, #1
 8008a3e:	f107 0708 	add.w	r7, r7, #8
 8008a42:	d1f4      	bne.n	8008a2e <_strtod_l+0x5b6>
 8008a44:	b10b      	cbz	r3, 8008a4a <_strtod_l+0x5d2>
 8008a46:	4680      	mov	r8, r0
 8008a48:	4689      	mov	r9, r1
 8008a4a:	9b05      	ldr	r3, [sp, #20]
 8008a4c:	b1bb      	cbz	r3, 8008a7e <_strtod_l+0x606>
 8008a4e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8008a52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	4649      	mov	r1, r9
 8008a5a:	dd10      	ble.n	8008a7e <_strtod_l+0x606>
 8008a5c:	2b1f      	cmp	r3, #31
 8008a5e:	f340 812b 	ble.w	8008cb8 <_strtod_l+0x840>
 8008a62:	2b34      	cmp	r3, #52	; 0x34
 8008a64:	bfd8      	it	le
 8008a66:	f04f 32ff 	movle.w	r2, #4294967295
 8008a6a:	f04f 0800 	mov.w	r8, #0
 8008a6e:	bfcf      	iteee	gt
 8008a70:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008a74:	3b20      	suble	r3, #32
 8008a76:	fa02 f303 	lslle.w	r3, r2, r3
 8008a7a:	ea03 0901 	andle.w	r9, r3, r1
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2300      	movs	r3, #0
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 ffff 	bl	8000a88 <__aeabi_dcmpeq>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	d1a1      	bne.n	80089d2 <_strtod_l+0x55a>
 8008a8e:	9b06      	ldr	r3, [sp, #24]
 8008a90:	465a      	mov	r2, fp
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	4650      	mov	r0, sl
 8008a96:	4623      	mov	r3, r4
 8008a98:	9908      	ldr	r1, [sp, #32]
 8008a9a:	f000 ff11 	bl	80098c0 <__s2b>
 8008a9e:	9008      	str	r0, [sp, #32]
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	f43f af24 	beq.w	80088ee <_strtod_l+0x476>
 8008aa6:	9b04      	ldr	r3, [sp, #16]
 8008aa8:	f04f 0b00 	mov.w	fp, #0
 8008aac:	1b5d      	subs	r5, r3, r5
 8008aae:	9b07      	ldr	r3, [sp, #28]
 8008ab0:	f8cd b010 	str.w	fp, [sp, #16]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfb4      	ite	lt
 8008ab8:	462b      	movlt	r3, r5
 8008aba:	2300      	movge	r3, #0
 8008abc:	930e      	str	r3, [sp, #56]	; 0x38
 8008abe:	9b07      	ldr	r3, [sp, #28]
 8008ac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008ac4:	9316      	str	r3, [sp, #88]	; 0x58
 8008ac6:	9b08      	ldr	r3, [sp, #32]
 8008ac8:	4650      	mov	r0, sl
 8008aca:	6859      	ldr	r1, [r3, #4]
 8008acc:	f000 fe4c 	bl	8009768 <_Balloc>
 8008ad0:	9006      	str	r0, [sp, #24]
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	f43f af13 	beq.w	80088fe <_strtod_l+0x486>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	300c      	adds	r0, #12
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	f103 010c 	add.w	r1, r3, #12
 8008ae2:	3202      	adds	r2, #2
 8008ae4:	0092      	lsls	r2, r2, #2
 8008ae6:	f7ff fc6f 	bl	80083c8 <memcpy>
 8008aea:	ab1e      	add	r3, sp, #120	; 0x78
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	ab1d      	add	r3, sp, #116	; 0x74
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	4650      	mov	r0, sl
 8008af8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8008afc:	f001 fa1e 	bl	8009f3c <__d2b>
 8008b00:	901c      	str	r0, [sp, #112]	; 0x70
 8008b02:	2800      	cmp	r0, #0
 8008b04:	f43f aefb 	beq.w	80088fe <_strtod_l+0x486>
 8008b08:	2101      	movs	r1, #1
 8008b0a:	4650      	mov	r0, sl
 8008b0c:	f000 ff70 	bl	80099f0 <__i2b>
 8008b10:	4603      	mov	r3, r0
 8008b12:	9004      	str	r0, [sp, #16]
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f43f aef2 	beq.w	80088fe <_strtod_l+0x486>
 8008b1a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008b1c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008b1e:	2d00      	cmp	r5, #0
 8008b20:	bfab      	itete	ge
 8008b22:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008b24:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008b26:	18ee      	addge	r6, r5, r3
 8008b28:	1b5c      	sublt	r4, r3, r5
 8008b2a:	9b05      	ldr	r3, [sp, #20]
 8008b2c:	bfa8      	it	ge
 8008b2e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008b30:	eba5 0503 	sub.w	r5, r5, r3
 8008b34:	4415      	add	r5, r2
 8008b36:	4b71      	ldr	r3, [pc, #452]	; (8008cfc <_strtod_l+0x884>)
 8008b38:	f105 35ff 	add.w	r5, r5, #4294967295
 8008b3c:	bfb8      	it	lt
 8008b3e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008b40:	429d      	cmp	r5, r3
 8008b42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b46:	f280 80c9 	bge.w	8008cdc <_strtod_l+0x864>
 8008b4a:	1b5b      	subs	r3, r3, r5
 8008b4c:	2b1f      	cmp	r3, #31
 8008b4e:	f04f 0701 	mov.w	r7, #1
 8008b52:	eba2 0203 	sub.w	r2, r2, r3
 8008b56:	f300 80b6 	bgt.w	8008cc6 <_strtod_l+0x84e>
 8008b5a:	2500      	movs	r5, #0
 8008b5c:	fa07 f303 	lsl.w	r3, r7, r3
 8008b60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b62:	18b7      	adds	r7, r6, r2
 8008b64:	9b05      	ldr	r3, [sp, #20]
 8008b66:	42be      	cmp	r6, r7
 8008b68:	4414      	add	r4, r2
 8008b6a:	441c      	add	r4, r3
 8008b6c:	4633      	mov	r3, r6
 8008b6e:	bfa8      	it	ge
 8008b70:	463b      	movge	r3, r7
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	bfa8      	it	ge
 8008b76:	4623      	movge	r3, r4
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfc2      	ittt	gt
 8008b7c:	1aff      	subgt	r7, r7, r3
 8008b7e:	1ae4      	subgt	r4, r4, r3
 8008b80:	1af6      	subgt	r6, r6, r3
 8008b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	dd17      	ble.n	8008bb8 <_strtod_l+0x740>
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	9904      	ldr	r1, [sp, #16]
 8008b8e:	f000 ffe9 	bl	8009b64 <__pow5mult>
 8008b92:	9004      	str	r0, [sp, #16]
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f43f aeb2 	beq.w	80088fe <_strtod_l+0x486>
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	f000 ff3c 	bl	8009a1c <__multiply>
 8008ba4:	9009      	str	r0, [sp, #36]	; 0x24
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	f43f aea9 	beq.w	80088fe <_strtod_l+0x486>
 8008bac:	4650      	mov	r0, sl
 8008bae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bb0:	f000 fe1a 	bl	80097e8 <_Bfree>
 8008bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb6:	931c      	str	r3, [sp, #112]	; 0x70
 8008bb8:	2f00      	cmp	r7, #0
 8008bba:	f300 8093 	bgt.w	8008ce4 <_strtod_l+0x86c>
 8008bbe:	9b07      	ldr	r3, [sp, #28]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	dd08      	ble.n	8008bd6 <_strtod_l+0x75e>
 8008bc4:	4650      	mov	r0, sl
 8008bc6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008bc8:	9906      	ldr	r1, [sp, #24]
 8008bca:	f000 ffcb 	bl	8009b64 <__pow5mult>
 8008bce:	9006      	str	r0, [sp, #24]
 8008bd0:	2800      	cmp	r0, #0
 8008bd2:	f43f ae94 	beq.w	80088fe <_strtod_l+0x486>
 8008bd6:	2c00      	cmp	r4, #0
 8008bd8:	dd08      	ble.n	8008bec <_strtod_l+0x774>
 8008bda:	4622      	mov	r2, r4
 8008bdc:	4650      	mov	r0, sl
 8008bde:	9906      	ldr	r1, [sp, #24]
 8008be0:	f001 f81a 	bl	8009c18 <__lshift>
 8008be4:	9006      	str	r0, [sp, #24]
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f43f ae89 	beq.w	80088fe <_strtod_l+0x486>
 8008bec:	2e00      	cmp	r6, #0
 8008bee:	dd08      	ble.n	8008c02 <_strtod_l+0x78a>
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	4650      	mov	r0, sl
 8008bf4:	9904      	ldr	r1, [sp, #16]
 8008bf6:	f001 f80f 	bl	8009c18 <__lshift>
 8008bfa:	9004      	str	r0, [sp, #16]
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f43f ae7e 	beq.w	80088fe <_strtod_l+0x486>
 8008c02:	4650      	mov	r0, sl
 8008c04:	9a06      	ldr	r2, [sp, #24]
 8008c06:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008c08:	f001 f88e 	bl	8009d28 <__mdiff>
 8008c0c:	4683      	mov	fp, r0
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	f43f ae75 	beq.w	80088fe <_strtod_l+0x486>
 8008c14:	2400      	movs	r4, #0
 8008c16:	68c3      	ldr	r3, [r0, #12]
 8008c18:	9904      	ldr	r1, [sp, #16]
 8008c1a:	60c4      	str	r4, [r0, #12]
 8008c1c:	930d      	str	r3, [sp, #52]	; 0x34
 8008c1e:	f001 f867 	bl	8009cf0 <__mcmp>
 8008c22:	42a0      	cmp	r0, r4
 8008c24:	da70      	bge.n	8008d08 <_strtod_l+0x890>
 8008c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c28:	ea53 0308 	orrs.w	r3, r3, r8
 8008c2c:	f040 8096 	bne.w	8008d5c <_strtod_l+0x8e4>
 8008c30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 8091 	bne.w	8008d5c <_strtod_l+0x8e4>
 8008c3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c3e:	0d1b      	lsrs	r3, r3, #20
 8008c40:	051b      	lsls	r3, r3, #20
 8008c42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c46:	f240 8089 	bls.w	8008d5c <_strtod_l+0x8e4>
 8008c4a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8008c4e:	b923      	cbnz	r3, 8008c5a <_strtod_l+0x7e2>
 8008c50:	f8db 3010 	ldr.w	r3, [fp, #16]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	f340 8081 	ble.w	8008d5c <_strtod_l+0x8e4>
 8008c5a:	4659      	mov	r1, fp
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	4650      	mov	r0, sl
 8008c60:	f000 ffda 	bl	8009c18 <__lshift>
 8008c64:	9904      	ldr	r1, [sp, #16]
 8008c66:	4683      	mov	fp, r0
 8008c68:	f001 f842 	bl	8009cf0 <__mcmp>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	dd75      	ble.n	8008d5c <_strtod_l+0x8e4>
 8008c70:	9905      	ldr	r1, [sp, #20]
 8008c72:	464b      	mov	r3, r9
 8008c74:	4a22      	ldr	r2, [pc, #136]	; (8008d00 <_strtod_l+0x888>)
 8008c76:	2900      	cmp	r1, #0
 8008c78:	f000 8091 	beq.w	8008d9e <_strtod_l+0x926>
 8008c7c:	ea02 0109 	and.w	r1, r2, r9
 8008c80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c84:	f300 808b 	bgt.w	8008d9e <_strtod_l+0x926>
 8008c88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c8c:	f77f aea9 	ble.w	80089e2 <_strtod_l+0x56a>
 8008c90:	2300      	movs	r3, #0
 8008c92:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <_strtod_l+0x88c>)
 8008c94:	4640      	mov	r0, r8
 8008c96:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ca0:	f7f7 fc8a 	bl	80005b8 <__aeabi_dmul>
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4303      	orrs	r3, r0
 8008ca8:	bf08      	it	eq
 8008caa:	2322      	moveq	r3, #34	; 0x22
 8008cac:	4680      	mov	r8, r0
 8008cae:	4689      	mov	r9, r1
 8008cb0:	bf08      	it	eq
 8008cb2:	f8ca 3000 	streq.w	r3, [sl]
 8008cb6:	e62d      	b.n	8008914 <_strtod_l+0x49c>
 8008cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	ea03 0808 	and.w	r8, r3, r8
 8008cc4:	e6db      	b.n	8008a7e <_strtod_l+0x606>
 8008cc6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008cca:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008cce:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008cd2:	35e2      	adds	r5, #226	; 0xe2
 8008cd4:	fa07 f505 	lsl.w	r5, r7, r5
 8008cd8:	970f      	str	r7, [sp, #60]	; 0x3c
 8008cda:	e742      	b.n	8008b62 <_strtod_l+0x6ea>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	2500      	movs	r5, #0
 8008ce0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ce2:	e73e      	b.n	8008b62 <_strtod_l+0x6ea>
 8008ce4:	463a      	mov	r2, r7
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008cea:	f000 ff95 	bl	8009c18 <__lshift>
 8008cee:	901c      	str	r0, [sp, #112]	; 0x70
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	f47f af64 	bne.w	8008bbe <_strtod_l+0x746>
 8008cf6:	e602      	b.n	80088fe <_strtod_l+0x486>
 8008cf8:	0800c048 	.word	0x0800c048
 8008cfc:	fffffc02 	.word	0xfffffc02
 8008d00:	7ff00000 	.word	0x7ff00000
 8008d04:	39500000 	.word	0x39500000
 8008d08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d0c:	d166      	bne.n	8008ddc <_strtod_l+0x964>
 8008d0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d14:	b35a      	cbz	r2, 8008d6e <_strtod_l+0x8f6>
 8008d16:	4a9c      	ldr	r2, [pc, #624]	; (8008f88 <_strtod_l+0xb10>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d12c      	bne.n	8008d76 <_strtod_l+0x8fe>
 8008d1c:	9b05      	ldr	r3, [sp, #20]
 8008d1e:	4640      	mov	r0, r8
 8008d20:	b303      	cbz	r3, 8008d64 <_strtod_l+0x8ec>
 8008d22:	464b      	mov	r3, r9
 8008d24:	4a99      	ldr	r2, [pc, #612]	; (8008f8c <_strtod_l+0xb14>)
 8008d26:	f04f 31ff 	mov.w	r1, #4294967295
 8008d2a:	401a      	ands	r2, r3
 8008d2c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008d30:	d81b      	bhi.n	8008d6a <_strtod_l+0x8f2>
 8008d32:	0d12      	lsrs	r2, r2, #20
 8008d34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d38:	fa01 f303 	lsl.w	r3, r1, r3
 8008d3c:	4298      	cmp	r0, r3
 8008d3e:	d11a      	bne.n	8008d76 <_strtod_l+0x8fe>
 8008d40:	4b93      	ldr	r3, [pc, #588]	; (8008f90 <_strtod_l+0xb18>)
 8008d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d102      	bne.n	8008d4e <_strtod_l+0x8d6>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f add8 	beq.w	80088fe <_strtod_l+0x486>
 8008d4e:	f04f 0800 	mov.w	r8, #0
 8008d52:	4b8e      	ldr	r3, [pc, #568]	; (8008f8c <_strtod_l+0xb14>)
 8008d54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d56:	401a      	ands	r2, r3
 8008d58:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8008d5c:	9b05      	ldr	r3, [sp, #20]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d196      	bne.n	8008c90 <_strtod_l+0x818>
 8008d62:	e5d7      	b.n	8008914 <_strtod_l+0x49c>
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295
 8008d68:	e7e8      	b.n	8008d3c <_strtod_l+0x8c4>
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	e7e6      	b.n	8008d3c <_strtod_l+0x8c4>
 8008d6e:	ea53 0308 	orrs.w	r3, r3, r8
 8008d72:	f43f af7d 	beq.w	8008c70 <_strtod_l+0x7f8>
 8008d76:	b1e5      	cbz	r5, 8008db2 <_strtod_l+0x93a>
 8008d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d7a:	421d      	tst	r5, r3
 8008d7c:	d0ee      	beq.n	8008d5c <_strtod_l+0x8e4>
 8008d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	9a05      	ldr	r2, [sp, #20]
 8008d86:	b1c3      	cbz	r3, 8008dba <_strtod_l+0x942>
 8008d88:	f7ff fb54 	bl	8008434 <sulp>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d94:	f7f7 fa5a 	bl	800024c <__adddf3>
 8008d98:	4680      	mov	r8, r0
 8008d9a:	4689      	mov	r9, r1
 8008d9c:	e7de      	b.n	8008d5c <_strtod_l+0x8e4>
 8008d9e:	4013      	ands	r3, r2
 8008da0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008da4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008da8:	f04f 38ff 	mov.w	r8, #4294967295
 8008dac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008db0:	e7d4      	b.n	8008d5c <_strtod_l+0x8e4>
 8008db2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008db4:	ea13 0f08 	tst.w	r3, r8
 8008db8:	e7e0      	b.n	8008d7c <_strtod_l+0x904>
 8008dba:	f7ff fb3b 	bl	8008434 <sulp>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008dc6:	f7f7 fa3f 	bl	8000248 <__aeabi_dsub>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	4680      	mov	r8, r0
 8008dd0:	4689      	mov	r9, r1
 8008dd2:	f7f7 fe59 	bl	8000a88 <__aeabi_dcmpeq>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d0c0      	beq.n	8008d5c <_strtod_l+0x8e4>
 8008dda:	e602      	b.n	80089e2 <_strtod_l+0x56a>
 8008ddc:	4658      	mov	r0, fp
 8008dde:	9904      	ldr	r1, [sp, #16]
 8008de0:	f001 f908 	bl	8009ff4 <__ratio>
 8008de4:	2200      	movs	r2, #0
 8008de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008dea:	4606      	mov	r6, r0
 8008dec:	460f      	mov	r7, r1
 8008dee:	f7f7 fe5f 	bl	8000ab0 <__aeabi_dcmple>
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d075      	beq.n	8008ee2 <_strtod_l+0xa6a>
 8008df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d047      	beq.n	8008e8c <_strtod_l+0xa14>
 8008dfc:	2600      	movs	r6, #0
 8008dfe:	4f65      	ldr	r7, [pc, #404]	; (8008f94 <_strtod_l+0xb1c>)
 8008e00:	4d64      	ldr	r5, [pc, #400]	; (8008f94 <_strtod_l+0xb1c>)
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e08:	0d1b      	lsrs	r3, r3, #20
 8008e0a:	051b      	lsls	r3, r3, #20
 8008e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e10:	4b61      	ldr	r3, [pc, #388]	; (8008f98 <_strtod_l+0xb20>)
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f040 80c8 	bne.w	8008fa8 <_strtod_l+0xb30>
 8008e18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e1c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e22:	4640      	mov	r0, r8
 8008e24:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8008e28:	4649      	mov	r1, r9
 8008e2a:	f001 f80d 	bl	8009e48 <__ulp>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fbbf 	bl	80005b8 <__aeabi_dmul>
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	464b      	mov	r3, r9
 8008e3e:	f7f7 fa05 	bl	800024c <__adddf3>
 8008e42:	460b      	mov	r3, r1
 8008e44:	4951      	ldr	r1, [pc, #324]	; (8008f8c <_strtod_l+0xb14>)
 8008e46:	4a55      	ldr	r2, [pc, #340]	; (8008f9c <_strtod_l+0xb24>)
 8008e48:	4019      	ands	r1, r3
 8008e4a:	4291      	cmp	r1, r2
 8008e4c:	4680      	mov	r8, r0
 8008e4e:	d95e      	bls.n	8008f0e <_strtod_l+0xa96>
 8008e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d103      	bne.n	8008e62 <_strtod_l+0x9ea>
 8008e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	f43f ad4e 	beq.w	80088fe <_strtod_l+0x486>
 8008e62:	f04f 38ff 	mov.w	r8, #4294967295
 8008e66:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008f90 <_strtod_l+0xb18>
 8008e6a:	4650      	mov	r0, sl
 8008e6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e6e:	f000 fcbb 	bl	80097e8 <_Bfree>
 8008e72:	4650      	mov	r0, sl
 8008e74:	9906      	ldr	r1, [sp, #24]
 8008e76:	f000 fcb7 	bl	80097e8 <_Bfree>
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	9904      	ldr	r1, [sp, #16]
 8008e7e:	f000 fcb3 	bl	80097e8 <_Bfree>
 8008e82:	4659      	mov	r1, fp
 8008e84:	4650      	mov	r0, sl
 8008e86:	f000 fcaf 	bl	80097e8 <_Bfree>
 8008e8a:	e61c      	b.n	8008ac6 <_strtod_l+0x64e>
 8008e8c:	f1b8 0f00 	cmp.w	r8, #0
 8008e90:	d119      	bne.n	8008ec6 <_strtod_l+0xa4e>
 8008e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e98:	b9e3      	cbnz	r3, 8008ed4 <_strtod_l+0xa5c>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	4b3c      	ldr	r3, [pc, #240]	; (8008f94 <_strtod_l+0xb1c>)
 8008ea2:	f7f7 fdfb 	bl	8000a9c <__aeabi_dcmplt>
 8008ea6:	b9c8      	cbnz	r0, 8008edc <_strtod_l+0xa64>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4630      	mov	r0, r6
 8008eac:	4639      	mov	r1, r7
 8008eae:	4b3c      	ldr	r3, [pc, #240]	; (8008fa0 <_strtod_l+0xb28>)
 8008eb0:	f7f7 fb82 	bl	80005b8 <__aeabi_dmul>
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	460d      	mov	r5, r1
 8008eb8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ebc:	9418      	str	r4, [sp, #96]	; 0x60
 8008ebe:	9319      	str	r3, [sp, #100]	; 0x64
 8008ec0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008ec4:	e79d      	b.n	8008e02 <_strtod_l+0x98a>
 8008ec6:	f1b8 0f01 	cmp.w	r8, #1
 8008eca:	d103      	bne.n	8008ed4 <_strtod_l+0xa5c>
 8008ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f43f ad87 	beq.w	80089e2 <_strtod_l+0x56a>
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	2400      	movs	r4, #0
 8008ed8:	4f32      	ldr	r7, [pc, #200]	; (8008fa4 <_strtod_l+0xb2c>)
 8008eda:	e791      	b.n	8008e00 <_strtod_l+0x988>
 8008edc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008ede:	4d30      	ldr	r5, [pc, #192]	; (8008fa0 <_strtod_l+0xb28>)
 8008ee0:	e7ea      	b.n	8008eb8 <_strtod_l+0xa40>
 8008ee2:	4b2f      	ldr	r3, [pc, #188]	; (8008fa0 <_strtod_l+0xb28>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	4639      	mov	r1, r7
 8008eea:	f7f7 fb65 	bl	80005b8 <__aeabi_dmul>
 8008eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	460d      	mov	r5, r1
 8008ef4:	b933      	cbnz	r3, 8008f04 <_strtod_l+0xa8c>
 8008ef6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008efa:	9010      	str	r0, [sp, #64]	; 0x40
 8008efc:	9311      	str	r3, [sp, #68]	; 0x44
 8008efe:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008f02:	e77e      	b.n	8008e02 <_strtod_l+0x98a>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008f0c:	e7f7      	b.n	8008efe <_strtod_l+0xa86>
 8008f0e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008f12:	9b05      	ldr	r3, [sp, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1a8      	bne.n	8008e6a <_strtod_l+0x9f2>
 8008f18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f1e:	0d1b      	lsrs	r3, r3, #20
 8008f20:	051b      	lsls	r3, r3, #20
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d1a1      	bne.n	8008e6a <_strtod_l+0x9f2>
 8008f26:	4620      	mov	r0, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	f7f8 f923 	bl	8001174 <__aeabi_d2lz>
 8008f2e:	f7f7 fb15 	bl	800055c <__aeabi_l2d>
 8008f32:	4602      	mov	r2, r0
 8008f34:	460b      	mov	r3, r1
 8008f36:	4620      	mov	r0, r4
 8008f38:	4629      	mov	r1, r5
 8008f3a:	f7f7 f985 	bl	8000248 <__aeabi_dsub>
 8008f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f44:	ea43 0308 	orr.w	r3, r3, r8
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	460d      	mov	r5, r1
 8008f4e:	d066      	beq.n	800901e <_strtod_l+0xba6>
 8008f50:	a309      	add	r3, pc, #36	; (adr r3, 8008f78 <_strtod_l+0xb00>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	f7f7 fda1 	bl	8000a9c <__aeabi_dcmplt>
 8008f5a:	2800      	cmp	r0, #0
 8008f5c:	f47f acda 	bne.w	8008914 <_strtod_l+0x49c>
 8008f60:	a307      	add	r3, pc, #28	; (adr r3, 8008f80 <_strtod_l+0xb08>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	4620      	mov	r0, r4
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f7f7 fdb5 	bl	8000ad8 <__aeabi_dcmpgt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	f43f af7b 	beq.w	8008e6a <_strtod_l+0x9f2>
 8008f74:	e4ce      	b.n	8008914 <_strtod_l+0x49c>
 8008f76:	bf00      	nop
 8008f78:	94a03595 	.word	0x94a03595
 8008f7c:	3fdfffff 	.word	0x3fdfffff
 8008f80:	35afe535 	.word	0x35afe535
 8008f84:	3fe00000 	.word	0x3fe00000
 8008f88:	000fffff 	.word	0x000fffff
 8008f8c:	7ff00000 	.word	0x7ff00000
 8008f90:	7fefffff 	.word	0x7fefffff
 8008f94:	3ff00000 	.word	0x3ff00000
 8008f98:	7fe00000 	.word	0x7fe00000
 8008f9c:	7c9fffff 	.word	0x7c9fffff
 8008fa0:	3fe00000 	.word	0x3fe00000
 8008fa4:	bff00000 	.word	0xbff00000
 8008fa8:	9b05      	ldr	r3, [sp, #20]
 8008faa:	b313      	cbz	r3, 8008ff2 <_strtod_l+0xb7a>
 8008fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008fb2:	d81e      	bhi.n	8008ff2 <_strtod_l+0xb7a>
 8008fb4:	a326      	add	r3, pc, #152	; (adr r3, 8009050 <_strtod_l+0xbd8>)
 8008fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 fd77 	bl	8000ab0 <__aeabi_dcmple>
 8008fc2:	b190      	cbz	r0, 8008fea <_strtod_l+0xb72>
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7f7 fd90 	bl	8000aec <__aeabi_d2uiz>
 8008fcc:	2801      	cmp	r0, #1
 8008fce:	bf38      	it	cc
 8008fd0:	2001      	movcc	r0, #1
 8008fd2:	f7f7 fa77 	bl	80004c4 <__aeabi_ui2d>
 8008fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	b9d3      	cbnz	r3, 8009014 <_strtod_l+0xb9c>
 8008fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fe2:	9012      	str	r0, [sp, #72]	; 0x48
 8008fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fe6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fec:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008ff0:	1a9f      	subs	r7, r3, r2
 8008ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ff6:	f000 ff27 	bl	8009e48 <__ulp>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4630      	mov	r0, r6
 8009000:	4639      	mov	r1, r7
 8009002:	f7f7 fad9 	bl	80005b8 <__aeabi_dmul>
 8009006:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800900a:	f7f7 f91f 	bl	800024c <__adddf3>
 800900e:	4680      	mov	r8, r0
 8009010:	4689      	mov	r9, r1
 8009012:	e77e      	b.n	8008f12 <_strtod_l+0xa9a>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800901c:	e7e3      	b.n	8008fe6 <_strtod_l+0xb6e>
 800901e:	a30e      	add	r3, pc, #56	; (adr r3, 8009058 <_strtod_l+0xbe0>)
 8009020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009024:	f7f7 fd3a 	bl	8000a9c <__aeabi_dcmplt>
 8009028:	e7a1      	b.n	8008f6e <_strtod_l+0xaf6>
 800902a:	2300      	movs	r3, #0
 800902c:	930c      	str	r3, [sp, #48]	; 0x30
 800902e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009030:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	f7ff ba65 	b.w	8008502 <_strtod_l+0x8a>
 8009038:	2b65      	cmp	r3, #101	; 0x65
 800903a:	f43f ab5c 	beq.w	80086f6 <_strtod_l+0x27e>
 800903e:	2b45      	cmp	r3, #69	; 0x45
 8009040:	f43f ab59 	beq.w	80086f6 <_strtod_l+0x27e>
 8009044:	2201      	movs	r2, #1
 8009046:	f7ff bb8d 	b.w	8008764 <_strtod_l+0x2ec>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	ffc00000 	.word	0xffc00000
 8009054:	41dfffff 	.word	0x41dfffff
 8009058:	94a03595 	.word	0x94a03595
 800905c:	3fcfffff 	.word	0x3fcfffff

08009060 <strtod>:
 8009060:	460a      	mov	r2, r1
 8009062:	4601      	mov	r1, r0
 8009064:	4802      	ldr	r0, [pc, #8]	; (8009070 <strtod+0x10>)
 8009066:	4b03      	ldr	r3, [pc, #12]	; (8009074 <strtod+0x14>)
 8009068:	6800      	ldr	r0, [r0, #0]
 800906a:	f7ff ba05 	b.w	8008478 <_strtod_l>
 800906e:	bf00      	nop
 8009070:	20000010 	.word	0x20000010
 8009074:	20000078 	.word	0x20000078

08009078 <rshift>:
 8009078:	6903      	ldr	r3, [r0, #16]
 800907a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800907e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009082:	f100 0414 	add.w	r4, r0, #20
 8009086:	ea4f 1261 	mov.w	r2, r1, asr #5
 800908a:	dd46      	ble.n	800911a <rshift+0xa2>
 800908c:	f011 011f 	ands.w	r1, r1, #31
 8009090:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009094:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009098:	d10c      	bne.n	80090b4 <rshift+0x3c>
 800909a:	4629      	mov	r1, r5
 800909c:	f100 0710 	add.w	r7, r0, #16
 80090a0:	42b1      	cmp	r1, r6
 80090a2:	d335      	bcc.n	8009110 <rshift+0x98>
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	1eea      	subs	r2, r5, #3
 80090aa:	4296      	cmp	r6, r2
 80090ac:	bf38      	it	cc
 80090ae:	2300      	movcc	r3, #0
 80090b0:	4423      	add	r3, r4
 80090b2:	e015      	b.n	80090e0 <rshift+0x68>
 80090b4:	46a1      	mov	r9, r4
 80090b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090ba:	f1c1 0820 	rsb	r8, r1, #32
 80090be:	40cf      	lsrs	r7, r1
 80090c0:	f105 0e04 	add.w	lr, r5, #4
 80090c4:	4576      	cmp	r6, lr
 80090c6:	46f4      	mov	ip, lr
 80090c8:	d816      	bhi.n	80090f8 <rshift+0x80>
 80090ca:	1a9b      	subs	r3, r3, r2
 80090cc:	009a      	lsls	r2, r3, #2
 80090ce:	3a04      	subs	r2, #4
 80090d0:	3501      	adds	r5, #1
 80090d2:	42ae      	cmp	r6, r5
 80090d4:	bf38      	it	cc
 80090d6:	2200      	movcc	r2, #0
 80090d8:	18a3      	adds	r3, r4, r2
 80090da:	50a7      	str	r7, [r4, r2]
 80090dc:	b107      	cbz	r7, 80090e0 <rshift+0x68>
 80090de:	3304      	adds	r3, #4
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	eba3 0204 	sub.w	r2, r3, r4
 80090e6:	bf08      	it	eq
 80090e8:	2300      	moveq	r3, #0
 80090ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090ee:	6102      	str	r2, [r0, #16]
 80090f0:	bf08      	it	eq
 80090f2:	6143      	streq	r3, [r0, #20]
 80090f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090f8:	f8dc c000 	ldr.w	ip, [ip]
 80090fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009100:	ea4c 0707 	orr.w	r7, ip, r7
 8009104:	f849 7b04 	str.w	r7, [r9], #4
 8009108:	f85e 7b04 	ldr.w	r7, [lr], #4
 800910c:	40cf      	lsrs	r7, r1
 800910e:	e7d9      	b.n	80090c4 <rshift+0x4c>
 8009110:	f851 cb04 	ldr.w	ip, [r1], #4
 8009114:	f847 cf04 	str.w	ip, [r7, #4]!
 8009118:	e7c2      	b.n	80090a0 <rshift+0x28>
 800911a:	4623      	mov	r3, r4
 800911c:	e7e0      	b.n	80090e0 <rshift+0x68>

0800911e <__hexdig_fun>:
 800911e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009122:	2b09      	cmp	r3, #9
 8009124:	d802      	bhi.n	800912c <__hexdig_fun+0xe>
 8009126:	3820      	subs	r0, #32
 8009128:	b2c0      	uxtb	r0, r0
 800912a:	4770      	bx	lr
 800912c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009130:	2b05      	cmp	r3, #5
 8009132:	d801      	bhi.n	8009138 <__hexdig_fun+0x1a>
 8009134:	3847      	subs	r0, #71	; 0x47
 8009136:	e7f7      	b.n	8009128 <__hexdig_fun+0xa>
 8009138:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800913c:	2b05      	cmp	r3, #5
 800913e:	d801      	bhi.n	8009144 <__hexdig_fun+0x26>
 8009140:	3827      	subs	r0, #39	; 0x27
 8009142:	e7f1      	b.n	8009128 <__hexdig_fun+0xa>
 8009144:	2000      	movs	r0, #0
 8009146:	4770      	bx	lr

08009148 <__gethex>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	b08b      	sub	sp, #44	; 0x2c
 800914e:	9306      	str	r3, [sp, #24]
 8009150:	4bb9      	ldr	r3, [pc, #740]	; (8009438 <__gethex+0x2f0>)
 8009152:	9002      	str	r0, [sp, #8]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	468b      	mov	fp, r1
 8009158:	4618      	mov	r0, r3
 800915a:	4690      	mov	r8, r2
 800915c:	9303      	str	r3, [sp, #12]
 800915e:	f7f7 f867 	bl	8000230 <strlen>
 8009162:	4682      	mov	sl, r0
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	f8db 2000 	ldr.w	r2, [fp]
 800916a:	4403      	add	r3, r0
 800916c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009170:	9307      	str	r3, [sp, #28]
 8009172:	1c93      	adds	r3, r2, #2
 8009174:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009178:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800917c:	32fe      	adds	r2, #254	; 0xfe
 800917e:	18d1      	adds	r1, r2, r3
 8009180:	461f      	mov	r7, r3
 8009182:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009186:	9101      	str	r1, [sp, #4]
 8009188:	2830      	cmp	r0, #48	; 0x30
 800918a:	d0f8      	beq.n	800917e <__gethex+0x36>
 800918c:	f7ff ffc7 	bl	800911e <__hexdig_fun>
 8009190:	4604      	mov	r4, r0
 8009192:	2800      	cmp	r0, #0
 8009194:	d13a      	bne.n	800920c <__gethex+0xc4>
 8009196:	4652      	mov	r2, sl
 8009198:	4638      	mov	r0, r7
 800919a:	9903      	ldr	r1, [sp, #12]
 800919c:	f001 fb0c 	bl	800a7b8 <strncmp>
 80091a0:	4605      	mov	r5, r0
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d166      	bne.n	8009274 <__gethex+0x12c>
 80091a6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80091aa:	eb07 060a 	add.w	r6, r7, sl
 80091ae:	f7ff ffb6 	bl	800911e <__hexdig_fun>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d060      	beq.n	8009278 <__gethex+0x130>
 80091b6:	4633      	mov	r3, r6
 80091b8:	7818      	ldrb	r0, [r3, #0]
 80091ba:	461f      	mov	r7, r3
 80091bc:	2830      	cmp	r0, #48	; 0x30
 80091be:	f103 0301 	add.w	r3, r3, #1
 80091c2:	d0f9      	beq.n	80091b8 <__gethex+0x70>
 80091c4:	f7ff ffab 	bl	800911e <__hexdig_fun>
 80091c8:	2301      	movs	r3, #1
 80091ca:	fab0 f480 	clz	r4, r0
 80091ce:	4635      	mov	r5, r6
 80091d0:	0964      	lsrs	r4, r4, #5
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	463a      	mov	r2, r7
 80091d6:	4616      	mov	r6, r2
 80091d8:	7830      	ldrb	r0, [r6, #0]
 80091da:	3201      	adds	r2, #1
 80091dc:	f7ff ff9f 	bl	800911e <__hexdig_fun>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d1f8      	bne.n	80091d6 <__gethex+0x8e>
 80091e4:	4652      	mov	r2, sl
 80091e6:	4630      	mov	r0, r6
 80091e8:	9903      	ldr	r1, [sp, #12]
 80091ea:	f001 fae5 	bl	800a7b8 <strncmp>
 80091ee:	b980      	cbnz	r0, 8009212 <__gethex+0xca>
 80091f0:	b94d      	cbnz	r5, 8009206 <__gethex+0xbe>
 80091f2:	eb06 050a 	add.w	r5, r6, sl
 80091f6:	462a      	mov	r2, r5
 80091f8:	4616      	mov	r6, r2
 80091fa:	7830      	ldrb	r0, [r6, #0]
 80091fc:	3201      	adds	r2, #1
 80091fe:	f7ff ff8e 	bl	800911e <__hexdig_fun>
 8009202:	2800      	cmp	r0, #0
 8009204:	d1f8      	bne.n	80091f8 <__gethex+0xb0>
 8009206:	1bad      	subs	r5, r5, r6
 8009208:	00ad      	lsls	r5, r5, #2
 800920a:	e004      	b.n	8009216 <__gethex+0xce>
 800920c:	2400      	movs	r4, #0
 800920e:	4625      	mov	r5, r4
 8009210:	e7e0      	b.n	80091d4 <__gethex+0x8c>
 8009212:	2d00      	cmp	r5, #0
 8009214:	d1f7      	bne.n	8009206 <__gethex+0xbe>
 8009216:	7833      	ldrb	r3, [r6, #0]
 8009218:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800921c:	2b50      	cmp	r3, #80	; 0x50
 800921e:	d139      	bne.n	8009294 <__gethex+0x14c>
 8009220:	7873      	ldrb	r3, [r6, #1]
 8009222:	2b2b      	cmp	r3, #43	; 0x2b
 8009224:	d02a      	beq.n	800927c <__gethex+0x134>
 8009226:	2b2d      	cmp	r3, #45	; 0x2d
 8009228:	d02c      	beq.n	8009284 <__gethex+0x13c>
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	1c71      	adds	r1, r6, #1
 8009230:	7808      	ldrb	r0, [r1, #0]
 8009232:	f7ff ff74 	bl	800911e <__hexdig_fun>
 8009236:	1e43      	subs	r3, r0, #1
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b18      	cmp	r3, #24
 800923c:	d82a      	bhi.n	8009294 <__gethex+0x14c>
 800923e:	f1a0 0210 	sub.w	r2, r0, #16
 8009242:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009246:	f7ff ff6a 	bl	800911e <__hexdig_fun>
 800924a:	1e43      	subs	r3, r0, #1
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b18      	cmp	r3, #24
 8009250:	d91b      	bls.n	800928a <__gethex+0x142>
 8009252:	f1b9 0f00 	cmp.w	r9, #0
 8009256:	d000      	beq.n	800925a <__gethex+0x112>
 8009258:	4252      	negs	r2, r2
 800925a:	4415      	add	r5, r2
 800925c:	f8cb 1000 	str.w	r1, [fp]
 8009260:	b1d4      	cbz	r4, 8009298 <__gethex+0x150>
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bf14      	ite	ne
 8009268:	2700      	movne	r7, #0
 800926a:	2706      	moveq	r7, #6
 800926c:	4638      	mov	r0, r7
 800926e:	b00b      	add	sp, #44	; 0x2c
 8009270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009274:	463e      	mov	r6, r7
 8009276:	4625      	mov	r5, r4
 8009278:	2401      	movs	r4, #1
 800927a:	e7cc      	b.n	8009216 <__gethex+0xce>
 800927c:	f04f 0900 	mov.w	r9, #0
 8009280:	1cb1      	adds	r1, r6, #2
 8009282:	e7d5      	b.n	8009230 <__gethex+0xe8>
 8009284:	f04f 0901 	mov.w	r9, #1
 8009288:	e7fa      	b.n	8009280 <__gethex+0x138>
 800928a:	230a      	movs	r3, #10
 800928c:	fb03 0202 	mla	r2, r3, r2, r0
 8009290:	3a10      	subs	r2, #16
 8009292:	e7d6      	b.n	8009242 <__gethex+0xfa>
 8009294:	4631      	mov	r1, r6
 8009296:	e7e1      	b.n	800925c <__gethex+0x114>
 8009298:	4621      	mov	r1, r4
 800929a:	1bf3      	subs	r3, r6, r7
 800929c:	3b01      	subs	r3, #1
 800929e:	2b07      	cmp	r3, #7
 80092a0:	dc0a      	bgt.n	80092b8 <__gethex+0x170>
 80092a2:	9802      	ldr	r0, [sp, #8]
 80092a4:	f000 fa60 	bl	8009768 <_Balloc>
 80092a8:	4604      	mov	r4, r0
 80092aa:	b940      	cbnz	r0, 80092be <__gethex+0x176>
 80092ac:	4602      	mov	r2, r0
 80092ae:	21de      	movs	r1, #222	; 0xde
 80092b0:	4b62      	ldr	r3, [pc, #392]	; (800943c <__gethex+0x2f4>)
 80092b2:	4863      	ldr	r0, [pc, #396]	; (8009440 <__gethex+0x2f8>)
 80092b4:	f001 faa0 	bl	800a7f8 <__assert_func>
 80092b8:	3101      	adds	r1, #1
 80092ba:	105b      	asrs	r3, r3, #1
 80092bc:	e7ef      	b.n	800929e <__gethex+0x156>
 80092be:	f04f 0b00 	mov.w	fp, #0
 80092c2:	f100 0914 	add.w	r9, r0, #20
 80092c6:	f1ca 0301 	rsb	r3, sl, #1
 80092ca:	f8cd 9010 	str.w	r9, [sp, #16]
 80092ce:	f8cd b004 	str.w	fp, [sp, #4]
 80092d2:	9308      	str	r3, [sp, #32]
 80092d4:	42b7      	cmp	r7, r6
 80092d6:	d33f      	bcc.n	8009358 <__gethex+0x210>
 80092d8:	9f04      	ldr	r7, [sp, #16]
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	f847 3b04 	str.w	r3, [r7], #4
 80092e0:	eba7 0709 	sub.w	r7, r7, r9
 80092e4:	10bf      	asrs	r7, r7, #2
 80092e6:	6127      	str	r7, [r4, #16]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fb33 	bl	8009954 <__hi0bits>
 80092ee:	017f      	lsls	r7, r7, #5
 80092f0:	f8d8 6000 	ldr.w	r6, [r8]
 80092f4:	1a3f      	subs	r7, r7, r0
 80092f6:	42b7      	cmp	r7, r6
 80092f8:	dd62      	ble.n	80093c0 <__gethex+0x278>
 80092fa:	1bbf      	subs	r7, r7, r6
 80092fc:	4639      	mov	r1, r7
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 fec9 	bl	800a096 <__any_on>
 8009304:	4682      	mov	sl, r0
 8009306:	b1a8      	cbz	r0, 8009334 <__gethex+0x1ec>
 8009308:	f04f 0a01 	mov.w	sl, #1
 800930c:	1e7b      	subs	r3, r7, #1
 800930e:	1159      	asrs	r1, r3, #5
 8009310:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009314:	f003 021f 	and.w	r2, r3, #31
 8009318:	fa0a f202 	lsl.w	r2, sl, r2
 800931c:	420a      	tst	r2, r1
 800931e:	d009      	beq.n	8009334 <__gethex+0x1ec>
 8009320:	4553      	cmp	r3, sl
 8009322:	dd05      	ble.n	8009330 <__gethex+0x1e8>
 8009324:	4620      	mov	r0, r4
 8009326:	1eb9      	subs	r1, r7, #2
 8009328:	f000 feb5 	bl	800a096 <__any_on>
 800932c:	2800      	cmp	r0, #0
 800932e:	d144      	bne.n	80093ba <__gethex+0x272>
 8009330:	f04f 0a02 	mov.w	sl, #2
 8009334:	4639      	mov	r1, r7
 8009336:	4620      	mov	r0, r4
 8009338:	f7ff fe9e 	bl	8009078 <rshift>
 800933c:	443d      	add	r5, r7
 800933e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009342:	42ab      	cmp	r3, r5
 8009344:	da4a      	bge.n	80093dc <__gethex+0x294>
 8009346:	4621      	mov	r1, r4
 8009348:	9802      	ldr	r0, [sp, #8]
 800934a:	f000 fa4d 	bl	80097e8 <_Bfree>
 800934e:	2300      	movs	r3, #0
 8009350:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009352:	27a3      	movs	r7, #163	; 0xa3
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	e789      	b.n	800926c <__gethex+0x124>
 8009358:	1e73      	subs	r3, r6, #1
 800935a:	9a07      	ldr	r2, [sp, #28]
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009362:	4293      	cmp	r3, r2
 8009364:	d019      	beq.n	800939a <__gethex+0x252>
 8009366:	f1bb 0f20 	cmp.w	fp, #32
 800936a:	d107      	bne.n	800937c <__gethex+0x234>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	9a01      	ldr	r2, [sp, #4]
 8009370:	f843 2b04 	str.w	r2, [r3], #4
 8009374:	9304      	str	r3, [sp, #16]
 8009376:	2300      	movs	r3, #0
 8009378:	469b      	mov	fp, r3
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009380:	f7ff fecd 	bl	800911e <__hexdig_fun>
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	f000 000f 	and.w	r0, r0, #15
 800938a:	fa00 f00b 	lsl.w	r0, r0, fp
 800938e:	4303      	orrs	r3, r0
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f10b 0b04 	add.w	fp, fp, #4
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	e00d      	b.n	80093b6 <__gethex+0x26e>
 800939a:	9b05      	ldr	r3, [sp, #20]
 800939c:	9a08      	ldr	r2, [sp, #32]
 800939e:	4413      	add	r3, r2
 80093a0:	42bb      	cmp	r3, r7
 80093a2:	d3e0      	bcc.n	8009366 <__gethex+0x21e>
 80093a4:	4618      	mov	r0, r3
 80093a6:	4652      	mov	r2, sl
 80093a8:	9903      	ldr	r1, [sp, #12]
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	f001 fa04 	bl	800a7b8 <strncmp>
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	2800      	cmp	r0, #0
 80093b4:	d1d7      	bne.n	8009366 <__gethex+0x21e>
 80093b6:	461e      	mov	r6, r3
 80093b8:	e78c      	b.n	80092d4 <__gethex+0x18c>
 80093ba:	f04f 0a03 	mov.w	sl, #3
 80093be:	e7b9      	b.n	8009334 <__gethex+0x1ec>
 80093c0:	da09      	bge.n	80093d6 <__gethex+0x28e>
 80093c2:	1bf7      	subs	r7, r6, r7
 80093c4:	4621      	mov	r1, r4
 80093c6:	463a      	mov	r2, r7
 80093c8:	9802      	ldr	r0, [sp, #8]
 80093ca:	f000 fc25 	bl	8009c18 <__lshift>
 80093ce:	4604      	mov	r4, r0
 80093d0:	1bed      	subs	r5, r5, r7
 80093d2:	f100 0914 	add.w	r9, r0, #20
 80093d6:	f04f 0a00 	mov.w	sl, #0
 80093da:	e7b0      	b.n	800933e <__gethex+0x1f6>
 80093dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80093e0:	42a8      	cmp	r0, r5
 80093e2:	dd71      	ble.n	80094c8 <__gethex+0x380>
 80093e4:	1b45      	subs	r5, r0, r5
 80093e6:	42ae      	cmp	r6, r5
 80093e8:	dc34      	bgt.n	8009454 <__gethex+0x30c>
 80093ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d028      	beq.n	8009444 <__gethex+0x2fc>
 80093f2:	2b03      	cmp	r3, #3
 80093f4:	d02a      	beq.n	800944c <__gethex+0x304>
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d115      	bne.n	8009426 <__gethex+0x2de>
 80093fa:	42ae      	cmp	r6, r5
 80093fc:	d113      	bne.n	8009426 <__gethex+0x2de>
 80093fe:	2e01      	cmp	r6, #1
 8009400:	d10b      	bne.n	800941a <__gethex+0x2d2>
 8009402:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009406:	9a06      	ldr	r2, [sp, #24]
 8009408:	2762      	movs	r7, #98	; 0x62
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	2301      	movs	r3, #1
 800940e:	6123      	str	r3, [r4, #16]
 8009410:	f8c9 3000 	str.w	r3, [r9]
 8009414:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009416:	601c      	str	r4, [r3, #0]
 8009418:	e728      	b.n	800926c <__gethex+0x124>
 800941a:	4620      	mov	r0, r4
 800941c:	1e71      	subs	r1, r6, #1
 800941e:	f000 fe3a 	bl	800a096 <__any_on>
 8009422:	2800      	cmp	r0, #0
 8009424:	d1ed      	bne.n	8009402 <__gethex+0x2ba>
 8009426:	4621      	mov	r1, r4
 8009428:	9802      	ldr	r0, [sp, #8]
 800942a:	f000 f9dd 	bl	80097e8 <_Bfree>
 800942e:	2300      	movs	r3, #0
 8009430:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009432:	2750      	movs	r7, #80	; 0x50
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	e719      	b.n	800926c <__gethex+0x124>
 8009438:	0800c0ec 	.word	0x0800c0ec
 800943c:	0800c070 	.word	0x0800c070
 8009440:	0800c081 	.word	0x0800c081
 8009444:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1ed      	bne.n	8009426 <__gethex+0x2de>
 800944a:	e7da      	b.n	8009402 <__gethex+0x2ba>
 800944c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1d7      	bne.n	8009402 <__gethex+0x2ba>
 8009452:	e7e8      	b.n	8009426 <__gethex+0x2de>
 8009454:	1e6f      	subs	r7, r5, #1
 8009456:	f1ba 0f00 	cmp.w	sl, #0
 800945a:	d132      	bne.n	80094c2 <__gethex+0x37a>
 800945c:	b127      	cbz	r7, 8009468 <__gethex+0x320>
 800945e:	4639      	mov	r1, r7
 8009460:	4620      	mov	r0, r4
 8009462:	f000 fe18 	bl	800a096 <__any_on>
 8009466:	4682      	mov	sl, r0
 8009468:	2101      	movs	r1, #1
 800946a:	117b      	asrs	r3, r7, #5
 800946c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009470:	f007 071f 	and.w	r7, r7, #31
 8009474:	fa01 f707 	lsl.w	r7, r1, r7
 8009478:	421f      	tst	r7, r3
 800947a:	f04f 0702 	mov.w	r7, #2
 800947e:	4629      	mov	r1, r5
 8009480:	4620      	mov	r0, r4
 8009482:	bf18      	it	ne
 8009484:	f04a 0a02 	orrne.w	sl, sl, #2
 8009488:	1b76      	subs	r6, r6, r5
 800948a:	f7ff fdf5 	bl	8009078 <rshift>
 800948e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009492:	f1ba 0f00 	cmp.w	sl, #0
 8009496:	d048      	beq.n	800952a <__gethex+0x3e2>
 8009498:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d015      	beq.n	80094cc <__gethex+0x384>
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d017      	beq.n	80094d4 <__gethex+0x38c>
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d109      	bne.n	80094bc <__gethex+0x374>
 80094a8:	f01a 0f02 	tst.w	sl, #2
 80094ac:	d006      	beq.n	80094bc <__gethex+0x374>
 80094ae:	f8d9 0000 	ldr.w	r0, [r9]
 80094b2:	ea4a 0a00 	orr.w	sl, sl, r0
 80094b6:	f01a 0f01 	tst.w	sl, #1
 80094ba:	d10e      	bne.n	80094da <__gethex+0x392>
 80094bc:	f047 0710 	orr.w	r7, r7, #16
 80094c0:	e033      	b.n	800952a <__gethex+0x3e2>
 80094c2:	f04f 0a01 	mov.w	sl, #1
 80094c6:	e7cf      	b.n	8009468 <__gethex+0x320>
 80094c8:	2701      	movs	r7, #1
 80094ca:	e7e2      	b.n	8009492 <__gethex+0x34a>
 80094cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094ce:	f1c3 0301 	rsb	r3, r3, #1
 80094d2:	9315      	str	r3, [sp, #84]	; 0x54
 80094d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0f0      	beq.n	80094bc <__gethex+0x374>
 80094da:	f04f 0c00 	mov.w	ip, #0
 80094de:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094e2:	f104 0314 	add.w	r3, r4, #20
 80094e6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094ea:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80094f8:	d01c      	beq.n	8009534 <__gethex+0x3ec>
 80094fa:	3201      	adds	r2, #1
 80094fc:	6002      	str	r2, [r0, #0]
 80094fe:	2f02      	cmp	r7, #2
 8009500:	f104 0314 	add.w	r3, r4, #20
 8009504:	d13d      	bne.n	8009582 <__gethex+0x43a>
 8009506:	f8d8 2000 	ldr.w	r2, [r8]
 800950a:	3a01      	subs	r2, #1
 800950c:	42b2      	cmp	r2, r6
 800950e:	d10a      	bne.n	8009526 <__gethex+0x3de>
 8009510:	2201      	movs	r2, #1
 8009512:	1171      	asrs	r1, r6, #5
 8009514:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009518:	f006 061f 	and.w	r6, r6, #31
 800951c:	fa02 f606 	lsl.w	r6, r2, r6
 8009520:	421e      	tst	r6, r3
 8009522:	bf18      	it	ne
 8009524:	4617      	movne	r7, r2
 8009526:	f047 0720 	orr.w	r7, r7, #32
 800952a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800952c:	601c      	str	r4, [r3, #0]
 800952e:	9b06      	ldr	r3, [sp, #24]
 8009530:	601d      	str	r5, [r3, #0]
 8009532:	e69b      	b.n	800926c <__gethex+0x124>
 8009534:	4299      	cmp	r1, r3
 8009536:	f843 cc04 	str.w	ip, [r3, #-4]
 800953a:	d8d8      	bhi.n	80094ee <__gethex+0x3a6>
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	459b      	cmp	fp, r3
 8009540:	db17      	blt.n	8009572 <__gethex+0x42a>
 8009542:	6861      	ldr	r1, [r4, #4]
 8009544:	9802      	ldr	r0, [sp, #8]
 8009546:	3101      	adds	r1, #1
 8009548:	f000 f90e 	bl	8009768 <_Balloc>
 800954c:	4681      	mov	r9, r0
 800954e:	b918      	cbnz	r0, 8009558 <__gethex+0x410>
 8009550:	4602      	mov	r2, r0
 8009552:	2184      	movs	r1, #132	; 0x84
 8009554:	4b19      	ldr	r3, [pc, #100]	; (80095bc <__gethex+0x474>)
 8009556:	e6ac      	b.n	80092b2 <__gethex+0x16a>
 8009558:	6922      	ldr	r2, [r4, #16]
 800955a:	f104 010c 	add.w	r1, r4, #12
 800955e:	3202      	adds	r2, #2
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	300c      	adds	r0, #12
 8009564:	f7fe ff30 	bl	80083c8 <memcpy>
 8009568:	4621      	mov	r1, r4
 800956a:	9802      	ldr	r0, [sp, #8]
 800956c:	f000 f93c 	bl	80097e8 <_Bfree>
 8009570:	464c      	mov	r4, r9
 8009572:	6923      	ldr	r3, [r4, #16]
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	6122      	str	r2, [r4, #16]
 8009578:	2201      	movs	r2, #1
 800957a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800957e:	615a      	str	r2, [r3, #20]
 8009580:	e7bd      	b.n	80094fe <__gethex+0x3b6>
 8009582:	6922      	ldr	r2, [r4, #16]
 8009584:	455a      	cmp	r2, fp
 8009586:	dd0b      	ble.n	80095a0 <__gethex+0x458>
 8009588:	2101      	movs	r1, #1
 800958a:	4620      	mov	r0, r4
 800958c:	f7ff fd74 	bl	8009078 <rshift>
 8009590:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009594:	3501      	adds	r5, #1
 8009596:	42ab      	cmp	r3, r5
 8009598:	f6ff aed5 	blt.w	8009346 <__gethex+0x1fe>
 800959c:	2701      	movs	r7, #1
 800959e:	e7c2      	b.n	8009526 <__gethex+0x3de>
 80095a0:	f016 061f 	ands.w	r6, r6, #31
 80095a4:	d0fa      	beq.n	800959c <__gethex+0x454>
 80095a6:	449a      	add	sl, r3
 80095a8:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80095ac:	f000 f9d2 	bl	8009954 <__hi0bits>
 80095b0:	f1c6 0620 	rsb	r6, r6, #32
 80095b4:	42b0      	cmp	r0, r6
 80095b6:	dbe7      	blt.n	8009588 <__gethex+0x440>
 80095b8:	e7f0      	b.n	800959c <__gethex+0x454>
 80095ba:	bf00      	nop
 80095bc:	0800c070 	.word	0x0800c070

080095c0 <L_shift>:
 80095c0:	f1c2 0208 	rsb	r2, r2, #8
 80095c4:	0092      	lsls	r2, r2, #2
 80095c6:	b570      	push	{r4, r5, r6, lr}
 80095c8:	f1c2 0620 	rsb	r6, r2, #32
 80095cc:	6843      	ldr	r3, [r0, #4]
 80095ce:	6804      	ldr	r4, [r0, #0]
 80095d0:	fa03 f506 	lsl.w	r5, r3, r6
 80095d4:	432c      	orrs	r4, r5
 80095d6:	40d3      	lsrs	r3, r2
 80095d8:	6004      	str	r4, [r0, #0]
 80095da:	f840 3f04 	str.w	r3, [r0, #4]!
 80095de:	4288      	cmp	r0, r1
 80095e0:	d3f4      	bcc.n	80095cc <L_shift+0xc>
 80095e2:	bd70      	pop	{r4, r5, r6, pc}

080095e4 <__match>:
 80095e4:	b530      	push	{r4, r5, lr}
 80095e6:	6803      	ldr	r3, [r0, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ee:	b914      	cbnz	r4, 80095f6 <__match+0x12>
 80095f0:	6003      	str	r3, [r0, #0]
 80095f2:	2001      	movs	r0, #1
 80095f4:	bd30      	pop	{r4, r5, pc}
 80095f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80095fe:	2d19      	cmp	r5, #25
 8009600:	bf98      	it	ls
 8009602:	3220      	addls	r2, #32
 8009604:	42a2      	cmp	r2, r4
 8009606:	d0f0      	beq.n	80095ea <__match+0x6>
 8009608:	2000      	movs	r0, #0
 800960a:	e7f3      	b.n	80095f4 <__match+0x10>

0800960c <__hexnan>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	2500      	movs	r5, #0
 8009612:	680b      	ldr	r3, [r1, #0]
 8009614:	4682      	mov	sl, r0
 8009616:	115e      	asrs	r6, r3, #5
 8009618:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800961c:	f013 031f 	ands.w	r3, r3, #31
 8009620:	bf18      	it	ne
 8009622:	3604      	addne	r6, #4
 8009624:	1f37      	subs	r7, r6, #4
 8009626:	4690      	mov	r8, r2
 8009628:	46b9      	mov	r9, r7
 800962a:	463c      	mov	r4, r7
 800962c:	46ab      	mov	fp, r5
 800962e:	b087      	sub	sp, #28
 8009630:	6801      	ldr	r1, [r0, #0]
 8009632:	9301      	str	r3, [sp, #4]
 8009634:	f846 5c04 	str.w	r5, [r6, #-4]
 8009638:	9502      	str	r5, [sp, #8]
 800963a:	784a      	ldrb	r2, [r1, #1]
 800963c:	1c4b      	adds	r3, r1, #1
 800963e:	9303      	str	r3, [sp, #12]
 8009640:	b342      	cbz	r2, 8009694 <__hexnan+0x88>
 8009642:	4610      	mov	r0, r2
 8009644:	9105      	str	r1, [sp, #20]
 8009646:	9204      	str	r2, [sp, #16]
 8009648:	f7ff fd69 	bl	800911e <__hexdig_fun>
 800964c:	2800      	cmp	r0, #0
 800964e:	d14f      	bne.n	80096f0 <__hexnan+0xe4>
 8009650:	9a04      	ldr	r2, [sp, #16]
 8009652:	9905      	ldr	r1, [sp, #20]
 8009654:	2a20      	cmp	r2, #32
 8009656:	d818      	bhi.n	800968a <__hexnan+0x7e>
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	459b      	cmp	fp, r3
 800965c:	dd13      	ble.n	8009686 <__hexnan+0x7a>
 800965e:	454c      	cmp	r4, r9
 8009660:	d206      	bcs.n	8009670 <__hexnan+0x64>
 8009662:	2d07      	cmp	r5, #7
 8009664:	dc04      	bgt.n	8009670 <__hexnan+0x64>
 8009666:	462a      	mov	r2, r5
 8009668:	4649      	mov	r1, r9
 800966a:	4620      	mov	r0, r4
 800966c:	f7ff ffa8 	bl	80095c0 <L_shift>
 8009670:	4544      	cmp	r4, r8
 8009672:	d950      	bls.n	8009716 <__hexnan+0x10a>
 8009674:	2300      	movs	r3, #0
 8009676:	f1a4 0904 	sub.w	r9, r4, #4
 800967a:	f844 3c04 	str.w	r3, [r4, #-4]
 800967e:	461d      	mov	r5, r3
 8009680:	464c      	mov	r4, r9
 8009682:	f8cd b008 	str.w	fp, [sp, #8]
 8009686:	9903      	ldr	r1, [sp, #12]
 8009688:	e7d7      	b.n	800963a <__hexnan+0x2e>
 800968a:	2a29      	cmp	r2, #41	; 0x29
 800968c:	d156      	bne.n	800973c <__hexnan+0x130>
 800968e:	3102      	adds	r1, #2
 8009690:	f8ca 1000 	str.w	r1, [sl]
 8009694:	f1bb 0f00 	cmp.w	fp, #0
 8009698:	d050      	beq.n	800973c <__hexnan+0x130>
 800969a:	454c      	cmp	r4, r9
 800969c:	d206      	bcs.n	80096ac <__hexnan+0xa0>
 800969e:	2d07      	cmp	r5, #7
 80096a0:	dc04      	bgt.n	80096ac <__hexnan+0xa0>
 80096a2:	462a      	mov	r2, r5
 80096a4:	4649      	mov	r1, r9
 80096a6:	4620      	mov	r0, r4
 80096a8:	f7ff ff8a 	bl	80095c0 <L_shift>
 80096ac:	4544      	cmp	r4, r8
 80096ae:	d934      	bls.n	800971a <__hexnan+0x10e>
 80096b0:	4623      	mov	r3, r4
 80096b2:	f1a8 0204 	sub.w	r2, r8, #4
 80096b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80096ba:	429f      	cmp	r7, r3
 80096bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80096c0:	d2f9      	bcs.n	80096b6 <__hexnan+0xaa>
 80096c2:	1b3b      	subs	r3, r7, r4
 80096c4:	f023 0303 	bic.w	r3, r3, #3
 80096c8:	3304      	adds	r3, #4
 80096ca:	3401      	adds	r4, #1
 80096cc:	3e03      	subs	r6, #3
 80096ce:	42b4      	cmp	r4, r6
 80096d0:	bf88      	it	hi
 80096d2:	2304      	movhi	r3, #4
 80096d4:	2200      	movs	r2, #0
 80096d6:	4443      	add	r3, r8
 80096d8:	f843 2b04 	str.w	r2, [r3], #4
 80096dc:	429f      	cmp	r7, r3
 80096de:	d2fb      	bcs.n	80096d8 <__hexnan+0xcc>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	b91b      	cbnz	r3, 80096ec <__hexnan+0xe0>
 80096e4:	4547      	cmp	r7, r8
 80096e6:	d127      	bne.n	8009738 <__hexnan+0x12c>
 80096e8:	2301      	movs	r3, #1
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	2005      	movs	r0, #5
 80096ee:	e026      	b.n	800973e <__hexnan+0x132>
 80096f0:	3501      	adds	r5, #1
 80096f2:	2d08      	cmp	r5, #8
 80096f4:	f10b 0b01 	add.w	fp, fp, #1
 80096f8:	dd06      	ble.n	8009708 <__hexnan+0xfc>
 80096fa:	4544      	cmp	r4, r8
 80096fc:	d9c3      	bls.n	8009686 <__hexnan+0x7a>
 80096fe:	2300      	movs	r3, #0
 8009700:	2501      	movs	r5, #1
 8009702:	f844 3c04 	str.w	r3, [r4, #-4]
 8009706:	3c04      	subs	r4, #4
 8009708:	6822      	ldr	r2, [r4, #0]
 800970a:	f000 000f 	and.w	r0, r0, #15
 800970e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009712:	6022      	str	r2, [r4, #0]
 8009714:	e7b7      	b.n	8009686 <__hexnan+0x7a>
 8009716:	2508      	movs	r5, #8
 8009718:	e7b5      	b.n	8009686 <__hexnan+0x7a>
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0df      	beq.n	80096e0 <__hexnan+0xd4>
 8009720:	f04f 32ff 	mov.w	r2, #4294967295
 8009724:	f1c3 0320 	rsb	r3, r3, #32
 8009728:	fa22 f303 	lsr.w	r3, r2, r3
 800972c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009730:	401a      	ands	r2, r3
 8009732:	f846 2c04 	str.w	r2, [r6, #-4]
 8009736:	e7d3      	b.n	80096e0 <__hexnan+0xd4>
 8009738:	3f04      	subs	r7, #4
 800973a:	e7d1      	b.n	80096e0 <__hexnan+0xd4>
 800973c:	2004      	movs	r0, #4
 800973e:	b007      	add	sp, #28
 8009740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009744 <__ascii_mbtowc>:
 8009744:	b082      	sub	sp, #8
 8009746:	b901      	cbnz	r1, 800974a <__ascii_mbtowc+0x6>
 8009748:	a901      	add	r1, sp, #4
 800974a:	b142      	cbz	r2, 800975e <__ascii_mbtowc+0x1a>
 800974c:	b14b      	cbz	r3, 8009762 <__ascii_mbtowc+0x1e>
 800974e:	7813      	ldrb	r3, [r2, #0]
 8009750:	600b      	str	r3, [r1, #0]
 8009752:	7812      	ldrb	r2, [r2, #0]
 8009754:	1e10      	subs	r0, r2, #0
 8009756:	bf18      	it	ne
 8009758:	2001      	movne	r0, #1
 800975a:	b002      	add	sp, #8
 800975c:	4770      	bx	lr
 800975e:	4610      	mov	r0, r2
 8009760:	e7fb      	b.n	800975a <__ascii_mbtowc+0x16>
 8009762:	f06f 0001 	mvn.w	r0, #1
 8009766:	e7f8      	b.n	800975a <__ascii_mbtowc+0x16>

08009768 <_Balloc>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800976c:	4604      	mov	r4, r0
 800976e:	460d      	mov	r5, r1
 8009770:	b976      	cbnz	r6, 8009790 <_Balloc+0x28>
 8009772:	2010      	movs	r0, #16
 8009774:	f001 f870 	bl	800a858 <malloc>
 8009778:	4602      	mov	r2, r0
 800977a:	6260      	str	r0, [r4, #36]	; 0x24
 800977c:	b920      	cbnz	r0, 8009788 <_Balloc+0x20>
 800977e:	2166      	movs	r1, #102	; 0x66
 8009780:	4b17      	ldr	r3, [pc, #92]	; (80097e0 <_Balloc+0x78>)
 8009782:	4818      	ldr	r0, [pc, #96]	; (80097e4 <_Balloc+0x7c>)
 8009784:	f001 f838 	bl	800a7f8 <__assert_func>
 8009788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800978c:	6006      	str	r6, [r0, #0]
 800978e:	60c6      	str	r6, [r0, #12]
 8009790:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009792:	68f3      	ldr	r3, [r6, #12]
 8009794:	b183      	cbz	r3, 80097b8 <_Balloc+0x50>
 8009796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800979e:	b9b8      	cbnz	r0, 80097d0 <_Balloc+0x68>
 80097a0:	2101      	movs	r1, #1
 80097a2:	fa01 f605 	lsl.w	r6, r1, r5
 80097a6:	1d72      	adds	r2, r6, #5
 80097a8:	4620      	mov	r0, r4
 80097aa:	0092      	lsls	r2, r2, #2
 80097ac:	f000 fc94 	bl	800a0d8 <_calloc_r>
 80097b0:	b160      	cbz	r0, 80097cc <_Balloc+0x64>
 80097b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097b6:	e00e      	b.n	80097d6 <_Balloc+0x6e>
 80097b8:	2221      	movs	r2, #33	; 0x21
 80097ba:	2104      	movs	r1, #4
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 fc8b 	bl	800a0d8 <_calloc_r>
 80097c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097c4:	60f0      	str	r0, [r6, #12]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d1e4      	bne.n	8009796 <_Balloc+0x2e>
 80097cc:	2000      	movs	r0, #0
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	6802      	ldr	r2, [r0, #0]
 80097d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097d6:	2300      	movs	r3, #0
 80097d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097dc:	e7f7      	b.n	80097ce <_Balloc+0x66>
 80097de:	bf00      	nop
 80097e0:	0800c100 	.word	0x0800c100
 80097e4:	0800c117 	.word	0x0800c117

080097e8 <_Bfree>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b976      	cbnz	r6, 8009810 <_Bfree+0x28>
 80097f2:	2010      	movs	r0, #16
 80097f4:	f001 f830 	bl	800a858 <malloc>
 80097f8:	4602      	mov	r2, r0
 80097fa:	6268      	str	r0, [r5, #36]	; 0x24
 80097fc:	b920      	cbnz	r0, 8009808 <_Bfree+0x20>
 80097fe:	218a      	movs	r1, #138	; 0x8a
 8009800:	4b08      	ldr	r3, [pc, #32]	; (8009824 <_Bfree+0x3c>)
 8009802:	4809      	ldr	r0, [pc, #36]	; (8009828 <_Bfree+0x40>)
 8009804:	f000 fff8 	bl	800a7f8 <__assert_func>
 8009808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800980c:	6006      	str	r6, [r0, #0]
 800980e:	60c6      	str	r6, [r0, #12]
 8009810:	b13c      	cbz	r4, 8009822 <_Bfree+0x3a>
 8009812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009814:	6862      	ldr	r2, [r4, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800981c:	6021      	str	r1, [r4, #0]
 800981e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009822:	bd70      	pop	{r4, r5, r6, pc}
 8009824:	0800c100 	.word	0x0800c100
 8009828:	0800c117 	.word	0x0800c117

0800982c <__multadd>:
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	4698      	mov	r8, r3
 8009832:	460c      	mov	r4, r1
 8009834:	2300      	movs	r3, #0
 8009836:	690e      	ldr	r6, [r1, #16]
 8009838:	4607      	mov	r7, r0
 800983a:	f101 0014 	add.w	r0, r1, #20
 800983e:	6805      	ldr	r5, [r0, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	b2a9      	uxth	r1, r5
 8009844:	fb02 8101 	mla	r1, r2, r1, r8
 8009848:	0c2d      	lsrs	r5, r5, #16
 800984a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800984e:	fb02 c505 	mla	r5, r2, r5, ip
 8009852:	b289      	uxth	r1, r1
 8009854:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009858:	429e      	cmp	r6, r3
 800985a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800985e:	f840 1b04 	str.w	r1, [r0], #4
 8009862:	dcec      	bgt.n	800983e <__multadd+0x12>
 8009864:	f1b8 0f00 	cmp.w	r8, #0
 8009868:	d022      	beq.n	80098b0 <__multadd+0x84>
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	42b3      	cmp	r3, r6
 800986e:	dc19      	bgt.n	80098a4 <__multadd+0x78>
 8009870:	6861      	ldr	r1, [r4, #4]
 8009872:	4638      	mov	r0, r7
 8009874:	3101      	adds	r1, #1
 8009876:	f7ff ff77 	bl	8009768 <_Balloc>
 800987a:	4605      	mov	r5, r0
 800987c:	b928      	cbnz	r0, 800988a <__multadd+0x5e>
 800987e:	4602      	mov	r2, r0
 8009880:	21b5      	movs	r1, #181	; 0xb5
 8009882:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <__multadd+0x8c>)
 8009884:	480d      	ldr	r0, [pc, #52]	; (80098bc <__multadd+0x90>)
 8009886:	f000 ffb7 	bl	800a7f8 <__assert_func>
 800988a:	6922      	ldr	r2, [r4, #16]
 800988c:	f104 010c 	add.w	r1, r4, #12
 8009890:	3202      	adds	r2, #2
 8009892:	0092      	lsls	r2, r2, #2
 8009894:	300c      	adds	r0, #12
 8009896:	f7fe fd97 	bl	80083c8 <memcpy>
 800989a:	4621      	mov	r1, r4
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ffa3 	bl	80097e8 <_Bfree>
 80098a2:	462c      	mov	r4, r5
 80098a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80098a8:	3601      	adds	r6, #1
 80098aa:	f8c3 8014 	str.w	r8, [r3, #20]
 80098ae:	6126      	str	r6, [r4, #16]
 80098b0:	4620      	mov	r0, r4
 80098b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b6:	bf00      	nop
 80098b8:	0800c070 	.word	0x0800c070
 80098bc:	0800c117 	.word	0x0800c117

080098c0 <__s2b>:
 80098c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c4:	4615      	mov	r5, r2
 80098c6:	2209      	movs	r2, #9
 80098c8:	461f      	mov	r7, r3
 80098ca:	3308      	adds	r3, #8
 80098cc:	460c      	mov	r4, r1
 80098ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80098d2:	4606      	mov	r6, r0
 80098d4:	2201      	movs	r2, #1
 80098d6:	2100      	movs	r1, #0
 80098d8:	429a      	cmp	r2, r3
 80098da:	db09      	blt.n	80098f0 <__s2b+0x30>
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff ff43 	bl	8009768 <_Balloc>
 80098e2:	b940      	cbnz	r0, 80098f6 <__s2b+0x36>
 80098e4:	4602      	mov	r2, r0
 80098e6:	21ce      	movs	r1, #206	; 0xce
 80098e8:	4b18      	ldr	r3, [pc, #96]	; (800994c <__s2b+0x8c>)
 80098ea:	4819      	ldr	r0, [pc, #100]	; (8009950 <__s2b+0x90>)
 80098ec:	f000 ff84 	bl	800a7f8 <__assert_func>
 80098f0:	0052      	lsls	r2, r2, #1
 80098f2:	3101      	adds	r1, #1
 80098f4:	e7f0      	b.n	80098d8 <__s2b+0x18>
 80098f6:	9b08      	ldr	r3, [sp, #32]
 80098f8:	2d09      	cmp	r5, #9
 80098fa:	6143      	str	r3, [r0, #20]
 80098fc:	f04f 0301 	mov.w	r3, #1
 8009900:	6103      	str	r3, [r0, #16]
 8009902:	dd16      	ble.n	8009932 <__s2b+0x72>
 8009904:	f104 0909 	add.w	r9, r4, #9
 8009908:	46c8      	mov	r8, r9
 800990a:	442c      	add	r4, r5
 800990c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009910:	4601      	mov	r1, r0
 8009912:	220a      	movs	r2, #10
 8009914:	4630      	mov	r0, r6
 8009916:	3b30      	subs	r3, #48	; 0x30
 8009918:	f7ff ff88 	bl	800982c <__multadd>
 800991c:	45a0      	cmp	r8, r4
 800991e:	d1f5      	bne.n	800990c <__s2b+0x4c>
 8009920:	f1a5 0408 	sub.w	r4, r5, #8
 8009924:	444c      	add	r4, r9
 8009926:	1b2d      	subs	r5, r5, r4
 8009928:	1963      	adds	r3, r4, r5
 800992a:	42bb      	cmp	r3, r7
 800992c:	db04      	blt.n	8009938 <__s2b+0x78>
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009932:	2509      	movs	r5, #9
 8009934:	340a      	adds	r4, #10
 8009936:	e7f6      	b.n	8009926 <__s2b+0x66>
 8009938:	f814 3b01 	ldrb.w	r3, [r4], #1
 800993c:	4601      	mov	r1, r0
 800993e:	220a      	movs	r2, #10
 8009940:	4630      	mov	r0, r6
 8009942:	3b30      	subs	r3, #48	; 0x30
 8009944:	f7ff ff72 	bl	800982c <__multadd>
 8009948:	e7ee      	b.n	8009928 <__s2b+0x68>
 800994a:	bf00      	nop
 800994c:	0800c070 	.word	0x0800c070
 8009950:	0800c117 	.word	0x0800c117

08009954 <__hi0bits>:
 8009954:	0c02      	lsrs	r2, r0, #16
 8009956:	0412      	lsls	r2, r2, #16
 8009958:	4603      	mov	r3, r0
 800995a:	b9ca      	cbnz	r2, 8009990 <__hi0bits+0x3c>
 800995c:	0403      	lsls	r3, r0, #16
 800995e:	2010      	movs	r0, #16
 8009960:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009964:	bf04      	itt	eq
 8009966:	021b      	lsleq	r3, r3, #8
 8009968:	3008      	addeq	r0, #8
 800996a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800996e:	bf04      	itt	eq
 8009970:	011b      	lsleq	r3, r3, #4
 8009972:	3004      	addeq	r0, #4
 8009974:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009978:	bf04      	itt	eq
 800997a:	009b      	lsleq	r3, r3, #2
 800997c:	3002      	addeq	r0, #2
 800997e:	2b00      	cmp	r3, #0
 8009980:	db05      	blt.n	800998e <__hi0bits+0x3a>
 8009982:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009986:	f100 0001 	add.w	r0, r0, #1
 800998a:	bf08      	it	eq
 800998c:	2020      	moveq	r0, #32
 800998e:	4770      	bx	lr
 8009990:	2000      	movs	r0, #0
 8009992:	e7e5      	b.n	8009960 <__hi0bits+0xc>

08009994 <__lo0bits>:
 8009994:	6803      	ldr	r3, [r0, #0]
 8009996:	4602      	mov	r2, r0
 8009998:	f013 0007 	ands.w	r0, r3, #7
 800999c:	d00b      	beq.n	80099b6 <__lo0bits+0x22>
 800999e:	07d9      	lsls	r1, r3, #31
 80099a0:	d422      	bmi.n	80099e8 <__lo0bits+0x54>
 80099a2:	0798      	lsls	r0, r3, #30
 80099a4:	bf49      	itett	mi
 80099a6:	085b      	lsrmi	r3, r3, #1
 80099a8:	089b      	lsrpl	r3, r3, #2
 80099aa:	2001      	movmi	r0, #1
 80099ac:	6013      	strmi	r3, [r2, #0]
 80099ae:	bf5c      	itt	pl
 80099b0:	2002      	movpl	r0, #2
 80099b2:	6013      	strpl	r3, [r2, #0]
 80099b4:	4770      	bx	lr
 80099b6:	b299      	uxth	r1, r3
 80099b8:	b909      	cbnz	r1, 80099be <__lo0bits+0x2a>
 80099ba:	2010      	movs	r0, #16
 80099bc:	0c1b      	lsrs	r3, r3, #16
 80099be:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099c2:	bf04      	itt	eq
 80099c4:	0a1b      	lsreq	r3, r3, #8
 80099c6:	3008      	addeq	r0, #8
 80099c8:	0719      	lsls	r1, r3, #28
 80099ca:	bf04      	itt	eq
 80099cc:	091b      	lsreq	r3, r3, #4
 80099ce:	3004      	addeq	r0, #4
 80099d0:	0799      	lsls	r1, r3, #30
 80099d2:	bf04      	itt	eq
 80099d4:	089b      	lsreq	r3, r3, #2
 80099d6:	3002      	addeq	r0, #2
 80099d8:	07d9      	lsls	r1, r3, #31
 80099da:	d403      	bmi.n	80099e4 <__lo0bits+0x50>
 80099dc:	085b      	lsrs	r3, r3, #1
 80099de:	f100 0001 	add.w	r0, r0, #1
 80099e2:	d003      	beq.n	80099ec <__lo0bits+0x58>
 80099e4:	6013      	str	r3, [r2, #0]
 80099e6:	4770      	bx	lr
 80099e8:	2000      	movs	r0, #0
 80099ea:	4770      	bx	lr
 80099ec:	2020      	movs	r0, #32
 80099ee:	4770      	bx	lr

080099f0 <__i2b>:
 80099f0:	b510      	push	{r4, lr}
 80099f2:	460c      	mov	r4, r1
 80099f4:	2101      	movs	r1, #1
 80099f6:	f7ff feb7 	bl	8009768 <_Balloc>
 80099fa:	4602      	mov	r2, r0
 80099fc:	b928      	cbnz	r0, 8009a0a <__i2b+0x1a>
 80099fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a02:	4b04      	ldr	r3, [pc, #16]	; (8009a14 <__i2b+0x24>)
 8009a04:	4804      	ldr	r0, [pc, #16]	; (8009a18 <__i2b+0x28>)
 8009a06:	f000 fef7 	bl	800a7f8 <__assert_func>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	6144      	str	r4, [r0, #20]
 8009a0e:	6103      	str	r3, [r0, #16]
 8009a10:	bd10      	pop	{r4, pc}
 8009a12:	bf00      	nop
 8009a14:	0800c070 	.word	0x0800c070
 8009a18:	0800c117 	.word	0x0800c117

08009a1c <__multiply>:
 8009a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a20:	4614      	mov	r4, r2
 8009a22:	690a      	ldr	r2, [r1, #16]
 8009a24:	6923      	ldr	r3, [r4, #16]
 8009a26:	460d      	mov	r5, r1
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	bfbe      	ittt	lt
 8009a2c:	460b      	movlt	r3, r1
 8009a2e:	4625      	movlt	r5, r4
 8009a30:	461c      	movlt	r4, r3
 8009a32:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a3a:	68ab      	ldr	r3, [r5, #8]
 8009a3c:	6869      	ldr	r1, [r5, #4]
 8009a3e:	eb0a 0709 	add.w	r7, sl, r9
 8009a42:	42bb      	cmp	r3, r7
 8009a44:	b085      	sub	sp, #20
 8009a46:	bfb8      	it	lt
 8009a48:	3101      	addlt	r1, #1
 8009a4a:	f7ff fe8d 	bl	8009768 <_Balloc>
 8009a4e:	b930      	cbnz	r0, 8009a5e <__multiply+0x42>
 8009a50:	4602      	mov	r2, r0
 8009a52:	f240 115d 	movw	r1, #349	; 0x15d
 8009a56:	4b41      	ldr	r3, [pc, #260]	; (8009b5c <__multiply+0x140>)
 8009a58:	4841      	ldr	r0, [pc, #260]	; (8009b60 <__multiply+0x144>)
 8009a5a:	f000 fecd 	bl	800a7f8 <__assert_func>
 8009a5e:	f100 0614 	add.w	r6, r0, #20
 8009a62:	4633      	mov	r3, r6
 8009a64:	2200      	movs	r2, #0
 8009a66:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a6a:	4543      	cmp	r3, r8
 8009a6c:	d31e      	bcc.n	8009aac <__multiply+0x90>
 8009a6e:	f105 0c14 	add.w	ip, r5, #20
 8009a72:	f104 0314 	add.w	r3, r4, #20
 8009a76:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a7a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a7e:	9202      	str	r2, [sp, #8]
 8009a80:	ebac 0205 	sub.w	r2, ip, r5
 8009a84:	3a15      	subs	r2, #21
 8009a86:	f022 0203 	bic.w	r2, r2, #3
 8009a8a:	3204      	adds	r2, #4
 8009a8c:	f105 0115 	add.w	r1, r5, #21
 8009a90:	458c      	cmp	ip, r1
 8009a92:	bf38      	it	cc
 8009a94:	2204      	movcc	r2, #4
 8009a96:	9201      	str	r2, [sp, #4]
 8009a98:	9a02      	ldr	r2, [sp, #8]
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d808      	bhi.n	8009ab2 <__multiply+0x96>
 8009aa0:	2f00      	cmp	r7, #0
 8009aa2:	dc55      	bgt.n	8009b50 <__multiply+0x134>
 8009aa4:	6107      	str	r7, [r0, #16]
 8009aa6:	b005      	add	sp, #20
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	f843 2b04 	str.w	r2, [r3], #4
 8009ab0:	e7db      	b.n	8009a6a <__multiply+0x4e>
 8009ab2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009ab6:	f1ba 0f00 	cmp.w	sl, #0
 8009aba:	d020      	beq.n	8009afe <__multiply+0xe2>
 8009abc:	46b1      	mov	r9, r6
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f105 0e14 	add.w	lr, r5, #20
 8009ac4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ac8:	f8d9 b000 	ldr.w	fp, [r9]
 8009acc:	b2a1      	uxth	r1, r4
 8009ace:	fa1f fb8b 	uxth.w	fp, fp
 8009ad2:	fb0a b101 	mla	r1, sl, r1, fp
 8009ad6:	4411      	add	r1, r2
 8009ad8:	f8d9 2000 	ldr.w	r2, [r9]
 8009adc:	0c24      	lsrs	r4, r4, #16
 8009ade:	0c12      	lsrs	r2, r2, #16
 8009ae0:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ae4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ae8:	b289      	uxth	r1, r1
 8009aea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009aee:	45f4      	cmp	ip, lr
 8009af0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009af4:	f849 1b04 	str.w	r1, [r9], #4
 8009af8:	d8e4      	bhi.n	8009ac4 <__multiply+0xa8>
 8009afa:	9901      	ldr	r1, [sp, #4]
 8009afc:	5072      	str	r2, [r6, r1]
 8009afe:	9a03      	ldr	r2, [sp, #12]
 8009b00:	3304      	adds	r3, #4
 8009b02:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b06:	f1b9 0f00 	cmp.w	r9, #0
 8009b0a:	d01f      	beq.n	8009b4c <__multiply+0x130>
 8009b0c:	46b6      	mov	lr, r6
 8009b0e:	f04f 0a00 	mov.w	sl, #0
 8009b12:	6834      	ldr	r4, [r6, #0]
 8009b14:	f105 0114 	add.w	r1, r5, #20
 8009b18:	880a      	ldrh	r2, [r1, #0]
 8009b1a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b1e:	b2a4      	uxth	r4, r4
 8009b20:	fb09 b202 	mla	r2, r9, r2, fp
 8009b24:	4492      	add	sl, r2
 8009b26:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b2a:	f84e 4b04 	str.w	r4, [lr], #4
 8009b2e:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b32:	f8be 2000 	ldrh.w	r2, [lr]
 8009b36:	0c24      	lsrs	r4, r4, #16
 8009b38:	fb09 2404 	mla	r4, r9, r4, r2
 8009b3c:	458c      	cmp	ip, r1
 8009b3e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b42:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b46:	d8e7      	bhi.n	8009b18 <__multiply+0xfc>
 8009b48:	9a01      	ldr	r2, [sp, #4]
 8009b4a:	50b4      	str	r4, [r6, r2]
 8009b4c:	3604      	adds	r6, #4
 8009b4e:	e7a3      	b.n	8009a98 <__multiply+0x7c>
 8009b50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1a5      	bne.n	8009aa4 <__multiply+0x88>
 8009b58:	3f01      	subs	r7, #1
 8009b5a:	e7a1      	b.n	8009aa0 <__multiply+0x84>
 8009b5c:	0800c070 	.word	0x0800c070
 8009b60:	0800c117 	.word	0x0800c117

08009b64 <__pow5mult>:
 8009b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b68:	4615      	mov	r5, r2
 8009b6a:	f012 0203 	ands.w	r2, r2, #3
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	d007      	beq.n	8009b84 <__pow5mult+0x20>
 8009b74:	4c25      	ldr	r4, [pc, #148]	; (8009c0c <__pow5mult+0xa8>)
 8009b76:	3a01      	subs	r2, #1
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b7e:	f7ff fe55 	bl	800982c <__multadd>
 8009b82:	4607      	mov	r7, r0
 8009b84:	10ad      	asrs	r5, r5, #2
 8009b86:	d03d      	beq.n	8009c04 <__pow5mult+0xa0>
 8009b88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b8a:	b97c      	cbnz	r4, 8009bac <__pow5mult+0x48>
 8009b8c:	2010      	movs	r0, #16
 8009b8e:	f000 fe63 	bl	800a858 <malloc>
 8009b92:	4602      	mov	r2, r0
 8009b94:	6270      	str	r0, [r6, #36]	; 0x24
 8009b96:	b928      	cbnz	r0, 8009ba4 <__pow5mult+0x40>
 8009b98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b9c:	4b1c      	ldr	r3, [pc, #112]	; (8009c10 <__pow5mult+0xac>)
 8009b9e:	481d      	ldr	r0, [pc, #116]	; (8009c14 <__pow5mult+0xb0>)
 8009ba0:	f000 fe2a 	bl	800a7f8 <__assert_func>
 8009ba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ba8:	6004      	str	r4, [r0, #0]
 8009baa:	60c4      	str	r4, [r0, #12]
 8009bac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009bb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bb4:	b94c      	cbnz	r4, 8009bca <__pow5mult+0x66>
 8009bb6:	f240 2171 	movw	r1, #625	; 0x271
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ff18 	bl	80099f0 <__i2b>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	f04f 0900 	mov.w	r9, #0
 8009bce:	07eb      	lsls	r3, r5, #31
 8009bd0:	d50a      	bpl.n	8009be8 <__pow5mult+0x84>
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f7ff ff20 	bl	8009a1c <__multiply>
 8009bdc:	4680      	mov	r8, r0
 8009bde:	4639      	mov	r1, r7
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7ff fe01 	bl	80097e8 <_Bfree>
 8009be6:	4647      	mov	r7, r8
 8009be8:	106d      	asrs	r5, r5, #1
 8009bea:	d00b      	beq.n	8009c04 <__pow5mult+0xa0>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	b938      	cbnz	r0, 8009c00 <__pow5mult+0x9c>
 8009bf0:	4622      	mov	r2, r4
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff ff11 	bl	8009a1c <__multiply>
 8009bfa:	6020      	str	r0, [r4, #0]
 8009bfc:	f8c0 9000 	str.w	r9, [r0]
 8009c00:	4604      	mov	r4, r0
 8009c02:	e7e4      	b.n	8009bce <__pow5mult+0x6a>
 8009c04:	4638      	mov	r0, r7
 8009c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0800c268 	.word	0x0800c268
 8009c10:	0800c100 	.word	0x0800c100
 8009c14:	0800c117 	.word	0x0800c117

08009c18 <__lshift>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4607      	mov	r7, r0
 8009c20:	4691      	mov	r9, r2
 8009c22:	6923      	ldr	r3, [r4, #16]
 8009c24:	6849      	ldr	r1, [r1, #4]
 8009c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c2a:	68a3      	ldr	r3, [r4, #8]
 8009c2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c30:	f108 0601 	add.w	r6, r8, #1
 8009c34:	42b3      	cmp	r3, r6
 8009c36:	db0b      	blt.n	8009c50 <__lshift+0x38>
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff fd95 	bl	8009768 <_Balloc>
 8009c3e:	4605      	mov	r5, r0
 8009c40:	b948      	cbnz	r0, 8009c56 <__lshift+0x3e>
 8009c42:	4602      	mov	r2, r0
 8009c44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c48:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <__lshift+0xd0>)
 8009c4a:	4828      	ldr	r0, [pc, #160]	; (8009cec <__lshift+0xd4>)
 8009c4c:	f000 fdd4 	bl	800a7f8 <__assert_func>
 8009c50:	3101      	adds	r1, #1
 8009c52:	005b      	lsls	r3, r3, #1
 8009c54:	e7ee      	b.n	8009c34 <__lshift+0x1c>
 8009c56:	2300      	movs	r3, #0
 8009c58:	f100 0114 	add.w	r1, r0, #20
 8009c5c:	f100 0210 	add.w	r2, r0, #16
 8009c60:	4618      	mov	r0, r3
 8009c62:	4553      	cmp	r3, sl
 8009c64:	db33      	blt.n	8009cce <__lshift+0xb6>
 8009c66:	6920      	ldr	r0, [r4, #16]
 8009c68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c6c:	f104 0314 	add.w	r3, r4, #20
 8009c70:	f019 091f 	ands.w	r9, r9, #31
 8009c74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c7c:	d02b      	beq.n	8009cd6 <__lshift+0xbe>
 8009c7e:	468a      	mov	sl, r1
 8009c80:	2200      	movs	r2, #0
 8009c82:	f1c9 0e20 	rsb	lr, r9, #32
 8009c86:	6818      	ldr	r0, [r3, #0]
 8009c88:	fa00 f009 	lsl.w	r0, r0, r9
 8009c8c:	4302      	orrs	r2, r0
 8009c8e:	f84a 2b04 	str.w	r2, [sl], #4
 8009c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c96:	459c      	cmp	ip, r3
 8009c98:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c9c:	d8f3      	bhi.n	8009c86 <__lshift+0x6e>
 8009c9e:	ebac 0304 	sub.w	r3, ip, r4
 8009ca2:	3b15      	subs	r3, #21
 8009ca4:	f023 0303 	bic.w	r3, r3, #3
 8009ca8:	3304      	adds	r3, #4
 8009caa:	f104 0015 	add.w	r0, r4, #21
 8009cae:	4584      	cmp	ip, r0
 8009cb0:	bf38      	it	cc
 8009cb2:	2304      	movcc	r3, #4
 8009cb4:	50ca      	str	r2, [r1, r3]
 8009cb6:	b10a      	cbz	r2, 8009cbc <__lshift+0xa4>
 8009cb8:	f108 0602 	add.w	r6, r8, #2
 8009cbc:	3e01      	subs	r6, #1
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	612e      	str	r6, [r5, #16]
 8009cc4:	f7ff fd90 	bl	80097e8 <_Bfree>
 8009cc8:	4628      	mov	r0, r5
 8009cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cce:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	e7c5      	b.n	8009c62 <__lshift+0x4a>
 8009cd6:	3904      	subs	r1, #4
 8009cd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cdc:	459c      	cmp	ip, r3
 8009cde:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ce2:	d8f9      	bhi.n	8009cd8 <__lshift+0xc0>
 8009ce4:	e7ea      	b.n	8009cbc <__lshift+0xa4>
 8009ce6:	bf00      	nop
 8009ce8:	0800c070 	.word	0x0800c070
 8009cec:	0800c117 	.word	0x0800c117

08009cf0 <__mcmp>:
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	690a      	ldr	r2, [r1, #16]
 8009cf4:	6900      	ldr	r0, [r0, #16]
 8009cf6:	b530      	push	{r4, r5, lr}
 8009cf8:	1a80      	subs	r0, r0, r2
 8009cfa:	d10d      	bne.n	8009d18 <__mcmp+0x28>
 8009cfc:	3314      	adds	r3, #20
 8009cfe:	3114      	adds	r1, #20
 8009d00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d10:	4295      	cmp	r5, r2
 8009d12:	d002      	beq.n	8009d1a <__mcmp+0x2a>
 8009d14:	d304      	bcc.n	8009d20 <__mcmp+0x30>
 8009d16:	2001      	movs	r0, #1
 8009d18:	bd30      	pop	{r4, r5, pc}
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	d3f4      	bcc.n	8009d08 <__mcmp+0x18>
 8009d1e:	e7fb      	b.n	8009d18 <__mcmp+0x28>
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295
 8009d24:	e7f8      	b.n	8009d18 <__mcmp+0x28>
	...

08009d28 <__mdiff>:
 8009d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	4606      	mov	r6, r0
 8009d30:	4611      	mov	r1, r2
 8009d32:	4620      	mov	r0, r4
 8009d34:	4692      	mov	sl, r2
 8009d36:	f7ff ffdb 	bl	8009cf0 <__mcmp>
 8009d3a:	1e05      	subs	r5, r0, #0
 8009d3c:	d111      	bne.n	8009d62 <__mdiff+0x3a>
 8009d3e:	4629      	mov	r1, r5
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7ff fd11 	bl	8009768 <_Balloc>
 8009d46:	4602      	mov	r2, r0
 8009d48:	b928      	cbnz	r0, 8009d56 <__mdiff+0x2e>
 8009d4a:	f240 2132 	movw	r1, #562	; 0x232
 8009d4e:	4b3c      	ldr	r3, [pc, #240]	; (8009e40 <__mdiff+0x118>)
 8009d50:	483c      	ldr	r0, [pc, #240]	; (8009e44 <__mdiff+0x11c>)
 8009d52:	f000 fd51 	bl	800a7f8 <__assert_func>
 8009d56:	2301      	movs	r3, #1
 8009d58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d62:	bfa4      	itt	ge
 8009d64:	4653      	movge	r3, sl
 8009d66:	46a2      	movge	sl, r4
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009d6e:	bfa6      	itte	ge
 8009d70:	461c      	movge	r4, r3
 8009d72:	2500      	movge	r5, #0
 8009d74:	2501      	movlt	r5, #1
 8009d76:	f7ff fcf7 	bl	8009768 <_Balloc>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	b918      	cbnz	r0, 8009d86 <__mdiff+0x5e>
 8009d7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d82:	4b2f      	ldr	r3, [pc, #188]	; (8009e40 <__mdiff+0x118>)
 8009d84:	e7e4      	b.n	8009d50 <__mdiff+0x28>
 8009d86:	f100 0814 	add.w	r8, r0, #20
 8009d8a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009d8e:	60c5      	str	r5, [r0, #12]
 8009d90:	f04f 0c00 	mov.w	ip, #0
 8009d94:	f10a 0514 	add.w	r5, sl, #20
 8009d98:	f10a 0010 	add.w	r0, sl, #16
 8009d9c:	46c2      	mov	sl, r8
 8009d9e:	6926      	ldr	r6, [r4, #16]
 8009da0:	f104 0914 	add.w	r9, r4, #20
 8009da4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009da8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009dac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009db0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009db4:	fa1f f18b 	uxth.w	r1, fp
 8009db8:	4461      	add	r1, ip
 8009dba:	fa1f fc83 	uxth.w	ip, r3
 8009dbe:	0c1b      	lsrs	r3, r3, #16
 8009dc0:	eba1 010c 	sub.w	r1, r1, ip
 8009dc4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009dc8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009dcc:	b289      	uxth	r1, r1
 8009dce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009dd2:	454e      	cmp	r6, r9
 8009dd4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009dd8:	f84a 3b04 	str.w	r3, [sl], #4
 8009ddc:	d8e6      	bhi.n	8009dac <__mdiff+0x84>
 8009dde:	1b33      	subs	r3, r6, r4
 8009de0:	3b15      	subs	r3, #21
 8009de2:	f023 0303 	bic.w	r3, r3, #3
 8009de6:	3415      	adds	r4, #21
 8009de8:	3304      	adds	r3, #4
 8009dea:	42a6      	cmp	r6, r4
 8009dec:	bf38      	it	cc
 8009dee:	2304      	movcc	r3, #4
 8009df0:	441d      	add	r5, r3
 8009df2:	4443      	add	r3, r8
 8009df4:	461e      	mov	r6, r3
 8009df6:	462c      	mov	r4, r5
 8009df8:	4574      	cmp	r4, lr
 8009dfa:	d30e      	bcc.n	8009e1a <__mdiff+0xf2>
 8009dfc:	f10e 0103 	add.w	r1, lr, #3
 8009e00:	1b49      	subs	r1, r1, r5
 8009e02:	f021 0103 	bic.w	r1, r1, #3
 8009e06:	3d03      	subs	r5, #3
 8009e08:	45ae      	cmp	lr, r5
 8009e0a:	bf38      	it	cc
 8009e0c:	2100      	movcc	r1, #0
 8009e0e:	4419      	add	r1, r3
 8009e10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e14:	b18b      	cbz	r3, 8009e3a <__mdiff+0x112>
 8009e16:	6117      	str	r7, [r2, #16]
 8009e18:	e7a0      	b.n	8009d5c <__mdiff+0x34>
 8009e1a:	f854 8b04 	ldr.w	r8, [r4], #4
 8009e1e:	fa1f f188 	uxth.w	r1, r8
 8009e22:	4461      	add	r1, ip
 8009e24:	1408      	asrs	r0, r1, #16
 8009e26:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009e2a:	b289      	uxth	r1, r1
 8009e2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e34:	f846 1b04 	str.w	r1, [r6], #4
 8009e38:	e7de      	b.n	8009df8 <__mdiff+0xd0>
 8009e3a:	3f01      	subs	r7, #1
 8009e3c:	e7e8      	b.n	8009e10 <__mdiff+0xe8>
 8009e3e:	bf00      	nop
 8009e40:	0800c070 	.word	0x0800c070
 8009e44:	0800c117 	.word	0x0800c117

08009e48 <__ulp>:
 8009e48:	4b11      	ldr	r3, [pc, #68]	; (8009e90 <__ulp+0x48>)
 8009e4a:	400b      	ands	r3, r1
 8009e4c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dd02      	ble.n	8009e5a <__ulp+0x12>
 8009e54:	2000      	movs	r0, #0
 8009e56:	4619      	mov	r1, r3
 8009e58:	4770      	bx	lr
 8009e5a:	425b      	negs	r3, r3
 8009e5c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009e60:	f04f 0000 	mov.w	r0, #0
 8009e64:	f04f 0100 	mov.w	r1, #0
 8009e68:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e6c:	da04      	bge.n	8009e78 <__ulp+0x30>
 8009e6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e72:	fa43 f102 	asr.w	r1, r3, r2
 8009e76:	4770      	bx	lr
 8009e78:	f1a2 0314 	sub.w	r3, r2, #20
 8009e7c:	2b1e      	cmp	r3, #30
 8009e7e:	bfd6      	itet	le
 8009e80:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009e84:	2301      	movgt	r3, #1
 8009e86:	fa22 f303 	lsrle.w	r3, r2, r3
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	7ff00000 	.word	0x7ff00000

08009e94 <__b2d>:
 8009e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e98:	6907      	ldr	r7, [r0, #16]
 8009e9a:	f100 0914 	add.w	r9, r0, #20
 8009e9e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009ea2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009ea6:	f1a7 0804 	sub.w	r8, r7, #4
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff fd52 	bl	8009954 <__hi0bits>
 8009eb0:	f1c0 0320 	rsb	r3, r0, #32
 8009eb4:	280a      	cmp	r0, #10
 8009eb6:	600b      	str	r3, [r1, #0]
 8009eb8:	491f      	ldr	r1, [pc, #124]	; (8009f38 <__b2d+0xa4>)
 8009eba:	dc17      	bgt.n	8009eec <__b2d+0x58>
 8009ebc:	45c1      	cmp	r9, r8
 8009ebe:	bf28      	it	cs
 8009ec0:	2200      	movcs	r2, #0
 8009ec2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009ec6:	fa26 f30c 	lsr.w	r3, r6, ip
 8009eca:	bf38      	it	cc
 8009ecc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ed0:	ea43 0501 	orr.w	r5, r3, r1
 8009ed4:	f100 0315 	add.w	r3, r0, #21
 8009ed8:	fa06 f303 	lsl.w	r3, r6, r3
 8009edc:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ee0:	ea43 0402 	orr.w	r4, r3, r2
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4629      	mov	r1, r5
 8009ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eec:	45c1      	cmp	r9, r8
 8009eee:	bf2e      	itee	cs
 8009ef0:	2200      	movcs	r2, #0
 8009ef2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ef6:	f1a7 0808 	subcc.w	r8, r7, #8
 8009efa:	f1b0 030b 	subs.w	r3, r0, #11
 8009efe:	d016      	beq.n	8009f2e <__b2d+0x9a>
 8009f00:	f1c3 0720 	rsb	r7, r3, #32
 8009f04:	fa22 f107 	lsr.w	r1, r2, r7
 8009f08:	45c8      	cmp	r8, r9
 8009f0a:	fa06 f603 	lsl.w	r6, r6, r3
 8009f0e:	ea46 0601 	orr.w	r6, r6, r1
 8009f12:	bf94      	ite	ls
 8009f14:	2100      	movls	r1, #0
 8009f16:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009f1a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009f1e:	fa02 f003 	lsl.w	r0, r2, r3
 8009f22:	40f9      	lsrs	r1, r7
 8009f24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f28:	ea40 0401 	orr.w	r4, r0, r1
 8009f2c:	e7da      	b.n	8009ee4 <__b2d+0x50>
 8009f2e:	4614      	mov	r4, r2
 8009f30:	ea46 0501 	orr.w	r5, r6, r1
 8009f34:	e7d6      	b.n	8009ee4 <__b2d+0x50>
 8009f36:	bf00      	nop
 8009f38:	3ff00000 	.word	0x3ff00000

08009f3c <__d2b>:
 8009f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f40:	2101      	movs	r1, #1
 8009f42:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009f46:	4690      	mov	r8, r2
 8009f48:	461d      	mov	r5, r3
 8009f4a:	f7ff fc0d 	bl	8009768 <_Balloc>
 8009f4e:	4604      	mov	r4, r0
 8009f50:	b930      	cbnz	r0, 8009f60 <__d2b+0x24>
 8009f52:	4602      	mov	r2, r0
 8009f54:	f240 310a 	movw	r1, #778	; 0x30a
 8009f58:	4b24      	ldr	r3, [pc, #144]	; (8009fec <__d2b+0xb0>)
 8009f5a:	4825      	ldr	r0, [pc, #148]	; (8009ff0 <__d2b+0xb4>)
 8009f5c:	f000 fc4c 	bl	800a7f8 <__assert_func>
 8009f60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009f64:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009f68:	bb2d      	cbnz	r5, 8009fb6 <__d2b+0x7a>
 8009f6a:	9301      	str	r3, [sp, #4]
 8009f6c:	f1b8 0300 	subs.w	r3, r8, #0
 8009f70:	d026      	beq.n	8009fc0 <__d2b+0x84>
 8009f72:	4668      	mov	r0, sp
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	f7ff fd0d 	bl	8009994 <__lo0bits>
 8009f7a:	9900      	ldr	r1, [sp, #0]
 8009f7c:	b1f0      	cbz	r0, 8009fbc <__d2b+0x80>
 8009f7e:	9a01      	ldr	r2, [sp, #4]
 8009f80:	f1c0 0320 	rsb	r3, r0, #32
 8009f84:	fa02 f303 	lsl.w	r3, r2, r3
 8009f88:	430b      	orrs	r3, r1
 8009f8a:	40c2      	lsrs	r2, r0
 8009f8c:	6163      	str	r3, [r4, #20]
 8009f8e:	9201      	str	r2, [sp, #4]
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	bf14      	ite	ne
 8009f96:	2102      	movne	r1, #2
 8009f98:	2101      	moveq	r1, #1
 8009f9a:	61a3      	str	r3, [r4, #24]
 8009f9c:	6121      	str	r1, [r4, #16]
 8009f9e:	b1c5      	cbz	r5, 8009fd2 <__d2b+0x96>
 8009fa0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009fa4:	4405      	add	r5, r0
 8009fa6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009faa:	603d      	str	r5, [r7, #0]
 8009fac:	6030      	str	r0, [r6, #0]
 8009fae:	4620      	mov	r0, r4
 8009fb0:	b002      	add	sp, #8
 8009fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fba:	e7d6      	b.n	8009f6a <__d2b+0x2e>
 8009fbc:	6161      	str	r1, [r4, #20]
 8009fbe:	e7e7      	b.n	8009f90 <__d2b+0x54>
 8009fc0:	a801      	add	r0, sp, #4
 8009fc2:	f7ff fce7 	bl	8009994 <__lo0bits>
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	9b01      	ldr	r3, [sp, #4]
 8009fca:	6121      	str	r1, [r4, #16]
 8009fcc:	6163      	str	r3, [r4, #20]
 8009fce:	3020      	adds	r0, #32
 8009fd0:	e7e5      	b.n	8009f9e <__d2b+0x62>
 8009fd2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009fd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fda:	6038      	str	r0, [r7, #0]
 8009fdc:	6918      	ldr	r0, [r3, #16]
 8009fde:	f7ff fcb9 	bl	8009954 <__hi0bits>
 8009fe2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009fe6:	6031      	str	r1, [r6, #0]
 8009fe8:	e7e1      	b.n	8009fae <__d2b+0x72>
 8009fea:	bf00      	nop
 8009fec:	0800c070 	.word	0x0800c070
 8009ff0:	0800c117 	.word	0x0800c117

08009ff4 <__ratio>:
 8009ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	4688      	mov	r8, r1
 8009ffa:	4669      	mov	r1, sp
 8009ffc:	4681      	mov	r9, r0
 8009ffe:	f7ff ff49 	bl	8009e94 <__b2d>
 800a002:	460f      	mov	r7, r1
 800a004:	4604      	mov	r4, r0
 800a006:	460d      	mov	r5, r1
 800a008:	4640      	mov	r0, r8
 800a00a:	a901      	add	r1, sp, #4
 800a00c:	f7ff ff42 	bl	8009e94 <__b2d>
 800a010:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a014:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a018:	468b      	mov	fp, r1
 800a01a:	eba3 0c02 	sub.w	ip, r3, r2
 800a01e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfd5      	itete	le
 800a02c:	460a      	movle	r2, r1
 800a02e:	462a      	movgt	r2, r5
 800a030:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a034:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a038:	bfd8      	it	le
 800a03a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a03e:	465b      	mov	r3, fp
 800a040:	4602      	mov	r2, r0
 800a042:	4639      	mov	r1, r7
 800a044:	4620      	mov	r0, r4
 800a046:	f7f6 fbe1 	bl	800080c <__aeabi_ddiv>
 800a04a:	b003      	add	sp, #12
 800a04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a050 <__copybits>:
 800a050:	3901      	subs	r1, #1
 800a052:	b570      	push	{r4, r5, r6, lr}
 800a054:	1149      	asrs	r1, r1, #5
 800a056:	6914      	ldr	r4, [r2, #16]
 800a058:	3101      	adds	r1, #1
 800a05a:	f102 0314 	add.w	r3, r2, #20
 800a05e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a062:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a066:	1f05      	subs	r5, r0, #4
 800a068:	42a3      	cmp	r3, r4
 800a06a:	d30c      	bcc.n	800a086 <__copybits+0x36>
 800a06c:	1aa3      	subs	r3, r4, r2
 800a06e:	3b11      	subs	r3, #17
 800a070:	f023 0303 	bic.w	r3, r3, #3
 800a074:	3211      	adds	r2, #17
 800a076:	42a2      	cmp	r2, r4
 800a078:	bf88      	it	hi
 800a07a:	2300      	movhi	r3, #0
 800a07c:	4418      	add	r0, r3
 800a07e:	2300      	movs	r3, #0
 800a080:	4288      	cmp	r0, r1
 800a082:	d305      	bcc.n	800a090 <__copybits+0x40>
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	f853 6b04 	ldr.w	r6, [r3], #4
 800a08a:	f845 6f04 	str.w	r6, [r5, #4]!
 800a08e:	e7eb      	b.n	800a068 <__copybits+0x18>
 800a090:	f840 3b04 	str.w	r3, [r0], #4
 800a094:	e7f4      	b.n	800a080 <__copybits+0x30>

0800a096 <__any_on>:
 800a096:	f100 0214 	add.w	r2, r0, #20
 800a09a:	6900      	ldr	r0, [r0, #16]
 800a09c:	114b      	asrs	r3, r1, #5
 800a09e:	4298      	cmp	r0, r3
 800a0a0:	b510      	push	{r4, lr}
 800a0a2:	db11      	blt.n	800a0c8 <__any_on+0x32>
 800a0a4:	dd0a      	ble.n	800a0bc <__any_on+0x26>
 800a0a6:	f011 011f 	ands.w	r1, r1, #31
 800a0aa:	d007      	beq.n	800a0bc <__any_on+0x26>
 800a0ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0b0:	fa24 f001 	lsr.w	r0, r4, r1
 800a0b4:	fa00 f101 	lsl.w	r1, r0, r1
 800a0b8:	428c      	cmp	r4, r1
 800a0ba:	d10b      	bne.n	800a0d4 <__any_on+0x3e>
 800a0bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d803      	bhi.n	800a0cc <__any_on+0x36>
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	bd10      	pop	{r4, pc}
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	e7f7      	b.n	800a0bc <__any_on+0x26>
 800a0cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	d0f5      	beq.n	800a0c0 <__any_on+0x2a>
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	e7f6      	b.n	800a0c6 <__any_on+0x30>

0800a0d8 <_calloc_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	fb02 f501 	mul.w	r5, r2, r1
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f000 f808 	bl	800a0f4 <_malloc_r>
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	b118      	cbz	r0, 800a0f0 <_calloc_r+0x18>
 800a0e8:	462a      	mov	r2, r5
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	f7fe f97a 	bl	80083e4 <memset>
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	bd38      	pop	{r3, r4, r5, pc}

0800a0f4 <_malloc_r>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	1ccd      	adds	r5, r1, #3
 800a0f8:	f025 0503 	bic.w	r5, r5, #3
 800a0fc:	3508      	adds	r5, #8
 800a0fe:	2d0c      	cmp	r5, #12
 800a100:	bf38      	it	cc
 800a102:	250c      	movcc	r5, #12
 800a104:	2d00      	cmp	r5, #0
 800a106:	4606      	mov	r6, r0
 800a108:	db01      	blt.n	800a10e <_malloc_r+0x1a>
 800a10a:	42a9      	cmp	r1, r5
 800a10c:	d903      	bls.n	800a116 <_malloc_r+0x22>
 800a10e:	230c      	movs	r3, #12
 800a110:	6033      	str	r3, [r6, #0]
 800a112:	2000      	movs	r0, #0
 800a114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a116:	f000 fbcf 	bl	800a8b8 <__malloc_lock>
 800a11a:	4921      	ldr	r1, [pc, #132]	; (800a1a0 <_malloc_r+0xac>)
 800a11c:	680a      	ldr	r2, [r1, #0]
 800a11e:	4614      	mov	r4, r2
 800a120:	b99c      	cbnz	r4, 800a14a <_malloc_r+0x56>
 800a122:	4f20      	ldr	r7, [pc, #128]	; (800a1a4 <_malloc_r+0xb0>)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	b923      	cbnz	r3, 800a132 <_malloc_r+0x3e>
 800a128:	4621      	mov	r1, r4
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 fb34 	bl	800a798 <_sbrk_r>
 800a130:	6038      	str	r0, [r7, #0]
 800a132:	4629      	mov	r1, r5
 800a134:	4630      	mov	r0, r6
 800a136:	f000 fb2f 	bl	800a798 <_sbrk_r>
 800a13a:	1c43      	adds	r3, r0, #1
 800a13c:	d123      	bne.n	800a186 <_malloc_r+0x92>
 800a13e:	230c      	movs	r3, #12
 800a140:	4630      	mov	r0, r6
 800a142:	6033      	str	r3, [r6, #0]
 800a144:	f000 fbbe 	bl	800a8c4 <__malloc_unlock>
 800a148:	e7e3      	b.n	800a112 <_malloc_r+0x1e>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	1b5b      	subs	r3, r3, r5
 800a14e:	d417      	bmi.n	800a180 <_malloc_r+0x8c>
 800a150:	2b0b      	cmp	r3, #11
 800a152:	d903      	bls.n	800a15c <_malloc_r+0x68>
 800a154:	6023      	str	r3, [r4, #0]
 800a156:	441c      	add	r4, r3
 800a158:	6025      	str	r5, [r4, #0]
 800a15a:	e004      	b.n	800a166 <_malloc_r+0x72>
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	42a2      	cmp	r2, r4
 800a160:	bf0c      	ite	eq
 800a162:	600b      	streq	r3, [r1, #0]
 800a164:	6053      	strne	r3, [r2, #4]
 800a166:	4630      	mov	r0, r6
 800a168:	f000 fbac 	bl	800a8c4 <__malloc_unlock>
 800a16c:	f104 000b 	add.w	r0, r4, #11
 800a170:	1d23      	adds	r3, r4, #4
 800a172:	f020 0007 	bic.w	r0, r0, #7
 800a176:	1ac2      	subs	r2, r0, r3
 800a178:	d0cc      	beq.n	800a114 <_malloc_r+0x20>
 800a17a:	1a1b      	subs	r3, r3, r0
 800a17c:	50a3      	str	r3, [r4, r2]
 800a17e:	e7c9      	b.n	800a114 <_malloc_r+0x20>
 800a180:	4622      	mov	r2, r4
 800a182:	6864      	ldr	r4, [r4, #4]
 800a184:	e7cc      	b.n	800a120 <_malloc_r+0x2c>
 800a186:	1cc4      	adds	r4, r0, #3
 800a188:	f024 0403 	bic.w	r4, r4, #3
 800a18c:	42a0      	cmp	r0, r4
 800a18e:	d0e3      	beq.n	800a158 <_malloc_r+0x64>
 800a190:	1a21      	subs	r1, r4, r0
 800a192:	4630      	mov	r0, r6
 800a194:	f000 fb00 	bl	800a798 <_sbrk_r>
 800a198:	3001      	adds	r0, #1
 800a19a:	d1dd      	bne.n	800a158 <_malloc_r+0x64>
 800a19c:	e7cf      	b.n	800a13e <_malloc_r+0x4a>
 800a19e:	bf00      	nop
 800a1a0:	20002314 	.word	0x20002314
 800a1a4:	20002318 	.word	0x20002318

0800a1a8 <__ssputs_r>:
 800a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ac:	688e      	ldr	r6, [r1, #8]
 800a1ae:	4682      	mov	sl, r0
 800a1b0:	429e      	cmp	r6, r3
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4690      	mov	r8, r2
 800a1b6:	461f      	mov	r7, r3
 800a1b8:	d838      	bhi.n	800a22c <__ssputs_r+0x84>
 800a1ba:	898a      	ldrh	r2, [r1, #12]
 800a1bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1c0:	d032      	beq.n	800a228 <__ssputs_r+0x80>
 800a1c2:	6825      	ldr	r5, [r4, #0]
 800a1c4:	6909      	ldr	r1, [r1, #16]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	eba5 0901 	sub.w	r9, r5, r1
 800a1cc:	6965      	ldr	r5, [r4, #20]
 800a1ce:	444b      	add	r3, r9
 800a1d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1d8:	106d      	asrs	r5, r5, #1
 800a1da:	429d      	cmp	r5, r3
 800a1dc:	bf38      	it	cc
 800a1de:	461d      	movcc	r5, r3
 800a1e0:	0553      	lsls	r3, r2, #21
 800a1e2:	d531      	bpl.n	800a248 <__ssputs_r+0xa0>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7ff ff85 	bl	800a0f4 <_malloc_r>
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	b950      	cbnz	r0, 800a204 <__ssputs_r+0x5c>
 800a1ee:	230c      	movs	r3, #12
 800a1f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f4:	f8ca 3000 	str.w	r3, [sl]
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1fe:	81a3      	strh	r3, [r4, #12]
 800a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a204:	464a      	mov	r2, r9
 800a206:	6921      	ldr	r1, [r4, #16]
 800a208:	f7fe f8de 	bl	80083c8 <memcpy>
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	6126      	str	r6, [r4, #16]
 800a21a:	444e      	add	r6, r9
 800a21c:	6026      	str	r6, [r4, #0]
 800a21e:	463e      	mov	r6, r7
 800a220:	6165      	str	r5, [r4, #20]
 800a222:	eba5 0509 	sub.w	r5, r5, r9
 800a226:	60a5      	str	r5, [r4, #8]
 800a228:	42be      	cmp	r6, r7
 800a22a:	d900      	bls.n	800a22e <__ssputs_r+0x86>
 800a22c:	463e      	mov	r6, r7
 800a22e:	4632      	mov	r2, r6
 800a230:	4641      	mov	r1, r8
 800a232:	6820      	ldr	r0, [r4, #0]
 800a234:	f000 fb26 	bl	800a884 <memmove>
 800a238:	68a3      	ldr	r3, [r4, #8]
 800a23a:	6822      	ldr	r2, [r4, #0]
 800a23c:	1b9b      	subs	r3, r3, r6
 800a23e:	4432      	add	r2, r6
 800a240:	2000      	movs	r0, #0
 800a242:	60a3      	str	r3, [r4, #8]
 800a244:	6022      	str	r2, [r4, #0]
 800a246:	e7db      	b.n	800a200 <__ssputs_r+0x58>
 800a248:	462a      	mov	r2, r5
 800a24a:	f000 fb8d 	bl	800a968 <_realloc_r>
 800a24e:	4606      	mov	r6, r0
 800a250:	2800      	cmp	r0, #0
 800a252:	d1e1      	bne.n	800a218 <__ssputs_r+0x70>
 800a254:	4650      	mov	r0, sl
 800a256:	6921      	ldr	r1, [r4, #16]
 800a258:	f000 fb3a 	bl	800a8d0 <_free_r>
 800a25c:	e7c7      	b.n	800a1ee <__ssputs_r+0x46>
	...

0800a260 <_svfiprintf_r>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	4698      	mov	r8, r3
 800a266:	898b      	ldrh	r3, [r1, #12]
 800a268:	4607      	mov	r7, r0
 800a26a:	061b      	lsls	r3, r3, #24
 800a26c:	460d      	mov	r5, r1
 800a26e:	4614      	mov	r4, r2
 800a270:	b09d      	sub	sp, #116	; 0x74
 800a272:	d50e      	bpl.n	800a292 <_svfiprintf_r+0x32>
 800a274:	690b      	ldr	r3, [r1, #16]
 800a276:	b963      	cbnz	r3, 800a292 <_svfiprintf_r+0x32>
 800a278:	2140      	movs	r1, #64	; 0x40
 800a27a:	f7ff ff3b 	bl	800a0f4 <_malloc_r>
 800a27e:	6028      	str	r0, [r5, #0]
 800a280:	6128      	str	r0, [r5, #16]
 800a282:	b920      	cbnz	r0, 800a28e <_svfiprintf_r+0x2e>
 800a284:	230c      	movs	r3, #12
 800a286:	603b      	str	r3, [r7, #0]
 800a288:	f04f 30ff 	mov.w	r0, #4294967295
 800a28c:	e0d1      	b.n	800a432 <_svfiprintf_r+0x1d2>
 800a28e:	2340      	movs	r3, #64	; 0x40
 800a290:	616b      	str	r3, [r5, #20]
 800a292:	2300      	movs	r3, #0
 800a294:	9309      	str	r3, [sp, #36]	; 0x24
 800a296:	2320      	movs	r3, #32
 800a298:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a29c:	2330      	movs	r3, #48	; 0x30
 800a29e:	f04f 0901 	mov.w	r9, #1
 800a2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a44c <_svfiprintf_r+0x1ec>
 800a2aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2ae:	4623      	mov	r3, r4
 800a2b0:	469a      	mov	sl, r3
 800a2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b6:	b10a      	cbz	r2, 800a2bc <_svfiprintf_r+0x5c>
 800a2b8:	2a25      	cmp	r2, #37	; 0x25
 800a2ba:	d1f9      	bne.n	800a2b0 <_svfiprintf_r+0x50>
 800a2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a2c0:	d00b      	beq.n	800a2da <_svfiprintf_r+0x7a>
 800a2c2:	465b      	mov	r3, fp
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f7ff ff6d 	bl	800a1a8 <__ssputs_r>
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f000 80aa 	beq.w	800a428 <_svfiprintf_r+0x1c8>
 800a2d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2d6:	445a      	add	r2, fp
 800a2d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2da:	f89a 3000 	ldrb.w	r3, [sl]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	f000 80a2 	beq.w	800a428 <_svfiprintf_r+0x1c8>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ee:	f10a 0a01 	add.w	sl, sl, #1
 800a2f2:	9304      	str	r3, [sp, #16]
 800a2f4:	9307      	str	r3, [sp, #28]
 800a2f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a2fc:	4654      	mov	r4, sl
 800a2fe:	2205      	movs	r2, #5
 800a300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a304:	4851      	ldr	r0, [pc, #324]	; (800a44c <_svfiprintf_r+0x1ec>)
 800a306:	f000 faaf 	bl	800a868 <memchr>
 800a30a:	9a04      	ldr	r2, [sp, #16]
 800a30c:	b9d8      	cbnz	r0, 800a346 <_svfiprintf_r+0xe6>
 800a30e:	06d0      	lsls	r0, r2, #27
 800a310:	bf44      	itt	mi
 800a312:	2320      	movmi	r3, #32
 800a314:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a318:	0711      	lsls	r1, r2, #28
 800a31a:	bf44      	itt	mi
 800a31c:	232b      	movmi	r3, #43	; 0x2b
 800a31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a322:	f89a 3000 	ldrb.w	r3, [sl]
 800a326:	2b2a      	cmp	r3, #42	; 0x2a
 800a328:	d015      	beq.n	800a356 <_svfiprintf_r+0xf6>
 800a32a:	4654      	mov	r4, sl
 800a32c:	2000      	movs	r0, #0
 800a32e:	f04f 0c0a 	mov.w	ip, #10
 800a332:	9a07      	ldr	r2, [sp, #28]
 800a334:	4621      	mov	r1, r4
 800a336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a33a:	3b30      	subs	r3, #48	; 0x30
 800a33c:	2b09      	cmp	r3, #9
 800a33e:	d94e      	bls.n	800a3de <_svfiprintf_r+0x17e>
 800a340:	b1b0      	cbz	r0, 800a370 <_svfiprintf_r+0x110>
 800a342:	9207      	str	r2, [sp, #28]
 800a344:	e014      	b.n	800a370 <_svfiprintf_r+0x110>
 800a346:	eba0 0308 	sub.w	r3, r0, r8
 800a34a:	fa09 f303 	lsl.w	r3, r9, r3
 800a34e:	4313      	orrs	r3, r2
 800a350:	46a2      	mov	sl, r4
 800a352:	9304      	str	r3, [sp, #16]
 800a354:	e7d2      	b.n	800a2fc <_svfiprintf_r+0x9c>
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	1d19      	adds	r1, r3, #4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	9103      	str	r1, [sp, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	bfbb      	ittet	lt
 800a362:	425b      	neglt	r3, r3
 800a364:	f042 0202 	orrlt.w	r2, r2, #2
 800a368:	9307      	strge	r3, [sp, #28]
 800a36a:	9307      	strlt	r3, [sp, #28]
 800a36c:	bfb8      	it	lt
 800a36e:	9204      	strlt	r2, [sp, #16]
 800a370:	7823      	ldrb	r3, [r4, #0]
 800a372:	2b2e      	cmp	r3, #46	; 0x2e
 800a374:	d10c      	bne.n	800a390 <_svfiprintf_r+0x130>
 800a376:	7863      	ldrb	r3, [r4, #1]
 800a378:	2b2a      	cmp	r3, #42	; 0x2a
 800a37a:	d135      	bne.n	800a3e8 <_svfiprintf_r+0x188>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	3402      	adds	r4, #2
 800a380:	1d1a      	adds	r2, r3, #4
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	9203      	str	r2, [sp, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	bfb8      	it	lt
 800a38a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a38e:	9305      	str	r3, [sp, #20]
 800a390:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a45c <_svfiprintf_r+0x1fc>
 800a394:	2203      	movs	r2, #3
 800a396:	4650      	mov	r0, sl
 800a398:	7821      	ldrb	r1, [r4, #0]
 800a39a:	f000 fa65 	bl	800a868 <memchr>
 800a39e:	b140      	cbz	r0, 800a3b2 <_svfiprintf_r+0x152>
 800a3a0:	2340      	movs	r3, #64	; 0x40
 800a3a2:	eba0 000a 	sub.w	r0, r0, sl
 800a3a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a3aa:	9b04      	ldr	r3, [sp, #16]
 800a3ac:	3401      	adds	r4, #1
 800a3ae:	4303      	orrs	r3, r0
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b6:	2206      	movs	r2, #6
 800a3b8:	4825      	ldr	r0, [pc, #148]	; (800a450 <_svfiprintf_r+0x1f0>)
 800a3ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3be:	f000 fa53 	bl	800a868 <memchr>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d038      	beq.n	800a438 <_svfiprintf_r+0x1d8>
 800a3c6:	4b23      	ldr	r3, [pc, #140]	; (800a454 <_svfiprintf_r+0x1f4>)
 800a3c8:	bb1b      	cbnz	r3, 800a412 <_svfiprintf_r+0x1b2>
 800a3ca:	9b03      	ldr	r3, [sp, #12]
 800a3cc:	3307      	adds	r3, #7
 800a3ce:	f023 0307 	bic.w	r3, r3, #7
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	9303      	str	r3, [sp, #12]
 800a3d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d8:	4433      	add	r3, r6
 800a3da:	9309      	str	r3, [sp, #36]	; 0x24
 800a3dc:	e767      	b.n	800a2ae <_svfiprintf_r+0x4e>
 800a3de:	460c      	mov	r4, r1
 800a3e0:	2001      	movs	r0, #1
 800a3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e6:	e7a5      	b.n	800a334 <_svfiprintf_r+0xd4>
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f04f 0c0a 	mov.w	ip, #10
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	3401      	adds	r4, #1
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3fa:	3a30      	subs	r2, #48	; 0x30
 800a3fc:	2a09      	cmp	r2, #9
 800a3fe:	d903      	bls.n	800a408 <_svfiprintf_r+0x1a8>
 800a400:	2b00      	cmp	r3, #0
 800a402:	d0c5      	beq.n	800a390 <_svfiprintf_r+0x130>
 800a404:	9105      	str	r1, [sp, #20]
 800a406:	e7c3      	b.n	800a390 <_svfiprintf_r+0x130>
 800a408:	4604      	mov	r4, r0
 800a40a:	2301      	movs	r3, #1
 800a40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a410:	e7f0      	b.n	800a3f4 <_svfiprintf_r+0x194>
 800a412:	ab03      	add	r3, sp, #12
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	462a      	mov	r2, r5
 800a418:	4638      	mov	r0, r7
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <_svfiprintf_r+0x1f8>)
 800a41c:	a904      	add	r1, sp, #16
 800a41e:	f3af 8000 	nop.w
 800a422:	1c42      	adds	r2, r0, #1
 800a424:	4606      	mov	r6, r0
 800a426:	d1d6      	bne.n	800a3d6 <_svfiprintf_r+0x176>
 800a428:	89ab      	ldrh	r3, [r5, #12]
 800a42a:	065b      	lsls	r3, r3, #25
 800a42c:	f53f af2c 	bmi.w	800a288 <_svfiprintf_r+0x28>
 800a430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a432:	b01d      	add	sp, #116	; 0x74
 800a434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a438:	ab03      	add	r3, sp, #12
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	462a      	mov	r2, r5
 800a43e:	4638      	mov	r0, r7
 800a440:	4b05      	ldr	r3, [pc, #20]	; (800a458 <_svfiprintf_r+0x1f8>)
 800a442:	a904      	add	r1, sp, #16
 800a444:	f000 f87c 	bl	800a540 <_printf_i>
 800a448:	e7eb      	b.n	800a422 <_svfiprintf_r+0x1c2>
 800a44a:	bf00      	nop
 800a44c:	0800c274 	.word	0x0800c274
 800a450:	0800c27e 	.word	0x0800c27e
 800a454:	00000000 	.word	0x00000000
 800a458:	0800a1a9 	.word	0x0800a1a9
 800a45c:	0800c27a 	.word	0x0800c27a

0800a460 <_printf_common>:
 800a460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	4616      	mov	r6, r2
 800a466:	4699      	mov	r9, r3
 800a468:	688a      	ldr	r2, [r1, #8]
 800a46a:	690b      	ldr	r3, [r1, #16]
 800a46c:	4607      	mov	r7, r0
 800a46e:	4293      	cmp	r3, r2
 800a470:	bfb8      	it	lt
 800a472:	4613      	movlt	r3, r2
 800a474:	6033      	str	r3, [r6, #0]
 800a476:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a47a:	460c      	mov	r4, r1
 800a47c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a480:	b10a      	cbz	r2, 800a486 <_printf_common+0x26>
 800a482:	3301      	adds	r3, #1
 800a484:	6033      	str	r3, [r6, #0]
 800a486:	6823      	ldr	r3, [r4, #0]
 800a488:	0699      	lsls	r1, r3, #26
 800a48a:	bf42      	ittt	mi
 800a48c:	6833      	ldrmi	r3, [r6, #0]
 800a48e:	3302      	addmi	r3, #2
 800a490:	6033      	strmi	r3, [r6, #0]
 800a492:	6825      	ldr	r5, [r4, #0]
 800a494:	f015 0506 	ands.w	r5, r5, #6
 800a498:	d106      	bne.n	800a4a8 <_printf_common+0x48>
 800a49a:	f104 0a19 	add.w	sl, r4, #25
 800a49e:	68e3      	ldr	r3, [r4, #12]
 800a4a0:	6832      	ldr	r2, [r6, #0]
 800a4a2:	1a9b      	subs	r3, r3, r2
 800a4a4:	42ab      	cmp	r3, r5
 800a4a6:	dc28      	bgt.n	800a4fa <_printf_common+0x9a>
 800a4a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4ac:	1e13      	subs	r3, r2, #0
 800a4ae:	6822      	ldr	r2, [r4, #0]
 800a4b0:	bf18      	it	ne
 800a4b2:	2301      	movne	r3, #1
 800a4b4:	0692      	lsls	r2, r2, #26
 800a4b6:	d42d      	bmi.n	800a514 <_printf_common+0xb4>
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4c0:	47c0      	blx	r8
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	d020      	beq.n	800a508 <_printf_common+0xa8>
 800a4c6:	6823      	ldr	r3, [r4, #0]
 800a4c8:	68e5      	ldr	r5, [r4, #12]
 800a4ca:	f003 0306 	and.w	r3, r3, #6
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	bf18      	it	ne
 800a4d2:	2500      	movne	r5, #0
 800a4d4:	6832      	ldr	r2, [r6, #0]
 800a4d6:	f04f 0600 	mov.w	r6, #0
 800a4da:	68a3      	ldr	r3, [r4, #8]
 800a4dc:	bf08      	it	eq
 800a4de:	1aad      	subeq	r5, r5, r2
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	bf08      	it	eq
 800a4e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	bfc4      	itt	gt
 800a4ec:	1a9b      	subgt	r3, r3, r2
 800a4ee:	18ed      	addgt	r5, r5, r3
 800a4f0:	341a      	adds	r4, #26
 800a4f2:	42b5      	cmp	r5, r6
 800a4f4:	d11a      	bne.n	800a52c <_printf_common+0xcc>
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e008      	b.n	800a50c <_printf_common+0xac>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4652      	mov	r2, sl
 800a4fe:	4649      	mov	r1, r9
 800a500:	4638      	mov	r0, r7
 800a502:	47c0      	blx	r8
 800a504:	3001      	adds	r0, #1
 800a506:	d103      	bne.n	800a510 <_printf_common+0xb0>
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a510:	3501      	adds	r5, #1
 800a512:	e7c4      	b.n	800a49e <_printf_common+0x3e>
 800a514:	2030      	movs	r0, #48	; 0x30
 800a516:	18e1      	adds	r1, r4, r3
 800a518:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a522:	4422      	add	r2, r4
 800a524:	3302      	adds	r3, #2
 800a526:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a52a:	e7c5      	b.n	800a4b8 <_printf_common+0x58>
 800a52c:	2301      	movs	r3, #1
 800a52e:	4622      	mov	r2, r4
 800a530:	4649      	mov	r1, r9
 800a532:	4638      	mov	r0, r7
 800a534:	47c0      	blx	r8
 800a536:	3001      	adds	r0, #1
 800a538:	d0e6      	beq.n	800a508 <_printf_common+0xa8>
 800a53a:	3601      	adds	r6, #1
 800a53c:	e7d9      	b.n	800a4f2 <_printf_common+0x92>
	...

0800a540 <_printf_i>:
 800a540:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	7e27      	ldrb	r7, [r4, #24]
 800a548:	4691      	mov	r9, r2
 800a54a:	2f78      	cmp	r7, #120	; 0x78
 800a54c:	4680      	mov	r8, r0
 800a54e:	469a      	mov	sl, r3
 800a550:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a552:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a556:	d807      	bhi.n	800a568 <_printf_i+0x28>
 800a558:	2f62      	cmp	r7, #98	; 0x62
 800a55a:	d80a      	bhi.n	800a572 <_printf_i+0x32>
 800a55c:	2f00      	cmp	r7, #0
 800a55e:	f000 80d9 	beq.w	800a714 <_printf_i+0x1d4>
 800a562:	2f58      	cmp	r7, #88	; 0x58
 800a564:	f000 80a4 	beq.w	800a6b0 <_printf_i+0x170>
 800a568:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a56c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a570:	e03a      	b.n	800a5e8 <_printf_i+0xa8>
 800a572:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a576:	2b15      	cmp	r3, #21
 800a578:	d8f6      	bhi.n	800a568 <_printf_i+0x28>
 800a57a:	a001      	add	r0, pc, #4	; (adr r0, 800a580 <_printf_i+0x40>)
 800a57c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a580:	0800a5d9 	.word	0x0800a5d9
 800a584:	0800a5ed 	.word	0x0800a5ed
 800a588:	0800a569 	.word	0x0800a569
 800a58c:	0800a569 	.word	0x0800a569
 800a590:	0800a569 	.word	0x0800a569
 800a594:	0800a569 	.word	0x0800a569
 800a598:	0800a5ed 	.word	0x0800a5ed
 800a59c:	0800a569 	.word	0x0800a569
 800a5a0:	0800a569 	.word	0x0800a569
 800a5a4:	0800a569 	.word	0x0800a569
 800a5a8:	0800a569 	.word	0x0800a569
 800a5ac:	0800a6fb 	.word	0x0800a6fb
 800a5b0:	0800a61d 	.word	0x0800a61d
 800a5b4:	0800a6dd 	.word	0x0800a6dd
 800a5b8:	0800a569 	.word	0x0800a569
 800a5bc:	0800a569 	.word	0x0800a569
 800a5c0:	0800a71d 	.word	0x0800a71d
 800a5c4:	0800a569 	.word	0x0800a569
 800a5c8:	0800a61d 	.word	0x0800a61d
 800a5cc:	0800a569 	.word	0x0800a569
 800a5d0:	0800a569 	.word	0x0800a569
 800a5d4:	0800a6e5 	.word	0x0800a6e5
 800a5d8:	680b      	ldr	r3, [r1, #0]
 800a5da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5de:	1d1a      	adds	r2, r3, #4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	600a      	str	r2, [r1, #0]
 800a5e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e0a4      	b.n	800a736 <_printf_i+0x1f6>
 800a5ec:	6825      	ldr	r5, [r4, #0]
 800a5ee:	6808      	ldr	r0, [r1, #0]
 800a5f0:	062e      	lsls	r6, r5, #24
 800a5f2:	f100 0304 	add.w	r3, r0, #4
 800a5f6:	d50a      	bpl.n	800a60e <_printf_i+0xce>
 800a5f8:	6805      	ldr	r5, [r0, #0]
 800a5fa:	600b      	str	r3, [r1, #0]
 800a5fc:	2d00      	cmp	r5, #0
 800a5fe:	da03      	bge.n	800a608 <_printf_i+0xc8>
 800a600:	232d      	movs	r3, #45	; 0x2d
 800a602:	426d      	negs	r5, r5
 800a604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a608:	230a      	movs	r3, #10
 800a60a:	485e      	ldr	r0, [pc, #376]	; (800a784 <_printf_i+0x244>)
 800a60c:	e019      	b.n	800a642 <_printf_i+0x102>
 800a60e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a612:	6805      	ldr	r5, [r0, #0]
 800a614:	600b      	str	r3, [r1, #0]
 800a616:	bf18      	it	ne
 800a618:	b22d      	sxthne	r5, r5
 800a61a:	e7ef      	b.n	800a5fc <_printf_i+0xbc>
 800a61c:	680b      	ldr	r3, [r1, #0]
 800a61e:	6825      	ldr	r5, [r4, #0]
 800a620:	1d18      	adds	r0, r3, #4
 800a622:	6008      	str	r0, [r1, #0]
 800a624:	0628      	lsls	r0, r5, #24
 800a626:	d501      	bpl.n	800a62c <_printf_i+0xec>
 800a628:	681d      	ldr	r5, [r3, #0]
 800a62a:	e002      	b.n	800a632 <_printf_i+0xf2>
 800a62c:	0669      	lsls	r1, r5, #25
 800a62e:	d5fb      	bpl.n	800a628 <_printf_i+0xe8>
 800a630:	881d      	ldrh	r5, [r3, #0]
 800a632:	2f6f      	cmp	r7, #111	; 0x6f
 800a634:	bf0c      	ite	eq
 800a636:	2308      	moveq	r3, #8
 800a638:	230a      	movne	r3, #10
 800a63a:	4852      	ldr	r0, [pc, #328]	; (800a784 <_printf_i+0x244>)
 800a63c:	2100      	movs	r1, #0
 800a63e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a642:	6866      	ldr	r6, [r4, #4]
 800a644:	2e00      	cmp	r6, #0
 800a646:	bfa8      	it	ge
 800a648:	6821      	ldrge	r1, [r4, #0]
 800a64a:	60a6      	str	r6, [r4, #8]
 800a64c:	bfa4      	itt	ge
 800a64e:	f021 0104 	bicge.w	r1, r1, #4
 800a652:	6021      	strge	r1, [r4, #0]
 800a654:	b90d      	cbnz	r5, 800a65a <_printf_i+0x11a>
 800a656:	2e00      	cmp	r6, #0
 800a658:	d04d      	beq.n	800a6f6 <_printf_i+0x1b6>
 800a65a:	4616      	mov	r6, r2
 800a65c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a660:	fb03 5711 	mls	r7, r3, r1, r5
 800a664:	5dc7      	ldrb	r7, [r0, r7]
 800a666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a66a:	462f      	mov	r7, r5
 800a66c:	42bb      	cmp	r3, r7
 800a66e:	460d      	mov	r5, r1
 800a670:	d9f4      	bls.n	800a65c <_printf_i+0x11c>
 800a672:	2b08      	cmp	r3, #8
 800a674:	d10b      	bne.n	800a68e <_printf_i+0x14e>
 800a676:	6823      	ldr	r3, [r4, #0]
 800a678:	07df      	lsls	r7, r3, #31
 800a67a:	d508      	bpl.n	800a68e <_printf_i+0x14e>
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	6861      	ldr	r1, [r4, #4]
 800a680:	4299      	cmp	r1, r3
 800a682:	bfde      	ittt	le
 800a684:	2330      	movle	r3, #48	; 0x30
 800a686:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a68a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a68e:	1b92      	subs	r2, r2, r6
 800a690:	6122      	str	r2, [r4, #16]
 800a692:	464b      	mov	r3, r9
 800a694:	4621      	mov	r1, r4
 800a696:	4640      	mov	r0, r8
 800a698:	f8cd a000 	str.w	sl, [sp]
 800a69c:	aa03      	add	r2, sp, #12
 800a69e:	f7ff fedf 	bl	800a460 <_printf_common>
 800a6a2:	3001      	adds	r0, #1
 800a6a4:	d14c      	bne.n	800a740 <_printf_i+0x200>
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6aa:	b004      	add	sp, #16
 800a6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b0:	4834      	ldr	r0, [pc, #208]	; (800a784 <_printf_i+0x244>)
 800a6b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6b6:	680e      	ldr	r6, [r1, #0]
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6be:	061f      	lsls	r7, r3, #24
 800a6c0:	600e      	str	r6, [r1, #0]
 800a6c2:	d514      	bpl.n	800a6ee <_printf_i+0x1ae>
 800a6c4:	07d9      	lsls	r1, r3, #31
 800a6c6:	bf44      	itt	mi
 800a6c8:	f043 0320 	orrmi.w	r3, r3, #32
 800a6cc:	6023      	strmi	r3, [r4, #0]
 800a6ce:	b91d      	cbnz	r5, 800a6d8 <_printf_i+0x198>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	f023 0320 	bic.w	r3, r3, #32
 800a6d6:	6023      	str	r3, [r4, #0]
 800a6d8:	2310      	movs	r3, #16
 800a6da:	e7af      	b.n	800a63c <_printf_i+0xfc>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	f043 0320 	orr.w	r3, r3, #32
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	2378      	movs	r3, #120	; 0x78
 800a6e6:	4828      	ldr	r0, [pc, #160]	; (800a788 <_printf_i+0x248>)
 800a6e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6ec:	e7e3      	b.n	800a6b6 <_printf_i+0x176>
 800a6ee:	065e      	lsls	r6, r3, #25
 800a6f0:	bf48      	it	mi
 800a6f2:	b2ad      	uxthmi	r5, r5
 800a6f4:	e7e6      	b.n	800a6c4 <_printf_i+0x184>
 800a6f6:	4616      	mov	r6, r2
 800a6f8:	e7bb      	b.n	800a672 <_printf_i+0x132>
 800a6fa:	680b      	ldr	r3, [r1, #0]
 800a6fc:	6826      	ldr	r6, [r4, #0]
 800a6fe:	1d1d      	adds	r5, r3, #4
 800a700:	6960      	ldr	r0, [r4, #20]
 800a702:	600d      	str	r5, [r1, #0]
 800a704:	0635      	lsls	r5, r6, #24
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	d501      	bpl.n	800a70e <_printf_i+0x1ce>
 800a70a:	6018      	str	r0, [r3, #0]
 800a70c:	e002      	b.n	800a714 <_printf_i+0x1d4>
 800a70e:	0671      	lsls	r1, r6, #25
 800a710:	d5fb      	bpl.n	800a70a <_printf_i+0x1ca>
 800a712:	8018      	strh	r0, [r3, #0]
 800a714:	2300      	movs	r3, #0
 800a716:	4616      	mov	r6, r2
 800a718:	6123      	str	r3, [r4, #16]
 800a71a:	e7ba      	b.n	800a692 <_printf_i+0x152>
 800a71c:	680b      	ldr	r3, [r1, #0]
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	600a      	str	r2, [r1, #0]
 800a722:	681e      	ldr	r6, [r3, #0]
 800a724:	2100      	movs	r1, #0
 800a726:	4630      	mov	r0, r6
 800a728:	6862      	ldr	r2, [r4, #4]
 800a72a:	f000 f89d 	bl	800a868 <memchr>
 800a72e:	b108      	cbz	r0, 800a734 <_printf_i+0x1f4>
 800a730:	1b80      	subs	r0, r0, r6
 800a732:	6060      	str	r0, [r4, #4]
 800a734:	6863      	ldr	r3, [r4, #4]
 800a736:	6123      	str	r3, [r4, #16]
 800a738:	2300      	movs	r3, #0
 800a73a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a73e:	e7a8      	b.n	800a692 <_printf_i+0x152>
 800a740:	4632      	mov	r2, r6
 800a742:	4649      	mov	r1, r9
 800a744:	4640      	mov	r0, r8
 800a746:	6923      	ldr	r3, [r4, #16]
 800a748:	47d0      	blx	sl
 800a74a:	3001      	adds	r0, #1
 800a74c:	d0ab      	beq.n	800a6a6 <_printf_i+0x166>
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	079b      	lsls	r3, r3, #30
 800a752:	d413      	bmi.n	800a77c <_printf_i+0x23c>
 800a754:	68e0      	ldr	r0, [r4, #12]
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	4298      	cmp	r0, r3
 800a75a:	bfb8      	it	lt
 800a75c:	4618      	movlt	r0, r3
 800a75e:	e7a4      	b.n	800a6aa <_printf_i+0x16a>
 800a760:	2301      	movs	r3, #1
 800a762:	4632      	mov	r2, r6
 800a764:	4649      	mov	r1, r9
 800a766:	4640      	mov	r0, r8
 800a768:	47d0      	blx	sl
 800a76a:	3001      	adds	r0, #1
 800a76c:	d09b      	beq.n	800a6a6 <_printf_i+0x166>
 800a76e:	3501      	adds	r5, #1
 800a770:	68e3      	ldr	r3, [r4, #12]
 800a772:	9903      	ldr	r1, [sp, #12]
 800a774:	1a5b      	subs	r3, r3, r1
 800a776:	42ab      	cmp	r3, r5
 800a778:	dcf2      	bgt.n	800a760 <_printf_i+0x220>
 800a77a:	e7eb      	b.n	800a754 <_printf_i+0x214>
 800a77c:	2500      	movs	r5, #0
 800a77e:	f104 0619 	add.w	r6, r4, #25
 800a782:	e7f5      	b.n	800a770 <_printf_i+0x230>
 800a784:	0800c285 	.word	0x0800c285
 800a788:	0800c296 	.word	0x0800c296

0800a78c <nan>:
 800a78c:	2000      	movs	r0, #0
 800a78e:	4901      	ldr	r1, [pc, #4]	; (800a794 <nan+0x8>)
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	7ff80000 	.word	0x7ff80000

0800a798 <_sbrk_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	2300      	movs	r3, #0
 800a79c:	4d05      	ldr	r5, [pc, #20]	; (800a7b4 <_sbrk_r+0x1c>)
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	602b      	str	r3, [r5, #0]
 800a7a4:	f7f8 f8c2 	bl	800292c <_sbrk>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d102      	bne.n	800a7b2 <_sbrk_r+0x1a>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	b103      	cbz	r3, 800a7b2 <_sbrk_r+0x1a>
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	bd38      	pop	{r3, r4, r5, pc}
 800a7b4:	20004ff8 	.word	0x20004ff8

0800a7b8 <strncmp>:
 800a7b8:	b510      	push	{r4, lr}
 800a7ba:	b16a      	cbz	r2, 800a7d8 <strncmp+0x20>
 800a7bc:	3901      	subs	r1, #1
 800a7be:	1884      	adds	r4, r0, r2
 800a7c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d103      	bne.n	800a7d4 <strncmp+0x1c>
 800a7cc:	42a0      	cmp	r0, r4
 800a7ce:	d001      	beq.n	800a7d4 <strncmp+0x1c>
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1f5      	bne.n	800a7c0 <strncmp+0x8>
 800a7d4:	1a98      	subs	r0, r3, r2
 800a7d6:	bd10      	pop	{r4, pc}
 800a7d8:	4610      	mov	r0, r2
 800a7da:	e7fc      	b.n	800a7d6 <strncmp+0x1e>

0800a7dc <__ascii_wctomb>:
 800a7dc:	4603      	mov	r3, r0
 800a7de:	4608      	mov	r0, r1
 800a7e0:	b141      	cbz	r1, 800a7f4 <__ascii_wctomb+0x18>
 800a7e2:	2aff      	cmp	r2, #255	; 0xff
 800a7e4:	d904      	bls.n	800a7f0 <__ascii_wctomb+0x14>
 800a7e6:	228a      	movs	r2, #138	; 0x8a
 800a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	4770      	bx	lr
 800a7f0:	2001      	movs	r0, #1
 800a7f2:	700a      	strb	r2, [r1, #0]
 800a7f4:	4770      	bx	lr
	...

0800a7f8 <__assert_func>:
 800a7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7fa:	4614      	mov	r4, r2
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4b09      	ldr	r3, [pc, #36]	; (800a824 <__assert_func+0x2c>)
 800a800:	4605      	mov	r5, r0
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68d8      	ldr	r0, [r3, #12]
 800a806:	b14c      	cbz	r4, 800a81c <__assert_func+0x24>
 800a808:	4b07      	ldr	r3, [pc, #28]	; (800a828 <__assert_func+0x30>)
 800a80a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a80e:	9100      	str	r1, [sp, #0]
 800a810:	462b      	mov	r3, r5
 800a812:	4906      	ldr	r1, [pc, #24]	; (800a82c <__assert_func+0x34>)
 800a814:	f000 f80e 	bl	800a834 <fiprintf>
 800a818:	f000 fae4 	bl	800ade4 <abort>
 800a81c:	4b04      	ldr	r3, [pc, #16]	; (800a830 <__assert_func+0x38>)
 800a81e:	461c      	mov	r4, r3
 800a820:	e7f3      	b.n	800a80a <__assert_func+0x12>
 800a822:	bf00      	nop
 800a824:	20000010 	.word	0x20000010
 800a828:	0800c2a7 	.word	0x0800c2a7
 800a82c:	0800c2b4 	.word	0x0800c2b4
 800a830:	0800c2e2 	.word	0x0800c2e2

0800a834 <fiprintf>:
 800a834:	b40e      	push	{r1, r2, r3}
 800a836:	b503      	push	{r0, r1, lr}
 800a838:	4601      	mov	r1, r0
 800a83a:	ab03      	add	r3, sp, #12
 800a83c:	4805      	ldr	r0, [pc, #20]	; (800a854 <fiprintf+0x20>)
 800a83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a842:	6800      	ldr	r0, [r0, #0]
 800a844:	9301      	str	r3, [sp, #4]
 800a846:	f000 f8dd 	bl	800aa04 <_vfiprintf_r>
 800a84a:	b002      	add	sp, #8
 800a84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a850:	b003      	add	sp, #12
 800a852:	4770      	bx	lr
 800a854:	20000010 	.word	0x20000010

0800a858 <malloc>:
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <malloc+0xc>)
 800a85a:	4601      	mov	r1, r0
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f7ff bc49 	b.w	800a0f4 <_malloc_r>
 800a862:	bf00      	nop
 800a864:	20000010 	.word	0x20000010

0800a868 <memchr>:
 800a868:	4603      	mov	r3, r0
 800a86a:	b510      	push	{r4, lr}
 800a86c:	b2c9      	uxtb	r1, r1
 800a86e:	4402      	add	r2, r0
 800a870:	4293      	cmp	r3, r2
 800a872:	4618      	mov	r0, r3
 800a874:	d101      	bne.n	800a87a <memchr+0x12>
 800a876:	2000      	movs	r0, #0
 800a878:	e003      	b.n	800a882 <memchr+0x1a>
 800a87a:	7804      	ldrb	r4, [r0, #0]
 800a87c:	3301      	adds	r3, #1
 800a87e:	428c      	cmp	r4, r1
 800a880:	d1f6      	bne.n	800a870 <memchr+0x8>
 800a882:	bd10      	pop	{r4, pc}

0800a884 <memmove>:
 800a884:	4288      	cmp	r0, r1
 800a886:	b510      	push	{r4, lr}
 800a888:	eb01 0402 	add.w	r4, r1, r2
 800a88c:	d902      	bls.n	800a894 <memmove+0x10>
 800a88e:	4284      	cmp	r4, r0
 800a890:	4623      	mov	r3, r4
 800a892:	d807      	bhi.n	800a8a4 <memmove+0x20>
 800a894:	1e43      	subs	r3, r0, #1
 800a896:	42a1      	cmp	r1, r4
 800a898:	d008      	beq.n	800a8ac <memmove+0x28>
 800a89a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a89e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8a2:	e7f8      	b.n	800a896 <memmove+0x12>
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	4402      	add	r2, r0
 800a8a8:	428a      	cmp	r2, r1
 800a8aa:	d100      	bne.n	800a8ae <memmove+0x2a>
 800a8ac:	bd10      	pop	{r4, pc}
 800a8ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8b6:	e7f7      	b.n	800a8a8 <memmove+0x24>

0800a8b8 <__malloc_lock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	; (800a8c0 <__malloc_lock+0x8>)
 800a8ba:	f000 bc53 	b.w	800b164 <__retarget_lock_acquire_recursive>
 800a8be:	bf00      	nop
 800a8c0:	20005000 	.word	0x20005000

0800a8c4 <__malloc_unlock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	; (800a8cc <__malloc_unlock+0x8>)
 800a8c6:	f000 bc4e 	b.w	800b166 <__retarget_lock_release_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	20005000 	.word	0x20005000

0800a8d0 <_free_r>:
 800a8d0:	b538      	push	{r3, r4, r5, lr}
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	2900      	cmp	r1, #0
 800a8d6:	d043      	beq.n	800a960 <_free_r+0x90>
 800a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8dc:	1f0c      	subs	r4, r1, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfb8      	it	lt
 800a8e2:	18e4      	addlt	r4, r4, r3
 800a8e4:	f7ff ffe8 	bl	800a8b8 <__malloc_lock>
 800a8e8:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <_free_r+0x94>)
 800a8ea:	6813      	ldr	r3, [r2, #0]
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	b933      	cbnz	r3, 800a8fe <_free_r+0x2e>
 800a8f0:	6063      	str	r3, [r4, #4]
 800a8f2:	6014      	str	r4, [r2, #0]
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8fa:	f7ff bfe3 	b.w	800a8c4 <__malloc_unlock>
 800a8fe:	42a3      	cmp	r3, r4
 800a900:	d90a      	bls.n	800a918 <_free_r+0x48>
 800a902:	6821      	ldr	r1, [r4, #0]
 800a904:	1862      	adds	r2, r4, r1
 800a906:	4293      	cmp	r3, r2
 800a908:	bf01      	itttt	eq
 800a90a:	681a      	ldreq	r2, [r3, #0]
 800a90c:	685b      	ldreq	r3, [r3, #4]
 800a90e:	1852      	addeq	r2, r2, r1
 800a910:	6022      	streq	r2, [r4, #0]
 800a912:	6063      	str	r3, [r4, #4]
 800a914:	6004      	str	r4, [r0, #0]
 800a916:	e7ed      	b.n	800a8f4 <_free_r+0x24>
 800a918:	461a      	mov	r2, r3
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	b10b      	cbz	r3, 800a922 <_free_r+0x52>
 800a91e:	42a3      	cmp	r3, r4
 800a920:	d9fa      	bls.n	800a918 <_free_r+0x48>
 800a922:	6811      	ldr	r1, [r2, #0]
 800a924:	1850      	adds	r0, r2, r1
 800a926:	42a0      	cmp	r0, r4
 800a928:	d10b      	bne.n	800a942 <_free_r+0x72>
 800a92a:	6820      	ldr	r0, [r4, #0]
 800a92c:	4401      	add	r1, r0
 800a92e:	1850      	adds	r0, r2, r1
 800a930:	4283      	cmp	r3, r0
 800a932:	6011      	str	r1, [r2, #0]
 800a934:	d1de      	bne.n	800a8f4 <_free_r+0x24>
 800a936:	6818      	ldr	r0, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	4401      	add	r1, r0
 800a93c:	6011      	str	r1, [r2, #0]
 800a93e:	6053      	str	r3, [r2, #4]
 800a940:	e7d8      	b.n	800a8f4 <_free_r+0x24>
 800a942:	d902      	bls.n	800a94a <_free_r+0x7a>
 800a944:	230c      	movs	r3, #12
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	e7d4      	b.n	800a8f4 <_free_r+0x24>
 800a94a:	6820      	ldr	r0, [r4, #0]
 800a94c:	1821      	adds	r1, r4, r0
 800a94e:	428b      	cmp	r3, r1
 800a950:	bf01      	itttt	eq
 800a952:	6819      	ldreq	r1, [r3, #0]
 800a954:	685b      	ldreq	r3, [r3, #4]
 800a956:	1809      	addeq	r1, r1, r0
 800a958:	6021      	streq	r1, [r4, #0]
 800a95a:	6063      	str	r3, [r4, #4]
 800a95c:	6054      	str	r4, [r2, #4]
 800a95e:	e7c9      	b.n	800a8f4 <_free_r+0x24>
 800a960:	bd38      	pop	{r3, r4, r5, pc}
 800a962:	bf00      	nop
 800a964:	20002314 	.word	0x20002314

0800a968 <_realloc_r>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	4607      	mov	r7, r0
 800a96c:	4614      	mov	r4, r2
 800a96e:	460e      	mov	r6, r1
 800a970:	b921      	cbnz	r1, 800a97c <_realloc_r+0x14>
 800a972:	4611      	mov	r1, r2
 800a974:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a978:	f7ff bbbc 	b.w	800a0f4 <_malloc_r>
 800a97c:	b922      	cbnz	r2, 800a988 <_realloc_r+0x20>
 800a97e:	f7ff ffa7 	bl	800a8d0 <_free_r>
 800a982:	4625      	mov	r5, r4
 800a984:	4628      	mov	r0, r5
 800a986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a988:	f000 fc52 	bl	800b230 <_malloc_usable_size_r>
 800a98c:	42a0      	cmp	r0, r4
 800a98e:	d20f      	bcs.n	800a9b0 <_realloc_r+0x48>
 800a990:	4621      	mov	r1, r4
 800a992:	4638      	mov	r0, r7
 800a994:	f7ff fbae 	bl	800a0f4 <_malloc_r>
 800a998:	4605      	mov	r5, r0
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0f2      	beq.n	800a984 <_realloc_r+0x1c>
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	f7fd fd11 	bl	80083c8 <memcpy>
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7ff ff91 	bl	800a8d0 <_free_r>
 800a9ae:	e7e9      	b.n	800a984 <_realloc_r+0x1c>
 800a9b0:	4635      	mov	r5, r6
 800a9b2:	e7e7      	b.n	800a984 <_realloc_r+0x1c>

0800a9b4 <__sfputc_r>:
 800a9b4:	6893      	ldr	r3, [r2, #8]
 800a9b6:	b410      	push	{r4}
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	6093      	str	r3, [r2, #8]
 800a9be:	da07      	bge.n	800a9d0 <__sfputc_r+0x1c>
 800a9c0:	6994      	ldr	r4, [r2, #24]
 800a9c2:	42a3      	cmp	r3, r4
 800a9c4:	db01      	blt.n	800a9ca <__sfputc_r+0x16>
 800a9c6:	290a      	cmp	r1, #10
 800a9c8:	d102      	bne.n	800a9d0 <__sfputc_r+0x1c>
 800a9ca:	bc10      	pop	{r4}
 800a9cc:	f000 b94a 	b.w	800ac64 <__swbuf_r>
 800a9d0:	6813      	ldr	r3, [r2, #0]
 800a9d2:	1c58      	adds	r0, r3, #1
 800a9d4:	6010      	str	r0, [r2, #0]
 800a9d6:	7019      	strb	r1, [r3, #0]
 800a9d8:	4608      	mov	r0, r1
 800a9da:	bc10      	pop	{r4}
 800a9dc:	4770      	bx	lr

0800a9de <__sfputs_r>:
 800a9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	18d5      	adds	r5, r2, r3
 800a9e8:	42ac      	cmp	r4, r5
 800a9ea:	d101      	bne.n	800a9f0 <__sfputs_r+0x12>
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	e007      	b.n	800aa00 <__sfputs_r+0x22>
 800a9f0:	463a      	mov	r2, r7
 800a9f2:	4630      	mov	r0, r6
 800a9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f8:	f7ff ffdc 	bl	800a9b4 <__sfputc_r>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d1f3      	bne.n	800a9e8 <__sfputs_r+0xa>
 800aa00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aa04 <_vfiprintf_r>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	460d      	mov	r5, r1
 800aa0a:	4614      	mov	r4, r2
 800aa0c:	4698      	mov	r8, r3
 800aa0e:	4606      	mov	r6, r0
 800aa10:	b09d      	sub	sp, #116	; 0x74
 800aa12:	b118      	cbz	r0, 800aa1c <_vfiprintf_r+0x18>
 800aa14:	6983      	ldr	r3, [r0, #24]
 800aa16:	b90b      	cbnz	r3, 800aa1c <_vfiprintf_r+0x18>
 800aa18:	f000 fb06 	bl	800b028 <__sinit>
 800aa1c:	4b89      	ldr	r3, [pc, #548]	; (800ac44 <_vfiprintf_r+0x240>)
 800aa1e:	429d      	cmp	r5, r3
 800aa20:	d11b      	bne.n	800aa5a <_vfiprintf_r+0x56>
 800aa22:	6875      	ldr	r5, [r6, #4]
 800aa24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa26:	07d9      	lsls	r1, r3, #31
 800aa28:	d405      	bmi.n	800aa36 <_vfiprintf_r+0x32>
 800aa2a:	89ab      	ldrh	r3, [r5, #12]
 800aa2c:	059a      	lsls	r2, r3, #22
 800aa2e:	d402      	bmi.n	800aa36 <_vfiprintf_r+0x32>
 800aa30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa32:	f000 fb97 	bl	800b164 <__retarget_lock_acquire_recursive>
 800aa36:	89ab      	ldrh	r3, [r5, #12]
 800aa38:	071b      	lsls	r3, r3, #28
 800aa3a:	d501      	bpl.n	800aa40 <_vfiprintf_r+0x3c>
 800aa3c:	692b      	ldr	r3, [r5, #16]
 800aa3e:	b9eb      	cbnz	r3, 800aa7c <_vfiprintf_r+0x78>
 800aa40:	4629      	mov	r1, r5
 800aa42:	4630      	mov	r0, r6
 800aa44:	f000 f960 	bl	800ad08 <__swsetup_r>
 800aa48:	b1c0      	cbz	r0, 800aa7c <_vfiprintf_r+0x78>
 800aa4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa4c:	07dc      	lsls	r4, r3, #31
 800aa4e:	d50e      	bpl.n	800aa6e <_vfiprintf_r+0x6a>
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	b01d      	add	sp, #116	; 0x74
 800aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5a:	4b7b      	ldr	r3, [pc, #492]	; (800ac48 <_vfiprintf_r+0x244>)
 800aa5c:	429d      	cmp	r5, r3
 800aa5e:	d101      	bne.n	800aa64 <_vfiprintf_r+0x60>
 800aa60:	68b5      	ldr	r5, [r6, #8]
 800aa62:	e7df      	b.n	800aa24 <_vfiprintf_r+0x20>
 800aa64:	4b79      	ldr	r3, [pc, #484]	; (800ac4c <_vfiprintf_r+0x248>)
 800aa66:	429d      	cmp	r5, r3
 800aa68:	bf08      	it	eq
 800aa6a:	68f5      	ldreq	r5, [r6, #12]
 800aa6c:	e7da      	b.n	800aa24 <_vfiprintf_r+0x20>
 800aa6e:	89ab      	ldrh	r3, [r5, #12]
 800aa70:	0598      	lsls	r0, r3, #22
 800aa72:	d4ed      	bmi.n	800aa50 <_vfiprintf_r+0x4c>
 800aa74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa76:	f000 fb76 	bl	800b166 <__retarget_lock_release_recursive>
 800aa7a:	e7e9      	b.n	800aa50 <_vfiprintf_r+0x4c>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa80:	2320      	movs	r3, #32
 800aa82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa86:	2330      	movs	r3, #48	; 0x30
 800aa88:	f04f 0901 	mov.w	r9, #1
 800aa8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ac50 <_vfiprintf_r+0x24c>
 800aa94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa98:	4623      	mov	r3, r4
 800aa9a:	469a      	mov	sl, r3
 800aa9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaa0:	b10a      	cbz	r2, 800aaa6 <_vfiprintf_r+0xa2>
 800aaa2:	2a25      	cmp	r2, #37	; 0x25
 800aaa4:	d1f9      	bne.n	800aa9a <_vfiprintf_r+0x96>
 800aaa6:	ebba 0b04 	subs.w	fp, sl, r4
 800aaaa:	d00b      	beq.n	800aac4 <_vfiprintf_r+0xc0>
 800aaac:	465b      	mov	r3, fp
 800aaae:	4622      	mov	r2, r4
 800aab0:	4629      	mov	r1, r5
 800aab2:	4630      	mov	r0, r6
 800aab4:	f7ff ff93 	bl	800a9de <__sfputs_r>
 800aab8:	3001      	adds	r0, #1
 800aaba:	f000 80aa 	beq.w	800ac12 <_vfiprintf_r+0x20e>
 800aabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aac0:	445a      	add	r2, fp
 800aac2:	9209      	str	r2, [sp, #36]	; 0x24
 800aac4:	f89a 3000 	ldrb.w	r3, [sl]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 80a2 	beq.w	800ac12 <_vfiprintf_r+0x20e>
 800aace:	2300      	movs	r3, #0
 800aad0:	f04f 32ff 	mov.w	r2, #4294967295
 800aad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aad8:	f10a 0a01 	add.w	sl, sl, #1
 800aadc:	9304      	str	r3, [sp, #16]
 800aade:	9307      	str	r3, [sp, #28]
 800aae0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aae4:	931a      	str	r3, [sp, #104]	; 0x68
 800aae6:	4654      	mov	r4, sl
 800aae8:	2205      	movs	r2, #5
 800aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaee:	4858      	ldr	r0, [pc, #352]	; (800ac50 <_vfiprintf_r+0x24c>)
 800aaf0:	f7ff feba 	bl	800a868 <memchr>
 800aaf4:	9a04      	ldr	r2, [sp, #16]
 800aaf6:	b9d8      	cbnz	r0, 800ab30 <_vfiprintf_r+0x12c>
 800aaf8:	06d1      	lsls	r1, r2, #27
 800aafa:	bf44      	itt	mi
 800aafc:	2320      	movmi	r3, #32
 800aafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab02:	0713      	lsls	r3, r2, #28
 800ab04:	bf44      	itt	mi
 800ab06:	232b      	movmi	r3, #43	; 0x2b
 800ab08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab0c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab10:	2b2a      	cmp	r3, #42	; 0x2a
 800ab12:	d015      	beq.n	800ab40 <_vfiprintf_r+0x13c>
 800ab14:	4654      	mov	r4, sl
 800ab16:	2000      	movs	r0, #0
 800ab18:	f04f 0c0a 	mov.w	ip, #10
 800ab1c:	9a07      	ldr	r2, [sp, #28]
 800ab1e:	4621      	mov	r1, r4
 800ab20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab24:	3b30      	subs	r3, #48	; 0x30
 800ab26:	2b09      	cmp	r3, #9
 800ab28:	d94e      	bls.n	800abc8 <_vfiprintf_r+0x1c4>
 800ab2a:	b1b0      	cbz	r0, 800ab5a <_vfiprintf_r+0x156>
 800ab2c:	9207      	str	r2, [sp, #28]
 800ab2e:	e014      	b.n	800ab5a <_vfiprintf_r+0x156>
 800ab30:	eba0 0308 	sub.w	r3, r0, r8
 800ab34:	fa09 f303 	lsl.w	r3, r9, r3
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	46a2      	mov	sl, r4
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	e7d2      	b.n	800aae6 <_vfiprintf_r+0xe2>
 800ab40:	9b03      	ldr	r3, [sp, #12]
 800ab42:	1d19      	adds	r1, r3, #4
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	9103      	str	r1, [sp, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	bfbb      	ittet	lt
 800ab4c:	425b      	neglt	r3, r3
 800ab4e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab52:	9307      	strge	r3, [sp, #28]
 800ab54:	9307      	strlt	r3, [sp, #28]
 800ab56:	bfb8      	it	lt
 800ab58:	9204      	strlt	r2, [sp, #16]
 800ab5a:	7823      	ldrb	r3, [r4, #0]
 800ab5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab5e:	d10c      	bne.n	800ab7a <_vfiprintf_r+0x176>
 800ab60:	7863      	ldrb	r3, [r4, #1]
 800ab62:	2b2a      	cmp	r3, #42	; 0x2a
 800ab64:	d135      	bne.n	800abd2 <_vfiprintf_r+0x1ce>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	3402      	adds	r4, #2
 800ab6a:	1d1a      	adds	r2, r3, #4
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	9203      	str	r2, [sp, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bfb8      	it	lt
 800ab74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab78:	9305      	str	r3, [sp, #20]
 800ab7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac60 <_vfiprintf_r+0x25c>
 800ab7e:	2203      	movs	r2, #3
 800ab80:	4650      	mov	r0, sl
 800ab82:	7821      	ldrb	r1, [r4, #0]
 800ab84:	f7ff fe70 	bl	800a868 <memchr>
 800ab88:	b140      	cbz	r0, 800ab9c <_vfiprintf_r+0x198>
 800ab8a:	2340      	movs	r3, #64	; 0x40
 800ab8c:	eba0 000a 	sub.w	r0, r0, sl
 800ab90:	fa03 f000 	lsl.w	r0, r3, r0
 800ab94:	9b04      	ldr	r3, [sp, #16]
 800ab96:	3401      	adds	r4, #1
 800ab98:	4303      	orrs	r3, r0
 800ab9a:	9304      	str	r3, [sp, #16]
 800ab9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba0:	2206      	movs	r2, #6
 800aba2:	482c      	ldr	r0, [pc, #176]	; (800ac54 <_vfiprintf_r+0x250>)
 800aba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aba8:	f7ff fe5e 	bl	800a868 <memchr>
 800abac:	2800      	cmp	r0, #0
 800abae:	d03f      	beq.n	800ac30 <_vfiprintf_r+0x22c>
 800abb0:	4b29      	ldr	r3, [pc, #164]	; (800ac58 <_vfiprintf_r+0x254>)
 800abb2:	bb1b      	cbnz	r3, 800abfc <_vfiprintf_r+0x1f8>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	3307      	adds	r3, #7
 800abb8:	f023 0307 	bic.w	r3, r3, #7
 800abbc:	3308      	adds	r3, #8
 800abbe:	9303      	str	r3, [sp, #12]
 800abc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc2:	443b      	add	r3, r7
 800abc4:	9309      	str	r3, [sp, #36]	; 0x24
 800abc6:	e767      	b.n	800aa98 <_vfiprintf_r+0x94>
 800abc8:	460c      	mov	r4, r1
 800abca:	2001      	movs	r0, #1
 800abcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800abd0:	e7a5      	b.n	800ab1e <_vfiprintf_r+0x11a>
 800abd2:	2300      	movs	r3, #0
 800abd4:	f04f 0c0a 	mov.w	ip, #10
 800abd8:	4619      	mov	r1, r3
 800abda:	3401      	adds	r4, #1
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	4620      	mov	r0, r4
 800abe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abe4:	3a30      	subs	r2, #48	; 0x30
 800abe6:	2a09      	cmp	r2, #9
 800abe8:	d903      	bls.n	800abf2 <_vfiprintf_r+0x1ee>
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0c5      	beq.n	800ab7a <_vfiprintf_r+0x176>
 800abee:	9105      	str	r1, [sp, #20]
 800abf0:	e7c3      	b.n	800ab7a <_vfiprintf_r+0x176>
 800abf2:	4604      	mov	r4, r0
 800abf4:	2301      	movs	r3, #1
 800abf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800abfa:	e7f0      	b.n	800abde <_vfiprintf_r+0x1da>
 800abfc:	ab03      	add	r3, sp, #12
 800abfe:	9300      	str	r3, [sp, #0]
 800ac00:	462a      	mov	r2, r5
 800ac02:	4630      	mov	r0, r6
 800ac04:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <_vfiprintf_r+0x258>)
 800ac06:	a904      	add	r1, sp, #16
 800ac08:	f3af 8000 	nop.w
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	1c78      	adds	r0, r7, #1
 800ac10:	d1d6      	bne.n	800abc0 <_vfiprintf_r+0x1bc>
 800ac12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac14:	07d9      	lsls	r1, r3, #31
 800ac16:	d405      	bmi.n	800ac24 <_vfiprintf_r+0x220>
 800ac18:	89ab      	ldrh	r3, [r5, #12]
 800ac1a:	059a      	lsls	r2, r3, #22
 800ac1c:	d402      	bmi.n	800ac24 <_vfiprintf_r+0x220>
 800ac1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac20:	f000 faa1 	bl	800b166 <__retarget_lock_release_recursive>
 800ac24:	89ab      	ldrh	r3, [r5, #12]
 800ac26:	065b      	lsls	r3, r3, #25
 800ac28:	f53f af12 	bmi.w	800aa50 <_vfiprintf_r+0x4c>
 800ac2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac2e:	e711      	b.n	800aa54 <_vfiprintf_r+0x50>
 800ac30:	ab03      	add	r3, sp, #12
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	462a      	mov	r2, r5
 800ac36:	4630      	mov	r0, r6
 800ac38:	4b08      	ldr	r3, [pc, #32]	; (800ac5c <_vfiprintf_r+0x258>)
 800ac3a:	a904      	add	r1, sp, #16
 800ac3c:	f7ff fc80 	bl	800a540 <_printf_i>
 800ac40:	e7e4      	b.n	800ac0c <_vfiprintf_r+0x208>
 800ac42:	bf00      	nop
 800ac44:	0800c404 	.word	0x0800c404
 800ac48:	0800c424 	.word	0x0800c424
 800ac4c:	0800c3e4 	.word	0x0800c3e4
 800ac50:	0800c274 	.word	0x0800c274
 800ac54:	0800c27e 	.word	0x0800c27e
 800ac58:	00000000 	.word	0x00000000
 800ac5c:	0800a9df 	.word	0x0800a9df
 800ac60:	0800c27a 	.word	0x0800c27a

0800ac64 <__swbuf_r>:
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac66:	460e      	mov	r6, r1
 800ac68:	4614      	mov	r4, r2
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	b118      	cbz	r0, 800ac76 <__swbuf_r+0x12>
 800ac6e:	6983      	ldr	r3, [r0, #24]
 800ac70:	b90b      	cbnz	r3, 800ac76 <__swbuf_r+0x12>
 800ac72:	f000 f9d9 	bl	800b028 <__sinit>
 800ac76:	4b21      	ldr	r3, [pc, #132]	; (800acfc <__swbuf_r+0x98>)
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d12b      	bne.n	800acd4 <__swbuf_r+0x70>
 800ac7c:	686c      	ldr	r4, [r5, #4]
 800ac7e:	69a3      	ldr	r3, [r4, #24]
 800ac80:	60a3      	str	r3, [r4, #8]
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	071a      	lsls	r2, r3, #28
 800ac86:	d52f      	bpl.n	800ace8 <__swbuf_r+0x84>
 800ac88:	6923      	ldr	r3, [r4, #16]
 800ac8a:	b36b      	cbz	r3, 800ace8 <__swbuf_r+0x84>
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	6820      	ldr	r0, [r4, #0]
 800ac90:	b2f6      	uxtb	r6, r6
 800ac92:	1ac0      	subs	r0, r0, r3
 800ac94:	6963      	ldr	r3, [r4, #20]
 800ac96:	4637      	mov	r7, r6
 800ac98:	4283      	cmp	r3, r0
 800ac9a:	dc04      	bgt.n	800aca6 <__swbuf_r+0x42>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f92e 	bl	800af00 <_fflush_r>
 800aca4:	bb30      	cbnz	r0, 800acf4 <__swbuf_r+0x90>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	3001      	adds	r0, #1
 800acaa:	3b01      	subs	r3, #1
 800acac:	60a3      	str	r3, [r4, #8]
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	6022      	str	r2, [r4, #0]
 800acb4:	701e      	strb	r6, [r3, #0]
 800acb6:	6963      	ldr	r3, [r4, #20]
 800acb8:	4283      	cmp	r3, r0
 800acba:	d004      	beq.n	800acc6 <__swbuf_r+0x62>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	07db      	lsls	r3, r3, #31
 800acc0:	d506      	bpl.n	800acd0 <__swbuf_r+0x6c>
 800acc2:	2e0a      	cmp	r6, #10
 800acc4:	d104      	bne.n	800acd0 <__swbuf_r+0x6c>
 800acc6:	4621      	mov	r1, r4
 800acc8:	4628      	mov	r0, r5
 800acca:	f000 f919 	bl	800af00 <_fflush_r>
 800acce:	b988      	cbnz	r0, 800acf4 <__swbuf_r+0x90>
 800acd0:	4638      	mov	r0, r7
 800acd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <__swbuf_r+0x9c>)
 800acd6:	429c      	cmp	r4, r3
 800acd8:	d101      	bne.n	800acde <__swbuf_r+0x7a>
 800acda:	68ac      	ldr	r4, [r5, #8]
 800acdc:	e7cf      	b.n	800ac7e <__swbuf_r+0x1a>
 800acde:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <__swbuf_r+0xa0>)
 800ace0:	429c      	cmp	r4, r3
 800ace2:	bf08      	it	eq
 800ace4:	68ec      	ldreq	r4, [r5, #12]
 800ace6:	e7ca      	b.n	800ac7e <__swbuf_r+0x1a>
 800ace8:	4621      	mov	r1, r4
 800acea:	4628      	mov	r0, r5
 800acec:	f000 f80c 	bl	800ad08 <__swsetup_r>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d0cb      	beq.n	800ac8c <__swbuf_r+0x28>
 800acf4:	f04f 37ff 	mov.w	r7, #4294967295
 800acf8:	e7ea      	b.n	800acd0 <__swbuf_r+0x6c>
 800acfa:	bf00      	nop
 800acfc:	0800c404 	.word	0x0800c404
 800ad00:	0800c424 	.word	0x0800c424
 800ad04:	0800c3e4 	.word	0x0800c3e4

0800ad08 <__swsetup_r>:
 800ad08:	4b32      	ldr	r3, [pc, #200]	; (800add4 <__swsetup_r+0xcc>)
 800ad0a:	b570      	push	{r4, r5, r6, lr}
 800ad0c:	681d      	ldr	r5, [r3, #0]
 800ad0e:	4606      	mov	r6, r0
 800ad10:	460c      	mov	r4, r1
 800ad12:	b125      	cbz	r5, 800ad1e <__swsetup_r+0x16>
 800ad14:	69ab      	ldr	r3, [r5, #24]
 800ad16:	b913      	cbnz	r3, 800ad1e <__swsetup_r+0x16>
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 f985 	bl	800b028 <__sinit>
 800ad1e:	4b2e      	ldr	r3, [pc, #184]	; (800add8 <__swsetup_r+0xd0>)
 800ad20:	429c      	cmp	r4, r3
 800ad22:	d10f      	bne.n	800ad44 <__swsetup_r+0x3c>
 800ad24:	686c      	ldr	r4, [r5, #4]
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad2c:	0719      	lsls	r1, r3, #28
 800ad2e:	d42c      	bmi.n	800ad8a <__swsetup_r+0x82>
 800ad30:	06dd      	lsls	r5, r3, #27
 800ad32:	d411      	bmi.n	800ad58 <__swsetup_r+0x50>
 800ad34:	2309      	movs	r3, #9
 800ad36:	6033      	str	r3, [r6, #0]
 800ad38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	81a3      	strh	r3, [r4, #12]
 800ad42:	e03e      	b.n	800adc2 <__swsetup_r+0xba>
 800ad44:	4b25      	ldr	r3, [pc, #148]	; (800addc <__swsetup_r+0xd4>)
 800ad46:	429c      	cmp	r4, r3
 800ad48:	d101      	bne.n	800ad4e <__swsetup_r+0x46>
 800ad4a:	68ac      	ldr	r4, [r5, #8]
 800ad4c:	e7eb      	b.n	800ad26 <__swsetup_r+0x1e>
 800ad4e:	4b24      	ldr	r3, [pc, #144]	; (800ade0 <__swsetup_r+0xd8>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	bf08      	it	eq
 800ad54:	68ec      	ldreq	r4, [r5, #12]
 800ad56:	e7e6      	b.n	800ad26 <__swsetup_r+0x1e>
 800ad58:	0758      	lsls	r0, r3, #29
 800ad5a:	d512      	bpl.n	800ad82 <__swsetup_r+0x7a>
 800ad5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad5e:	b141      	cbz	r1, 800ad72 <__swsetup_r+0x6a>
 800ad60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad64:	4299      	cmp	r1, r3
 800ad66:	d002      	beq.n	800ad6e <__swsetup_r+0x66>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	f7ff fdb1 	bl	800a8d0 <_free_r>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	6363      	str	r3, [r4, #52]	; 0x34
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	6063      	str	r3, [r4, #4]
 800ad7e:	6923      	ldr	r3, [r4, #16]
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	89a3      	ldrh	r3, [r4, #12]
 800ad84:	f043 0308 	orr.w	r3, r3, #8
 800ad88:	81a3      	strh	r3, [r4, #12]
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	b94b      	cbnz	r3, 800ada2 <__swsetup_r+0x9a>
 800ad8e:	89a3      	ldrh	r3, [r4, #12]
 800ad90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad98:	d003      	beq.n	800ada2 <__swsetup_r+0x9a>
 800ad9a:	4621      	mov	r1, r4
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f000 fa07 	bl	800b1b0 <__smakebuf_r>
 800ada2:	89a0      	ldrh	r0, [r4, #12]
 800ada4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ada8:	f010 0301 	ands.w	r3, r0, #1
 800adac:	d00a      	beq.n	800adc4 <__swsetup_r+0xbc>
 800adae:	2300      	movs	r3, #0
 800adb0:	60a3      	str	r3, [r4, #8]
 800adb2:	6963      	ldr	r3, [r4, #20]
 800adb4:	425b      	negs	r3, r3
 800adb6:	61a3      	str	r3, [r4, #24]
 800adb8:	6923      	ldr	r3, [r4, #16]
 800adba:	b943      	cbnz	r3, 800adce <__swsetup_r+0xc6>
 800adbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800adc0:	d1ba      	bne.n	800ad38 <__swsetup_r+0x30>
 800adc2:	bd70      	pop	{r4, r5, r6, pc}
 800adc4:	0781      	lsls	r1, r0, #30
 800adc6:	bf58      	it	pl
 800adc8:	6963      	ldrpl	r3, [r4, #20]
 800adca:	60a3      	str	r3, [r4, #8]
 800adcc:	e7f4      	b.n	800adb8 <__swsetup_r+0xb0>
 800adce:	2000      	movs	r0, #0
 800add0:	e7f7      	b.n	800adc2 <__swsetup_r+0xba>
 800add2:	bf00      	nop
 800add4:	20000010 	.word	0x20000010
 800add8:	0800c404 	.word	0x0800c404
 800addc:	0800c424 	.word	0x0800c424
 800ade0:	0800c3e4 	.word	0x0800c3e4

0800ade4 <abort>:
 800ade4:	2006      	movs	r0, #6
 800ade6:	b508      	push	{r3, lr}
 800ade8:	f000 fa52 	bl	800b290 <raise>
 800adec:	2001      	movs	r0, #1
 800adee:	f7f7 fd2a 	bl	8002846 <_exit>
	...

0800adf4 <__sflush_r>:
 800adf4:	898a      	ldrh	r2, [r1, #12]
 800adf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfa:	4605      	mov	r5, r0
 800adfc:	0710      	lsls	r0, r2, #28
 800adfe:	460c      	mov	r4, r1
 800ae00:	d458      	bmi.n	800aeb4 <__sflush_r+0xc0>
 800ae02:	684b      	ldr	r3, [r1, #4]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dc05      	bgt.n	800ae14 <__sflush_r+0x20>
 800ae08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	dc02      	bgt.n	800ae14 <__sflush_r+0x20>
 800ae0e:	2000      	movs	r0, #0
 800ae10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	d0f9      	beq.n	800ae0e <__sflush_r+0x1a>
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae20:	682f      	ldr	r7, [r5, #0]
 800ae22:	602b      	str	r3, [r5, #0]
 800ae24:	d032      	beq.n	800ae8c <__sflush_r+0x98>
 800ae26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	075a      	lsls	r2, r3, #29
 800ae2c:	d505      	bpl.n	800ae3a <__sflush_r+0x46>
 800ae2e:	6863      	ldr	r3, [r4, #4]
 800ae30:	1ac0      	subs	r0, r0, r3
 800ae32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae34:	b10b      	cbz	r3, 800ae3a <__sflush_r+0x46>
 800ae36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae38:	1ac0      	subs	r0, r0, r3
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae40:	4628      	mov	r0, r5
 800ae42:	6a21      	ldr	r1, [r4, #32]
 800ae44:	47b0      	blx	r6
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	d106      	bne.n	800ae5a <__sflush_r+0x66>
 800ae4c:	6829      	ldr	r1, [r5, #0]
 800ae4e:	291d      	cmp	r1, #29
 800ae50:	d82c      	bhi.n	800aeac <__sflush_r+0xb8>
 800ae52:	4a2a      	ldr	r2, [pc, #168]	; (800aefc <__sflush_r+0x108>)
 800ae54:	40ca      	lsrs	r2, r1
 800ae56:	07d6      	lsls	r6, r2, #31
 800ae58:	d528      	bpl.n	800aeac <__sflush_r+0xb8>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	6062      	str	r2, [r4, #4]
 800ae5e:	6922      	ldr	r2, [r4, #16]
 800ae60:	04d9      	lsls	r1, r3, #19
 800ae62:	6022      	str	r2, [r4, #0]
 800ae64:	d504      	bpl.n	800ae70 <__sflush_r+0x7c>
 800ae66:	1c42      	adds	r2, r0, #1
 800ae68:	d101      	bne.n	800ae6e <__sflush_r+0x7a>
 800ae6a:	682b      	ldr	r3, [r5, #0]
 800ae6c:	b903      	cbnz	r3, 800ae70 <__sflush_r+0x7c>
 800ae6e:	6560      	str	r0, [r4, #84]	; 0x54
 800ae70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae72:	602f      	str	r7, [r5, #0]
 800ae74:	2900      	cmp	r1, #0
 800ae76:	d0ca      	beq.n	800ae0e <__sflush_r+0x1a>
 800ae78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae7c:	4299      	cmp	r1, r3
 800ae7e:	d002      	beq.n	800ae86 <__sflush_r+0x92>
 800ae80:	4628      	mov	r0, r5
 800ae82:	f7ff fd25 	bl	800a8d0 <_free_r>
 800ae86:	2000      	movs	r0, #0
 800ae88:	6360      	str	r0, [r4, #52]	; 0x34
 800ae8a:	e7c1      	b.n	800ae10 <__sflush_r+0x1c>
 800ae8c:	6a21      	ldr	r1, [r4, #32]
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b0      	blx	r6
 800ae94:	1c41      	adds	r1, r0, #1
 800ae96:	d1c7      	bne.n	800ae28 <__sflush_r+0x34>
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0c4      	beq.n	800ae28 <__sflush_r+0x34>
 800ae9e:	2b1d      	cmp	r3, #29
 800aea0:	d001      	beq.n	800aea6 <__sflush_r+0xb2>
 800aea2:	2b16      	cmp	r3, #22
 800aea4:	d101      	bne.n	800aeaa <__sflush_r+0xb6>
 800aea6:	602f      	str	r7, [r5, #0]
 800aea8:	e7b1      	b.n	800ae0e <__sflush_r+0x1a>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	e7ad      	b.n	800ae10 <__sflush_r+0x1c>
 800aeb4:	690f      	ldr	r7, [r1, #16]
 800aeb6:	2f00      	cmp	r7, #0
 800aeb8:	d0a9      	beq.n	800ae0e <__sflush_r+0x1a>
 800aeba:	0793      	lsls	r3, r2, #30
 800aebc:	bf18      	it	ne
 800aebe:	2300      	movne	r3, #0
 800aec0:	680e      	ldr	r6, [r1, #0]
 800aec2:	bf08      	it	eq
 800aec4:	694b      	ldreq	r3, [r1, #20]
 800aec6:	eba6 0807 	sub.w	r8, r6, r7
 800aeca:	600f      	str	r7, [r1, #0]
 800aecc:	608b      	str	r3, [r1, #8]
 800aece:	f1b8 0f00 	cmp.w	r8, #0
 800aed2:	dd9c      	ble.n	800ae0e <__sflush_r+0x1a>
 800aed4:	4643      	mov	r3, r8
 800aed6:	463a      	mov	r2, r7
 800aed8:	4628      	mov	r0, r5
 800aeda:	6a21      	ldr	r1, [r4, #32]
 800aedc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aede:	47b0      	blx	r6
 800aee0:	2800      	cmp	r0, #0
 800aee2:	dc06      	bgt.n	800aef2 <__sflush_r+0xfe>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	e78e      	b.n	800ae10 <__sflush_r+0x1c>
 800aef2:	4407      	add	r7, r0
 800aef4:	eba8 0800 	sub.w	r8, r8, r0
 800aef8:	e7e9      	b.n	800aece <__sflush_r+0xda>
 800aefa:	bf00      	nop
 800aefc:	20400001 	.word	0x20400001

0800af00 <_fflush_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	690b      	ldr	r3, [r1, #16]
 800af04:	4605      	mov	r5, r0
 800af06:	460c      	mov	r4, r1
 800af08:	b913      	cbnz	r3, 800af10 <_fflush_r+0x10>
 800af0a:	2500      	movs	r5, #0
 800af0c:	4628      	mov	r0, r5
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	b118      	cbz	r0, 800af1a <_fflush_r+0x1a>
 800af12:	6983      	ldr	r3, [r0, #24]
 800af14:	b90b      	cbnz	r3, 800af1a <_fflush_r+0x1a>
 800af16:	f000 f887 	bl	800b028 <__sinit>
 800af1a:	4b14      	ldr	r3, [pc, #80]	; (800af6c <_fflush_r+0x6c>)
 800af1c:	429c      	cmp	r4, r3
 800af1e:	d11b      	bne.n	800af58 <_fflush_r+0x58>
 800af20:	686c      	ldr	r4, [r5, #4]
 800af22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0ef      	beq.n	800af0a <_fflush_r+0xa>
 800af2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af2c:	07d0      	lsls	r0, r2, #31
 800af2e:	d404      	bmi.n	800af3a <_fflush_r+0x3a>
 800af30:	0599      	lsls	r1, r3, #22
 800af32:	d402      	bmi.n	800af3a <_fflush_r+0x3a>
 800af34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af36:	f000 f915 	bl	800b164 <__retarget_lock_acquire_recursive>
 800af3a:	4628      	mov	r0, r5
 800af3c:	4621      	mov	r1, r4
 800af3e:	f7ff ff59 	bl	800adf4 <__sflush_r>
 800af42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af44:	4605      	mov	r5, r0
 800af46:	07da      	lsls	r2, r3, #31
 800af48:	d4e0      	bmi.n	800af0c <_fflush_r+0xc>
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	059b      	lsls	r3, r3, #22
 800af4e:	d4dd      	bmi.n	800af0c <_fflush_r+0xc>
 800af50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af52:	f000 f908 	bl	800b166 <__retarget_lock_release_recursive>
 800af56:	e7d9      	b.n	800af0c <_fflush_r+0xc>
 800af58:	4b05      	ldr	r3, [pc, #20]	; (800af70 <_fflush_r+0x70>)
 800af5a:	429c      	cmp	r4, r3
 800af5c:	d101      	bne.n	800af62 <_fflush_r+0x62>
 800af5e:	68ac      	ldr	r4, [r5, #8]
 800af60:	e7df      	b.n	800af22 <_fflush_r+0x22>
 800af62:	4b04      	ldr	r3, [pc, #16]	; (800af74 <_fflush_r+0x74>)
 800af64:	429c      	cmp	r4, r3
 800af66:	bf08      	it	eq
 800af68:	68ec      	ldreq	r4, [r5, #12]
 800af6a:	e7da      	b.n	800af22 <_fflush_r+0x22>
 800af6c:	0800c404 	.word	0x0800c404
 800af70:	0800c424 	.word	0x0800c424
 800af74:	0800c3e4 	.word	0x0800c3e4

0800af78 <std>:
 800af78:	2300      	movs	r3, #0
 800af7a:	b510      	push	{r4, lr}
 800af7c:	4604      	mov	r4, r0
 800af7e:	e9c0 3300 	strd	r3, r3, [r0]
 800af82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af86:	6083      	str	r3, [r0, #8]
 800af88:	8181      	strh	r1, [r0, #12]
 800af8a:	6643      	str	r3, [r0, #100]	; 0x64
 800af8c:	81c2      	strh	r2, [r0, #14]
 800af8e:	6183      	str	r3, [r0, #24]
 800af90:	4619      	mov	r1, r3
 800af92:	2208      	movs	r2, #8
 800af94:	305c      	adds	r0, #92	; 0x5c
 800af96:	f7fd fa25 	bl	80083e4 <memset>
 800af9a:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <std+0x38>)
 800af9c:	6224      	str	r4, [r4, #32]
 800af9e:	6263      	str	r3, [r4, #36]	; 0x24
 800afa0:	4b04      	ldr	r3, [pc, #16]	; (800afb4 <std+0x3c>)
 800afa2:	62a3      	str	r3, [r4, #40]	; 0x28
 800afa4:	4b04      	ldr	r3, [pc, #16]	; (800afb8 <std+0x40>)
 800afa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800afa8:	4b04      	ldr	r3, [pc, #16]	; (800afbc <std+0x44>)
 800afaa:	6323      	str	r3, [r4, #48]	; 0x30
 800afac:	bd10      	pop	{r4, pc}
 800afae:	bf00      	nop
 800afb0:	0800b2c9 	.word	0x0800b2c9
 800afb4:	0800b2eb 	.word	0x0800b2eb
 800afb8:	0800b323 	.word	0x0800b323
 800afbc:	0800b347 	.word	0x0800b347

0800afc0 <_cleanup_r>:
 800afc0:	4901      	ldr	r1, [pc, #4]	; (800afc8 <_cleanup_r+0x8>)
 800afc2:	f000 b8af 	b.w	800b124 <_fwalk_reent>
 800afc6:	bf00      	nop
 800afc8:	0800af01 	.word	0x0800af01

0800afcc <__sfmoreglue>:
 800afcc:	b570      	push	{r4, r5, r6, lr}
 800afce:	2568      	movs	r5, #104	; 0x68
 800afd0:	1e4a      	subs	r2, r1, #1
 800afd2:	4355      	muls	r5, r2
 800afd4:	460e      	mov	r6, r1
 800afd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afda:	f7ff f88b 	bl	800a0f4 <_malloc_r>
 800afde:	4604      	mov	r4, r0
 800afe0:	b140      	cbz	r0, 800aff4 <__sfmoreglue+0x28>
 800afe2:	2100      	movs	r1, #0
 800afe4:	e9c0 1600 	strd	r1, r6, [r0]
 800afe8:	300c      	adds	r0, #12
 800afea:	60a0      	str	r0, [r4, #8]
 800afec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aff0:	f7fd f9f8 	bl	80083e4 <memset>
 800aff4:	4620      	mov	r0, r4
 800aff6:	bd70      	pop	{r4, r5, r6, pc}

0800aff8 <__sfp_lock_acquire>:
 800aff8:	4801      	ldr	r0, [pc, #4]	; (800b000 <__sfp_lock_acquire+0x8>)
 800affa:	f000 b8b3 	b.w	800b164 <__retarget_lock_acquire_recursive>
 800affe:	bf00      	nop
 800b000:	20005004 	.word	0x20005004

0800b004 <__sfp_lock_release>:
 800b004:	4801      	ldr	r0, [pc, #4]	; (800b00c <__sfp_lock_release+0x8>)
 800b006:	f000 b8ae 	b.w	800b166 <__retarget_lock_release_recursive>
 800b00a:	bf00      	nop
 800b00c:	20005004 	.word	0x20005004

0800b010 <__sinit_lock_acquire>:
 800b010:	4801      	ldr	r0, [pc, #4]	; (800b018 <__sinit_lock_acquire+0x8>)
 800b012:	f000 b8a7 	b.w	800b164 <__retarget_lock_acquire_recursive>
 800b016:	bf00      	nop
 800b018:	20004fff 	.word	0x20004fff

0800b01c <__sinit_lock_release>:
 800b01c:	4801      	ldr	r0, [pc, #4]	; (800b024 <__sinit_lock_release+0x8>)
 800b01e:	f000 b8a2 	b.w	800b166 <__retarget_lock_release_recursive>
 800b022:	bf00      	nop
 800b024:	20004fff 	.word	0x20004fff

0800b028 <__sinit>:
 800b028:	b510      	push	{r4, lr}
 800b02a:	4604      	mov	r4, r0
 800b02c:	f7ff fff0 	bl	800b010 <__sinit_lock_acquire>
 800b030:	69a3      	ldr	r3, [r4, #24]
 800b032:	b11b      	cbz	r3, 800b03c <__sinit+0x14>
 800b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b038:	f7ff bff0 	b.w	800b01c <__sinit_lock_release>
 800b03c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b040:	6523      	str	r3, [r4, #80]	; 0x50
 800b042:	4b13      	ldr	r3, [pc, #76]	; (800b090 <__sinit+0x68>)
 800b044:	4a13      	ldr	r2, [pc, #76]	; (800b094 <__sinit+0x6c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	62a2      	str	r2, [r4, #40]	; 0x28
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	bf08      	it	eq
 800b04e:	2301      	moveq	r3, #1
 800b050:	4620      	mov	r0, r4
 800b052:	bf08      	it	eq
 800b054:	61a3      	streq	r3, [r4, #24]
 800b056:	f000 f81f 	bl	800b098 <__sfp>
 800b05a:	6060      	str	r0, [r4, #4]
 800b05c:	4620      	mov	r0, r4
 800b05e:	f000 f81b 	bl	800b098 <__sfp>
 800b062:	60a0      	str	r0, [r4, #8]
 800b064:	4620      	mov	r0, r4
 800b066:	f000 f817 	bl	800b098 <__sfp>
 800b06a:	2200      	movs	r2, #0
 800b06c:	2104      	movs	r1, #4
 800b06e:	60e0      	str	r0, [r4, #12]
 800b070:	6860      	ldr	r0, [r4, #4]
 800b072:	f7ff ff81 	bl	800af78 <std>
 800b076:	2201      	movs	r2, #1
 800b078:	2109      	movs	r1, #9
 800b07a:	68a0      	ldr	r0, [r4, #8]
 800b07c:	f7ff ff7c 	bl	800af78 <std>
 800b080:	2202      	movs	r2, #2
 800b082:	2112      	movs	r1, #18
 800b084:	68e0      	ldr	r0, [r4, #12]
 800b086:	f7ff ff77 	bl	800af78 <std>
 800b08a:	2301      	movs	r3, #1
 800b08c:	61a3      	str	r3, [r4, #24]
 800b08e:	e7d1      	b.n	800b034 <__sinit+0xc>
 800b090:	0800c00c 	.word	0x0800c00c
 800b094:	0800afc1 	.word	0x0800afc1

0800b098 <__sfp>:
 800b098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09a:	4607      	mov	r7, r0
 800b09c:	f7ff ffac 	bl	800aff8 <__sfp_lock_acquire>
 800b0a0:	4b1e      	ldr	r3, [pc, #120]	; (800b11c <__sfp+0x84>)
 800b0a2:	681e      	ldr	r6, [r3, #0]
 800b0a4:	69b3      	ldr	r3, [r6, #24]
 800b0a6:	b913      	cbnz	r3, 800b0ae <__sfp+0x16>
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ffbd 	bl	800b028 <__sinit>
 800b0ae:	3648      	adds	r6, #72	; 0x48
 800b0b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	d503      	bpl.n	800b0c0 <__sfp+0x28>
 800b0b8:	6833      	ldr	r3, [r6, #0]
 800b0ba:	b30b      	cbz	r3, 800b100 <__sfp+0x68>
 800b0bc:	6836      	ldr	r6, [r6, #0]
 800b0be:	e7f7      	b.n	800b0b0 <__sfp+0x18>
 800b0c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0c4:	b9d5      	cbnz	r5, 800b0fc <__sfp+0x64>
 800b0c6:	4b16      	ldr	r3, [pc, #88]	; (800b120 <__sfp+0x88>)
 800b0c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0cc:	60e3      	str	r3, [r4, #12]
 800b0ce:	6665      	str	r5, [r4, #100]	; 0x64
 800b0d0:	f000 f847 	bl	800b162 <__retarget_lock_init_recursive>
 800b0d4:	f7ff ff96 	bl	800b004 <__sfp_lock_release>
 800b0d8:	2208      	movs	r2, #8
 800b0da:	4629      	mov	r1, r5
 800b0dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0e4:	6025      	str	r5, [r4, #0]
 800b0e6:	61a5      	str	r5, [r4, #24]
 800b0e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0ec:	f7fd f97a 	bl	80083e4 <memset>
 800b0f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0fc:	3468      	adds	r4, #104	; 0x68
 800b0fe:	e7d9      	b.n	800b0b4 <__sfp+0x1c>
 800b100:	2104      	movs	r1, #4
 800b102:	4638      	mov	r0, r7
 800b104:	f7ff ff62 	bl	800afcc <__sfmoreglue>
 800b108:	4604      	mov	r4, r0
 800b10a:	6030      	str	r0, [r6, #0]
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d1d5      	bne.n	800b0bc <__sfp+0x24>
 800b110:	f7ff ff78 	bl	800b004 <__sfp_lock_release>
 800b114:	230c      	movs	r3, #12
 800b116:	603b      	str	r3, [r7, #0]
 800b118:	e7ee      	b.n	800b0f8 <__sfp+0x60>
 800b11a:	bf00      	nop
 800b11c:	0800c00c 	.word	0x0800c00c
 800b120:	ffff0001 	.word	0xffff0001

0800b124 <_fwalk_reent>:
 800b124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b128:	4606      	mov	r6, r0
 800b12a:	4688      	mov	r8, r1
 800b12c:	2700      	movs	r7, #0
 800b12e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b132:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b136:	f1b9 0901 	subs.w	r9, r9, #1
 800b13a:	d505      	bpl.n	800b148 <_fwalk_reent+0x24>
 800b13c:	6824      	ldr	r4, [r4, #0]
 800b13e:	2c00      	cmp	r4, #0
 800b140:	d1f7      	bne.n	800b132 <_fwalk_reent+0xe>
 800b142:	4638      	mov	r0, r7
 800b144:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b148:	89ab      	ldrh	r3, [r5, #12]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d907      	bls.n	800b15e <_fwalk_reent+0x3a>
 800b14e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b152:	3301      	adds	r3, #1
 800b154:	d003      	beq.n	800b15e <_fwalk_reent+0x3a>
 800b156:	4629      	mov	r1, r5
 800b158:	4630      	mov	r0, r6
 800b15a:	47c0      	blx	r8
 800b15c:	4307      	orrs	r7, r0
 800b15e:	3568      	adds	r5, #104	; 0x68
 800b160:	e7e9      	b.n	800b136 <_fwalk_reent+0x12>

0800b162 <__retarget_lock_init_recursive>:
 800b162:	4770      	bx	lr

0800b164 <__retarget_lock_acquire_recursive>:
 800b164:	4770      	bx	lr

0800b166 <__retarget_lock_release_recursive>:
 800b166:	4770      	bx	lr

0800b168 <__swhatbuf_r>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	460e      	mov	r6, r1
 800b16c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b170:	4614      	mov	r4, r2
 800b172:	2900      	cmp	r1, #0
 800b174:	461d      	mov	r5, r3
 800b176:	b096      	sub	sp, #88	; 0x58
 800b178:	da07      	bge.n	800b18a <__swhatbuf_r+0x22>
 800b17a:	2300      	movs	r3, #0
 800b17c:	602b      	str	r3, [r5, #0]
 800b17e:	89b3      	ldrh	r3, [r6, #12]
 800b180:	061a      	lsls	r2, r3, #24
 800b182:	d410      	bmi.n	800b1a6 <__swhatbuf_r+0x3e>
 800b184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b188:	e00e      	b.n	800b1a8 <__swhatbuf_r+0x40>
 800b18a:	466a      	mov	r2, sp
 800b18c:	f000 f902 	bl	800b394 <_fstat_r>
 800b190:	2800      	cmp	r0, #0
 800b192:	dbf2      	blt.n	800b17a <__swhatbuf_r+0x12>
 800b194:	9a01      	ldr	r2, [sp, #4]
 800b196:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b19a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b19e:	425a      	negs	r2, r3
 800b1a0:	415a      	adcs	r2, r3
 800b1a2:	602a      	str	r2, [r5, #0]
 800b1a4:	e7ee      	b.n	800b184 <__swhatbuf_r+0x1c>
 800b1a6:	2340      	movs	r3, #64	; 0x40
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	b016      	add	sp, #88	; 0x58
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}

0800b1b0 <__smakebuf_r>:
 800b1b0:	898b      	ldrh	r3, [r1, #12]
 800b1b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1b4:	079d      	lsls	r5, r3, #30
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460c      	mov	r4, r1
 800b1ba:	d507      	bpl.n	800b1cc <__smakebuf_r+0x1c>
 800b1bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	6123      	str	r3, [r4, #16]
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	6163      	str	r3, [r4, #20]
 800b1c8:	b002      	add	sp, #8
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	466a      	mov	r2, sp
 800b1ce:	ab01      	add	r3, sp, #4
 800b1d0:	f7ff ffca 	bl	800b168 <__swhatbuf_r>
 800b1d4:	9900      	ldr	r1, [sp, #0]
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	4630      	mov	r0, r6
 800b1da:	f7fe ff8b 	bl	800a0f4 <_malloc_r>
 800b1de:	b948      	cbnz	r0, 800b1f4 <__smakebuf_r+0x44>
 800b1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e4:	059a      	lsls	r2, r3, #22
 800b1e6:	d4ef      	bmi.n	800b1c8 <__smakebuf_r+0x18>
 800b1e8:	f023 0303 	bic.w	r3, r3, #3
 800b1ec:	f043 0302 	orr.w	r3, r3, #2
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	e7e3      	b.n	800b1bc <__smakebuf_r+0xc>
 800b1f4:	4b0d      	ldr	r3, [pc, #52]	; (800b22c <__smakebuf_r+0x7c>)
 800b1f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1f8:	89a3      	ldrh	r3, [r4, #12]
 800b1fa:	6020      	str	r0, [r4, #0]
 800b1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b200:	81a3      	strh	r3, [r4, #12]
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	6120      	str	r0, [r4, #16]
 800b206:	6163      	str	r3, [r4, #20]
 800b208:	9b01      	ldr	r3, [sp, #4]
 800b20a:	b15b      	cbz	r3, 800b224 <__smakebuf_r+0x74>
 800b20c:	4630      	mov	r0, r6
 800b20e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b212:	f000 f8d1 	bl	800b3b8 <_isatty_r>
 800b216:	b128      	cbz	r0, 800b224 <__smakebuf_r+0x74>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	f023 0303 	bic.w	r3, r3, #3
 800b21e:	f043 0301 	orr.w	r3, r3, #1
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	89a0      	ldrh	r0, [r4, #12]
 800b226:	4305      	orrs	r5, r0
 800b228:	81a5      	strh	r5, [r4, #12]
 800b22a:	e7cd      	b.n	800b1c8 <__smakebuf_r+0x18>
 800b22c:	0800afc1 	.word	0x0800afc1

0800b230 <_malloc_usable_size_r>:
 800b230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b234:	1f18      	subs	r0, r3, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	bfbc      	itt	lt
 800b23a:	580b      	ldrlt	r3, [r1, r0]
 800b23c:	18c0      	addlt	r0, r0, r3
 800b23e:	4770      	bx	lr

0800b240 <_raise_r>:
 800b240:	291f      	cmp	r1, #31
 800b242:	b538      	push	{r3, r4, r5, lr}
 800b244:	4604      	mov	r4, r0
 800b246:	460d      	mov	r5, r1
 800b248:	d904      	bls.n	800b254 <_raise_r+0x14>
 800b24a:	2316      	movs	r3, #22
 800b24c:	6003      	str	r3, [r0, #0]
 800b24e:	f04f 30ff 	mov.w	r0, #4294967295
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b256:	b112      	cbz	r2, 800b25e <_raise_r+0x1e>
 800b258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b25c:	b94b      	cbnz	r3, 800b272 <_raise_r+0x32>
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 f830 	bl	800b2c4 <_getpid_r>
 800b264:	462a      	mov	r2, r5
 800b266:	4601      	mov	r1, r0
 800b268:	4620      	mov	r0, r4
 800b26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b26e:	f000 b817 	b.w	800b2a0 <_kill_r>
 800b272:	2b01      	cmp	r3, #1
 800b274:	d00a      	beq.n	800b28c <_raise_r+0x4c>
 800b276:	1c59      	adds	r1, r3, #1
 800b278:	d103      	bne.n	800b282 <_raise_r+0x42>
 800b27a:	2316      	movs	r3, #22
 800b27c:	6003      	str	r3, [r0, #0]
 800b27e:	2001      	movs	r0, #1
 800b280:	e7e7      	b.n	800b252 <_raise_r+0x12>
 800b282:	2400      	movs	r4, #0
 800b284:	4628      	mov	r0, r5
 800b286:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b28a:	4798      	blx	r3
 800b28c:	2000      	movs	r0, #0
 800b28e:	e7e0      	b.n	800b252 <_raise_r+0x12>

0800b290 <raise>:
 800b290:	4b02      	ldr	r3, [pc, #8]	; (800b29c <raise+0xc>)
 800b292:	4601      	mov	r1, r0
 800b294:	6818      	ldr	r0, [r3, #0]
 800b296:	f7ff bfd3 	b.w	800b240 <_raise_r>
 800b29a:	bf00      	nop
 800b29c:	20000010 	.word	0x20000010

0800b2a0 <_kill_r>:
 800b2a0:	b538      	push	{r3, r4, r5, lr}
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	4d06      	ldr	r5, [pc, #24]	; (800b2c0 <_kill_r+0x20>)
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	4608      	mov	r0, r1
 800b2aa:	4611      	mov	r1, r2
 800b2ac:	602b      	str	r3, [r5, #0]
 800b2ae:	f7f7 faba 	bl	8002826 <_kill>
 800b2b2:	1c43      	adds	r3, r0, #1
 800b2b4:	d102      	bne.n	800b2bc <_kill_r+0x1c>
 800b2b6:	682b      	ldr	r3, [r5, #0]
 800b2b8:	b103      	cbz	r3, 800b2bc <_kill_r+0x1c>
 800b2ba:	6023      	str	r3, [r4, #0]
 800b2bc:	bd38      	pop	{r3, r4, r5, pc}
 800b2be:	bf00      	nop
 800b2c0:	20004ff8 	.word	0x20004ff8

0800b2c4 <_getpid_r>:
 800b2c4:	f7f7 baa8 	b.w	8002818 <_getpid>

0800b2c8 <__sread>:
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d0:	f000 f894 	bl	800b3fc <_read_r>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	bfab      	itete	ge
 800b2d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2da:	89a3      	ldrhlt	r3, [r4, #12]
 800b2dc:	181b      	addge	r3, r3, r0
 800b2de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2e2:	bfac      	ite	ge
 800b2e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2e6:	81a3      	strhlt	r3, [r4, #12]
 800b2e8:	bd10      	pop	{r4, pc}

0800b2ea <__swrite>:
 800b2ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ee:	461f      	mov	r7, r3
 800b2f0:	898b      	ldrh	r3, [r1, #12]
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	05db      	lsls	r3, r3, #23
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	4616      	mov	r6, r2
 800b2fa:	d505      	bpl.n	800b308 <__swrite+0x1e>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	2200      	movs	r2, #0
 800b300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b304:	f000 f868 	bl	800b3d8 <_lseek_r>
 800b308:	89a3      	ldrh	r3, [r4, #12]
 800b30a:	4632      	mov	r2, r6
 800b30c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b310:	81a3      	strh	r3, [r4, #12]
 800b312:	4628      	mov	r0, r5
 800b314:	463b      	mov	r3, r7
 800b316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b31e:	f000 b817 	b.w	800b350 <_write_r>

0800b322 <__sseek>:
 800b322:	b510      	push	{r4, lr}
 800b324:	460c      	mov	r4, r1
 800b326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32a:	f000 f855 	bl	800b3d8 <_lseek_r>
 800b32e:	1c43      	adds	r3, r0, #1
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	bf15      	itete	ne
 800b334:	6560      	strne	r0, [r4, #84]	; 0x54
 800b336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b33a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b33e:	81a3      	strheq	r3, [r4, #12]
 800b340:	bf18      	it	ne
 800b342:	81a3      	strhne	r3, [r4, #12]
 800b344:	bd10      	pop	{r4, pc}

0800b346 <__sclose>:
 800b346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34a:	f000 b813 	b.w	800b374 <_close_r>
	...

0800b350 <_write_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4604      	mov	r4, r0
 800b354:	4608      	mov	r0, r1
 800b356:	4611      	mov	r1, r2
 800b358:	2200      	movs	r2, #0
 800b35a:	4d05      	ldr	r5, [pc, #20]	; (800b370 <_write_r+0x20>)
 800b35c:	602a      	str	r2, [r5, #0]
 800b35e:	461a      	mov	r2, r3
 800b360:	f7f7 fa98 	bl	8002894 <_write>
 800b364:	1c43      	adds	r3, r0, #1
 800b366:	d102      	bne.n	800b36e <_write_r+0x1e>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	b103      	cbz	r3, 800b36e <_write_r+0x1e>
 800b36c:	6023      	str	r3, [r4, #0]
 800b36e:	bd38      	pop	{r3, r4, r5, pc}
 800b370:	20004ff8 	.word	0x20004ff8

0800b374 <_close_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	2300      	movs	r3, #0
 800b378:	4d05      	ldr	r5, [pc, #20]	; (800b390 <_close_r+0x1c>)
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f7 faa4 	bl	80028cc <_close>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_close_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_close_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20004ff8 	.word	0x20004ff8

0800b394 <_fstat_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	2300      	movs	r3, #0
 800b398:	4d06      	ldr	r5, [pc, #24]	; (800b3b4 <_fstat_r+0x20>)
 800b39a:	4604      	mov	r4, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	4611      	mov	r1, r2
 800b3a0:	602b      	str	r3, [r5, #0]
 800b3a2:	f7f7 fa9e 	bl	80028e2 <_fstat>
 800b3a6:	1c43      	adds	r3, r0, #1
 800b3a8:	d102      	bne.n	800b3b0 <_fstat_r+0x1c>
 800b3aa:	682b      	ldr	r3, [r5, #0]
 800b3ac:	b103      	cbz	r3, 800b3b0 <_fstat_r+0x1c>
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20004ff8 	.word	0x20004ff8

0800b3b8 <_isatty_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	4d05      	ldr	r5, [pc, #20]	; (800b3d4 <_isatty_r+0x1c>)
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	602b      	str	r3, [r5, #0]
 800b3c4:	f7f7 fa9c 	bl	8002900 <_isatty>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_isatty_r+0x1a>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_isatty_r+0x1a>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	20004ff8 	.word	0x20004ff8

0800b3d8 <_lseek_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4604      	mov	r4, r0
 800b3dc:	4608      	mov	r0, r1
 800b3de:	4611      	mov	r1, r2
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4d05      	ldr	r5, [pc, #20]	; (800b3f8 <_lseek_r+0x20>)
 800b3e4:	602a      	str	r2, [r5, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f7f7 fa94 	bl	8002914 <_lseek>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_lseek_r+0x1e>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_lseek_r+0x1e>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20004ff8 	.word	0x20004ff8

0800b3fc <_read_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4604      	mov	r4, r0
 800b400:	4608      	mov	r0, r1
 800b402:	4611      	mov	r1, r2
 800b404:	2200      	movs	r2, #0
 800b406:	4d05      	ldr	r5, [pc, #20]	; (800b41c <_read_r+0x20>)
 800b408:	602a      	str	r2, [r5, #0]
 800b40a:	461a      	mov	r2, r3
 800b40c:	f7f7 fa25 	bl	800285a <_read>
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	d102      	bne.n	800b41a <_read_r+0x1e>
 800b414:	682b      	ldr	r3, [r5, #0]
 800b416:	b103      	cbz	r3, 800b41a <_read_r+0x1e>
 800b418:	6023      	str	r3, [r4, #0]
 800b41a:	bd38      	pop	{r3, r4, r5, pc}
 800b41c:	20004ff8 	.word	0x20004ff8

0800b420 <_init>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	bf00      	nop
 800b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b426:	bc08      	pop	{r3}
 800b428:	469e      	mov	lr, r3
 800b42a:	4770      	bx	lr

0800b42c <_fini>:
 800b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42e:	bf00      	nop
 800b430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b432:	bc08      	pop	{r3}
 800b434:	469e      	mov	lr, r3
 800b436:	4770      	bx	lr
